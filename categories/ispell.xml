<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (ispell)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/ispell.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Fri, 13 May 2016 03:05:34 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>What's the best spell check setup in emacs</title><link>http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;UPDATED: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2016-05-13 Fri&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2014-04-26&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
I will show you the minimum setup.
&lt;/p&gt;

&lt;p&gt;
Then I will explain why.
&lt;/p&gt;

&lt;p&gt;
Topics covered in official manual (flyspell-mode-predicate, for example) are NOT discussed here.
&lt;/p&gt;

&lt;p&gt;
But you can see my &lt;b&gt;complete&lt;/b&gt; setup &lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-spelling.el"&gt;HERE&lt;/a&gt;.
&lt;/p&gt;

&lt;div id="outline-container-1" class="outline-3"&gt;
&lt;h4 id="sec-1"&gt;Suggestion for non-programmers&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-1"&gt;

&lt;p&gt;Emacs will find the right dictionary by querying your locale.
&lt;/p&gt;
&lt;p&gt;
Run command "locale" in your shell to get current locale.
&lt;/p&gt;
&lt;p&gt;
If you want to force Emacs use the dictionary "en_US", insert below code into your ~/.emacs:
&lt;/p&gt;



&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; find aspell and hunspell automatically
(cond
 ;; try hunspell at first
  ;; if hunspell does NOT exist, use aspell
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")
  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
        ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
        ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
          )))

 ((executable-find "aspell")
  (setq ispell-program-name "aspell")
  ;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))))
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;
That's it!
&lt;/p&gt;
&lt;p&gt;
Some people prefer hunspell to aspell because &lt;b&gt;hunspell gives better suggestions for typo fix&lt;/b&gt;. We can run both in shell to demonstrate that,
&lt;/p&gt;



&lt;pre&gt;&lt;code class="lang-bash"&gt;echo htink | aspell -a --sug-mode=ultra --lang=en_US
echo htink | hunspell -a -d en_US
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;
Please run command "man aspell" or "man hunspell" in shell if you have more questions. I've nothing more to say.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-2" class="outline-3"&gt;
&lt;h4 id="sec-2"&gt;Suggestion for programmers&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-2"&gt;

&lt;p&gt;I strongly recommend aspell instead of hunspell (Though hunspell is fine).
&lt;/p&gt;
&lt;p&gt;
Please insert below code into your ~/.emacs:
&lt;/p&gt;




&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; if (aspell installed) { use aspell}
;; else if (hunspell installed) { use hunspell }
;; whatever spell checker I use, I always use English dictionary
;; I prefer use aspell because:
;; 1. aspell is older
;; 2. looks Kevin Atkinson still get some road map for aspell:
;; @see http://lists.gnu.org/archive/html/aspell-announce/2011-09/msg00000.html
(defun flyspell-detect-ispell-args (&amp;amp;optional run-together)
  "if RUN-TOGETHER is true, spell check the CamelCase words."
  (let (args)
    (cond
     ((string-match  "aspell$" ispell-program-name)
      ;; Force the English dictionary for aspell
      ;; Support Camel Case spelling check (tested with aspell 0.6)
      (setq args (list "--sug-mode=ultra" "--lang=en_US"))
      (if run-together
          (setq args (append args '("--run-together" "--run-together-limit=5" "--run-together-min=2")))))
     ((string-match "hunspell$" ispell-program-name)
      ;; Force the English dictionary for hunspell
      (setq args "-d en_US")))
    args))

(cond
 ((executable-find "aspell")
  ;; you may also need `ispell-extra-args'
  (setq ispell-program-name "aspell"))
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")

  ;; Please note that `ispell-local-dictionary` itself will be passed to hunspell cli with "-d"
  ;; it's also used as the key to lookup ispell-local-dictionary-alist
  ;; if we use different dictionary
  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))))
 (t (setq ispell-program-name nil)))

;; ispell-cmd-args is useless, it's the list of *extra* arguments we will append to the ispell process when "ispell-word" is called.
;; ispell-extra-args is the command arguments which will *always* be used when start ispell process
;; Please note when you use hunspell, ispell-extra-args will NOT be used.
;; Hack ispell-local-dictionary-alist instead.
(setq-default ispell-extra-args (flyspell-detect-ispell-args t))
;; (setq ispell-cmd-args (flyspell-detect-ispell-args))
(defadvice ispell-word (around my-ispell-word activate)
  (let ((old-ispell-extra-args ispell-extra-args))
    (ispell-kill-ispell t)
    (setq ispell-extra-args (flyspell-detect-ispell-args))
    ad-do-it
    (setq ispell-extra-args old-ispell-extra-args)
    (ispell-kill-ispell t)
    ))

(defadvice flyspell-auto-correct-word (around my-flyspell-auto-correct-word activate)
  (let ((old-ispell-extra-args ispell-extra-args))
    (ispell-kill-ispell t)
    ;; use emacs original arguments
    (setq ispell-extra-args (flyspell-detect-ispell-args))
    ad-do-it
    ;; restore our own ispell arguments
    (setq ispell-extra-args old-ispell-extra-args)
    (ispell-kill-ispell t)
    ))

(defun text-mode-hook-setup ()
  ;; Turn off RUN-TOGETHER option when spell check text-mode
  (setq-local ispell-extra-args (flyspell-detect-ispell-args)))
(add-hook 'text-mode-hook 'text-mode-hook-setup)
&lt;/code&gt;&lt;/pre&gt;


&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-3" class="outline-3"&gt;
&lt;h4 id="sec-3"&gt;Why&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3"&gt;

&lt;ul&gt;&lt;li id="sec-3-1"&gt;Aspell&lt;br&gt;
aspell is recommended because its option "–run-together". That option could check the &lt;b&gt;camel case word&lt;/b&gt;. Variable name often uses camel case naming convention these days. Read my &lt;a href="http://blog.binchen.org/?p=950"&gt;Effective spell check in Emacs&lt;/a&gt; for advanced tips (spell check HTML files).

&lt;p&gt;
If Emacs start a aspell process with "–run-together" option, that process is not closed so it can be re-used by other commands.
&lt;/p&gt;
&lt;p&gt;
This behavior will be a problem if you want to let Emacs/aspell correct the typo by running the command "ispell-word" because a aspell process with "–run-together" will produce much noise.
&lt;/p&gt;
&lt;p&gt;
For example, for a typo "helle" Emacs will give you too many candidates. It's hard to find the desired word "hello":
&lt;img src="http://blog.binchen.org/wp-content/aspell-camelcase-suggest-nq8.png" alt="aspell-camelcase-suggest-nq8.png"&gt;&lt;/p&gt;
&lt;p&gt;
The better solution is before running "M-x ispell-word", we'd better restart a aspell process without the argument "–run-together".
&lt;/p&gt;
&lt;p&gt;
Here is the screen shot after we applying this fix:
&lt;img src="http://blog.binchen.org/wp-content/aspell-normal-suggest-nq8.png" alt="aspell-normal-suggest-nq8.png"&gt;&lt;/p&gt;
&lt;p&gt;
As I mentioned, the global variable "ispell-extra-args" contains arguments Emacs will always append to a spell checker process (aspell or hunspell). That's the &lt;b&gt;only variable you need care about&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
There is another variable named "ispell-cmd-args". It is actually some &lt;b&gt;extra&lt;/b&gt; arguments Emacs could send to an &lt;b&gt;existing&lt;/b&gt; spell checker process when you "M-x ispell-word". In my opinion, it's useless. I mention it because the naming are confusing. "ispell-extra-args" is actually command line arguments the spell checker will &lt;b&gt;always&lt;/b&gt; use. The "ispell-cmd-args" are the extra arguments &lt;b&gt;optionally&lt;/b&gt; be used.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li id="sec-3-2"&gt;Hunspell&lt;br&gt;
I cannot find hunspell option to check camel case words. Please enlighten me if you know the option.

&lt;p&gt;
Hunspell has some design flaw. It will always check the environment variable LC_ALL, LC_MESSAGES and LANG &lt;b&gt;at first&lt;/b&gt; to find the default dictionary unless you specify the dictionary in the command line. If it cannot find the default dictionary, the spell checker process won't start. Aspell does not have this issue, if it cannot find the zh_CN dictionary, it will fall back into English.
&lt;/p&gt;
&lt;p&gt;
Specify the ispell-extra-args &lt;b&gt;won't stop hunspell to search for the default dictionary&lt;/b&gt; at the beginning because ispell-extra-args is NOT used.
&lt;/p&gt;
&lt;p&gt;
For example, I am a Chinese and my locale is "zh_CN.utf-8". So hunspell will always search the dictionary zh_CN. Even I'm only interested in English spell checking.
&lt;/p&gt;
&lt;p&gt;
To specify the dictionary explicitly, I need hack the Emacs code which is kind of mess.
&lt;/p&gt;
&lt;p&gt;
Finally, I figure out,
&lt;/p&gt;



&lt;pre&gt;&lt;code class="lang-lisp"&gt;(setq ispell-program-name "hunspell")
;; below two lines reset the the hunspell to it STOPS querying locale!
(setq ispell-local-dictionary "en_US") ; "en_US" is key to lookup in `ispell-local-dictionary-alist`
(setq ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;
As you can see, you can pass the extra arguments to the hunspell by tweak &lt;code&gt;ispell-local-dictionary-alist&lt;/code&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-4" class="outline-3"&gt;
&lt;h4 id="sec-4"&gt;FAQ&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-4"&gt;

&lt;ul&gt;&lt;li id="sec-4-1"&gt;How to setup Hunspell&lt;br&gt;
The easiest way is to set up environment variable &lt;code&gt;DICPATH&lt;/code&gt;,




&lt;pre&gt;&lt;code class="lang-bash"&gt;export DICPATH=/Applications/LibreOffice.app/Contents/Resources/extensions/dict-en:/Applications/LibreOffice.app/Contents/Resources/extensions/dict-es
hunspell -D # list available/loaded dictionaries
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;
You can also run &lt;code&gt;hunspell -D&lt;/code&gt; in shell to figure out where hunspell searches dictionaries.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>aspell</category><category>check</category><category>emacs</category><category>en</category><category>hunspell</category><category>ispell</category><category>spell</category><guid>http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html</guid><pubDate>Mon, 21 Apr 2014 08:25:20 GMT</pubDate></item></channel></rss>