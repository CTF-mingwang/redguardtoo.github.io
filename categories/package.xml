<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (package)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/package.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 30 Jun 2016 13:14:35 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How to manage Emacs packages effectively</title><link>http://blog.binchen.org/posts/how-to-manage-emacs-packages-effectively.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
I developed a few package managing techniques after reading &lt;a href="https://github.com/purcell"&gt;Steve Purcell&lt;/a&gt;'s Emacs setup.
&lt;/p&gt;

&lt;p&gt;
The techniques are compatible with other plugin (&lt;a href="https://github.com/jwiegley/use-package"&gt;use-package&lt;/a&gt;, for example) based on package.el.
&lt;/p&gt;

&lt;p&gt;
Emacs Lisp knowledge is required to read this article.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h3 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Technique 1, Do NOT use package.el for certain packages&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Create directory &lt;code&gt;site-lisp&lt;/code&gt; at &lt;code&gt;~/.emacs.d&lt;/code&gt;, then insert below code into &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(if (fboundp 'normal-top-level-add-to-load-path)
    (let* ((my-lisp-dir "~/.emacs.d/site-lisp/")
           (default-directory my-lisp-dir))
      (progn
        (setq load-path
              (append
               (loop for dir in (directory-files my-lisp-dir)
                     unless (string-match "^\\." dir)
                     collecting (expand-file-name dir))
               load-path)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
You can create a sub-directory under &lt;code&gt;~/.emacs.d/site-lisp/&lt;/code&gt; and place your package's source code inside that sub-directory.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h3 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Technique 2, Create your own package repository&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Step 1, Place two files "archive-contents" and "hello-1.0.0.el" in any directory. Say &lt;code&gt;~/.emacs.d/localelpa&lt;/code&gt;. 
&lt;/p&gt;
&lt;p&gt;
Content of &lt;code&gt;archive-contents&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(1
 (hello . [(1 0 0) nil "Say hello" single])
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Content of &lt;code&gt;hello-1.0.0.el&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;;;###autoload
(defun hello-say ()
  (interactive)
  (message "Hi, hello!"))

(provide 'hello)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 2, insert below code into ~/.emacs,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(add-to-list 'package-archives '("localelpa" . "~/.emacs.d/localelpa"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Step 3, restart Emacs and press &lt;code&gt;M-x list-packages&lt;/code&gt;. As you can see, you can install package hello from repository &lt;code&gt;~/.emacs.d/localelpa&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
I'm using rainbow-mode from ELPA(&lt;a href="https://elpa.gnu.org/"&gt;https://elpa.gnu.org/&lt;/a&gt;). But ELPA which shuts down sometimes. With above technique, my setup is never dependent on the reliability of GNU's website.
&lt;/p&gt;

&lt;p&gt;
I also create plugin &lt;a href="https://github.com/redguardtoo/elpa-mirror"&gt;elpa-mirror&lt;/a&gt; which creates a local repository from all the installed packages. The local repository could also be converted to remote repository easily using &lt;a href="http://www.google.com.au/aclk?sa=l&amp;amp;ai=CzC-wxBR1V4TDLY-Q8AXB6JZYzpSQtgfG2tG-uAGEsbgLCAAQAWCl-JGAkAGgAY-k7twDyAEBqgQiT9A1G2VwLIfGToKkVCdOvyWNgzhcfW06fVwewFDtt2ESpYAHvuz4NZAHA6gHpr4b2AcB&amp;amp;sig=AOD64_0dA0XCyoO-dl0N6XK3n7knfXL5hA&amp;amp;clui=0&amp;amp;ved=0ahUKEwj-sJmh5M_NAhVEoZQKHVclCJ8Q0QwIEg&amp;amp;adurl=https://www.dropbox.com/business/landing-t61fl?_tk=sem_b_goog&amp;amp;_camp=sem-b-goog-au-nz-eng-top-exact&amp;amp;_kw=dropbox%7Ce&amp;amp;_ad=49525704222%7C1t1%7Cc"&gt;Dropbox&lt;/a&gt; and &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It also &lt;b&gt;solve the issue of orphan package&lt;/b&gt;. In order to get a clean setup without orphan packages, you only need delete everything from &lt;code&gt;~/.emacs.d/elpa&lt;/code&gt; and set the repository to the local one build by elpa-mirror. It takes 30 seconds to install 300 packages.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h3 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Technique 3, &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html"&gt;advice&lt;/a&gt; &lt;code&gt;package--add-to-archive-contents&lt;/code&gt; to filter packages&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Insert below code into ~/.emacs,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; List of VISIBLE packages from melpa-unstable (http://melpa.org)
;; Feel free to add more packages!
(defvar melpa-include-packages
  '(bbdb
    color-theme
    company-c-headers)
  "Don't install any mELPA packages except these packages")

(defvar package-filter-function nil
  "Optional predicate function used to internally filter packages used by package.el.

The function is called with the arguments PACKAGE VERSION ARCHIVE, where
PACKAGE is a symbol, VERSION is a vector as produced by `version-to-list', and
ARCHIVE is the string name of the package archive.")

;; Don't take MELPA versions of certain packages
(setq package-filter-function
      (lambda (package version archive)
        (or (not (string-equal archive "melpa"))
            ;; install package in whitelist
            (memq package melpa-include-packages)
            ;; use all color themes
            (string-match (format "%s" package) "-theme"))))

(defadvice package--add-to-archive-contents
  (around filter-packages (package archive) activate)
  "Add filtering of available packages using `package-filter-function', if non-nil."
  (when (or (null package-filter-function)
      (funcall package-filter-function
         (car package)
         (funcall (if (fboundp 'package-desc-version)
          'package--ac-desc-version
        'package-desc-vers)
            (cdr package))
         archive))
    ad-do-it))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Above code hide the packages which don't meet our criteria.
&lt;/p&gt;

&lt;p&gt;
The criteria is just a simple boolean expression defined in package-filter-function.
&lt;/p&gt;

&lt;p&gt;
We install packages if it's NOT from &lt;a href="https://melpa.org"&gt;melpa-unstable&lt;/a&gt; OR it's listed in &lt;code&gt;melpa-include-packages&lt;/code&gt; OR its name contains "-theme" (it's color theme package).
&lt;/p&gt;

&lt;p&gt;
Feel free to use any boolean expression to filter packages.
&lt;/p&gt;

&lt;p&gt;
The initial version of above code was copied Steve Purcell's setup years ago.
&lt;/p&gt;

&lt;p&gt;
I developed my own strategy based on his code. The first thing I did is reverse his logic. In his code melpa-unstable take &lt;b&gt;the highest priority&lt;/b&gt; while in my code melpa-unstable takes &lt;b&gt;the lowest&lt;/b&gt; priority.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h3 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Summary&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
You can combine my techniques to &lt;b&gt;solve any package problem&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
For example, package A is dependent on package B. Both A and B have two versions, 1.0 and 2.0:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;A 2.0 can use B 1.0 and B 2.0, but A 1.0 can ONLY use B 1.0
&lt;/li&gt;
&lt;li&gt;A 2.0 can ONLY use B 2.0, and A 1.0 can only use B 1.0
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The solution is simple. We create a local repository to host B 1.0 and A 1.0 (Technique 2), then in &lt;code&gt;package-filter-function&lt;/code&gt; (Technique 3), we will decide which version of to use the with information collected from B. As I said, &lt;code&gt;package-filter-function&lt;/code&gt; only returns a boolean expression. So you can design any strategy.
&lt;/p&gt;

&lt;p&gt;
I know somebody believed &lt;b&gt;Emacs is worse than IDE because its package manager&lt;/b&gt; after "studying" it for seven years.
&lt;/p&gt;

&lt;p&gt;
It took me fifteen minutes to reach the opposite conclusion when I was still absolute Emacs dummy.
&lt;/p&gt;

&lt;p&gt;
It's possibly I learned the Emacs by cloning and reading code. You can read my guide "&lt;a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide"&gt;Master Emacs In One Year&lt;/a&gt;" for more details.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>package</category><guid>http://blog.binchen.org/posts/how-to-manage-emacs-packages-effectively.html</guid><pubDate>Thu, 30 Jun 2016 11:09:42 GMT</pubDate></item><item><title>Find which package contains a file</title><link>http://blog.binchen.org/posts/find-which-package-contains-a-file.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;pre class="prettyprint "&gt;

&lt;p&gt;dpkg --search /usr/bin/amidi # debian/ubuntu, local search&lt;/p&gt;
&lt;p&gt;apt-file update;apt-file search amidi # debian/ubuntu, remote seach. You need install apt-file at first.&lt;/p&gt;
&lt;p&gt;equery b -e amidi # gentoo, remote/local search. You need install gentoolkits at first&lt;/p&gt;
&lt;p&gt;pacman -Qo admidi # archlinux, local search&lt;/p&gt;
&lt;p&gt;pkgfile amidi # archlinux, You need install pkgfile
&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>en</category><category>file</category><category>find</category><category>linux</category><category>package</category><guid>http://blog.binchen.org/posts/find-which-package-contains-a-file.html</guid><pubDate>Mon, 29 Jul 2013 12:51:00 GMT</pubDate></item><item><title>Find files provided by the installed package</title><link>http://blog.binchen.org/posts/find-files-provided-by-the-installed-package.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;pre class="src src-sh"&gt;dpkg -L emacs &lt;span style="color: #5F7F5F;"&gt;# &lt;/span&gt;&lt;span style="color: #7F9F7F;"&gt;Debian/Ubuntu&lt;/span&gt;
pacman -Ql emacs &lt;span style="color: #5F7F5F;"&gt;# &lt;/span&gt;&lt;span style="color: #7F9F7F;"&gt;ArchLinux&lt;/span&gt;
&lt;p&gt;rpm -qlp emacs &lt;span style="color: #5F7F5F;"&gt;# &lt;/span&gt;&lt;span style="color: #7F9F7F;"&gt;Redhat/Centos&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;cygcheck -l emacs &lt;span style="color: #5F7F5F;"&gt;# &lt;/span&gt;&lt;span style="color: #7F9F7F;"&gt;Cygwin&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;brew ls --verbose emacs &lt;span style="color: #5F7F5F;"&gt;# &lt;/span&gt;&lt;span style="color: #7F9F7F;"&gt;Homebrew&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;equery f emacs &lt;span style="color: #5F7F5F;"&gt;# &lt;/span&gt;&lt;span style="color: #7F9F7F;"&gt;Gentoo Linux, you need install gentoolkit&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;gem contents zurb-foundation &lt;span style="color: #5F7F5F;"&gt;# &lt;/span&gt;&lt;span style="color: #7F9F7F;"&gt;Ruby gem&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;  &lt;/div&gt;</description><category>en</category><category>linux</category><category>manager</category><category>package</category><guid>http://blog.binchen.org/posts/find-files-provided-by-the-installed-package.html</guid><pubDate>Mon, 18 Feb 2013 14:34:00 GMT</pubDate></item></channel></rss>