<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (ruby)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/ruby.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Fri, 12 Aug 2016 06:53:01 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>针对Ruby on Rails开发的Emacs插件</title><link>http://blog.binchen.org/posts/zhen-dui-ruby-on-rails-kai-fa-de-emacs-cha-jian.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我主要用两个插件&lt;a href="http://rinari.rubyforge.org/"&gt;rinari&lt;/a&gt;和&lt;a href="http://www.emacswiki.org/emacs/yari.el"&gt;yari&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; rinari支持在rails项目中多个文件快速跳转,另外它提供的grep工具我发觉也很有用.快捷键很容易记. &lt;/p&gt; &lt;p&gt; yari对ruby自带的ri工具提供一个emacs界面,优点是兼容最新的ruby,操作简单,只要使用一个函数yari-anything即可.但是其官方文档推荐的yari-anything的快捷键F1在有些远程terminal下有问题.我改成了&lt;code&gt;C-c ; r&lt;/code&gt;. &lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>rails</category><category>ruby</category><category>zh</category><guid>http://blog.binchen.org/posts/zhen-dui-ruby-on-rails-kai-fa-de-emacs-cha-jian.html</guid><pubDate>Mon, 28 May 2012 12:19:18 GMT</pubDate></item><item><title>松本行弘(Ruby发明者):Emacs怎样改变了我的人生</title><link>http://blog.binchen.org/posts/emacs-zen-yang-gai-bian-le-wo-de-ren-shen.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;原文(英文版本)见&lt;a href="http://www.slideshare.net/yukihiro_matz/how-emacs-changed-my-life"&gt;这里&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; 以下是我的翻译兼一些技术方面的背景资料: &lt;/p&gt; &lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;1980年,我开始编程.&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;Basic,400 steps (此句不知如何翻译)&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3" class="outline-3"&gt; &lt;h4 id="sec-3"&gt;1988年,我遇到了Emacs,在学校的Sun-3上,和200多个学生共用.&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-4" class="outline-3"&gt; &lt;h4 id="sec-4"&gt;Emacs实际上是被禁止使用的,因为消耗太多内存.所以我只是尝试了一下了.&lt;/h4&gt; &lt;div class="outline-text-3" id="text-4"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5" class="outline-3"&gt; &lt;h4 id="sec-5"&gt;我可以自由下载Emacs并阅读其源代码.&lt;/h4&gt; &lt;div class="outline-text-3" id="text-5"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-6" class="outline-3"&gt; &lt;h4 id="sec-6"&gt;Emacs是我的第一个Lisp解释器.&lt;/h4&gt; &lt;div class="outline-text-3" id="text-6"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-7" class="outline-3"&gt; &lt;h4 id="sec-7"&gt;从Emacs我学到了很多关于语言实现的知识.&lt;/h4&gt; &lt;div class="outline-text-3" id="text-7"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-8" class="outline-3"&gt; &lt;h4 id="sec-8"&gt;例如,emacs的整数实现(Embedding integer in pointers)&lt;/h4&gt; &lt;div class="outline-text-3" id="text-8"&gt;  &lt;p&gt;参考Lisp&lt;sub&gt;Object定义&lt;/sub&gt;,在Emacs源代码的lisp.h中,Lisp&lt;sub&gt;Object是一个既可以作为指针使用又可以作为整数使用的类型&lt;/sub&gt; 具体代码见下,注意Lisp&lt;sub&gt;Int为0&lt;/sub&gt;,使得非负整数可以直接转换为对应的List&lt;sub&gt;Object类型&lt;/sub&gt;: &lt;/p&gt;   &lt;pre class="src src-c"&gt;&lt;span style="color: #c397d8;"&gt;#define&lt;/span&gt; &lt;span style="color: #e7c547;"&gt;VALBITS&lt;/span&gt; 29
&lt;span style="color: #c397d8;"&gt;#define&lt;/span&gt; &lt;span style="color: #e7c547;"&gt;GCTYPEBITS&lt;/span&gt; 3
&lt;p&gt;&lt;span style="color: #b9ca4a;"&gt;enum&lt;/span&gt; &lt;span style="color: #e78c45;"&gt;Lisp_Type&lt;/span&gt;
  {
    &lt;span style="color: #e7c547;"&gt;Lisp_Int&lt;/span&gt; = 0,&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/* &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Symbol.  XSYMBOL (object) points to a struct Lisp_Symbol.  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;*/&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e7c547;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lisp_Symbol&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; = 2,

&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/* &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Miscellaneous.  XMISC (object) points to a union Lisp_Misc,&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;span style="color: #969896; font-style: italic;"&gt;       whose first member indicates the subtype.  &lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;*/&lt;/span&gt;
    &lt;span style="color: #e7c547;"&gt;Lisp_Misc&lt;/span&gt; = 3,&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/* &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;String.  XSTRING (object) points to a struct Lisp_String.&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;span style="color: #969896; font-style: italic;"&gt;       The length of the string, and its contents, are stored therein.  &lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;*/&lt;/span&gt;
    &lt;span style="color: #e7c547;"&gt;Lisp_String&lt;/span&gt; = LISP_STRING_TAG,&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/* &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Vector of Lisp objects, or something resembling it.&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;span style="color: #969896; font-style: italic;"&gt;       XVECTOR (object) points to a struct Lisp_Vector, which contains&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #969896; font-style: italic;"&gt;       the size and contents.  The size field also contains the type&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #969896; font-style: italic;"&gt;       information, if it's not a real vector object.  &lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;*/&lt;/span&gt;
    &lt;span style="color: #e7c547;"&gt;Lisp_Vectorlike&lt;/span&gt; = 5,&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/* &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cons.  XCONS (object) points to a struct Lisp_Cons.  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #969896; font-style: italic;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;*/&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e7c547;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lisp_Cons&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; = 6,

&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e7c547;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lisp_Float&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; = 7,
&lt;/pre&gt;


&lt;p&gt;};&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #b9ca4a;"&gt;typedef&lt;/span&gt; &lt;span style="color: #b9ca4a;"&gt;union&lt;/span&gt; &lt;span style="color: #e78c45;"&gt;Lisp_Object&lt;/span&gt;
  {
    &lt;span style="color: #969896; font-style: italic;"&gt;/&lt;em&gt; &lt;/em&gt;&lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;Used for comparing two Lisp_Objects;&lt;/span&gt;
&lt;span style="color: #969896; font-style: italic;"&gt;       also, positive integers can be accessed fast this way.  &lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;/&lt;/span&gt;
    &lt;span style="color: #e78c45;"&gt;EMACS_UINT&lt;/span&gt; &lt;span style="color: #e7c547;"&gt;i&lt;/span&gt;;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #b9ca4a;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;struct&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e78c45;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;EMACS_INT&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e7c547;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;val&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;  : VALBITS;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #b9ca4a;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;enum&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e78c45;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lisp_Type&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e7c547;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; : GCTYPEBITS;
  } &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e7c547;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;s&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #b9ca4a;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;struct&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  {
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e78c45;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;EMACS_UINT&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e7c547;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;val&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; : VALBITS;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #b9ca4a;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;enum&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e78c45;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lisp_Type&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e7c547;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;type&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; : GCTYPEBITS;
  } &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: #e7c547;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;u&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;;
&lt;/pre&gt;


&lt;p&gt;}
&lt;span style="color: #e78c45;"&gt;Lisp_OLisp_Stringbject&lt;/span&gt;;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-9" class="outline-3"&gt; &lt;h4 id="sec-9"&gt;又例如Emacs的内存自动回收机制(Mark and sweep garbage collection)&lt;/h4&gt; &lt;div class="outline-text-3" id="text-9"&gt;  &lt;p&gt;具体细节参考&lt;a href="http://lists.gnu.org/archive/html/emacs-devel/2011-10/msg01289.html"&gt;这里&lt;/a&gt;的讨论. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-10" class="outline-3"&gt; &lt;h4 id="sec-10"&gt;C和Lisp的Calling conventions(不好翻,基本上就是函数如何调用,函数参数的内存模型之类…)&lt;/h4&gt; &lt;div class="outline-text-3" id="text-10"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-11" class="outline-3"&gt; &lt;h4 id="sec-11"&gt;我完全理解Lisp怎么工作的&lt;/h4&gt; &lt;div class="outline-text-3" id="text-11"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-12" class="outline-3"&gt; &lt;h4 id="sec-12"&gt;我被Lisp Objects迷住了&lt;/h4&gt; &lt;div class="outline-text-3" id="text-12"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-13" class="outline-3"&gt; &lt;h4 id="sec-13"&gt;当我得到Sparc工作站时我开始使用Emacs&lt;/h4&gt; &lt;div class="outline-text-3" id="text-13"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-14" class="outline-3"&gt; &lt;h4 id="sec-14"&gt;我完全被迷住了,Emacs成为我的一部分&lt;/h4&gt; &lt;div class="outline-text-3" id="text-14"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-15" class="outline-3"&gt; &lt;h4 id="sec-15"&gt;而且Emacs任何我不喜欢的部分我都可以改,Emacs完全可配置.&lt;/h4&gt; &lt;div class="outline-text-3" id="text-15"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-16" class="outline-3"&gt; &lt;h4 id="sec-16"&gt;Emacs使我明白了任何东西都可以被程序员改变&lt;/h4&gt; &lt;div class="outline-text-3" id="text-16"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-17" class="outline-3"&gt; &lt;h4 id="sec-17"&gt;完全的自由&lt;/h4&gt; &lt;div class="outline-text-3" id="text-17"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-18" class="outline-3"&gt; &lt;h4 id="sec-18"&gt;编辑时可以无视键位设置&lt;/h4&gt; &lt;div class="outline-text-3" id="text-18"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-19" class="outline-3"&gt; &lt;h4 id="sec-19"&gt;我想用Emacs做所有的事,编程,文档,邮件…&lt;/h4&gt; &lt;div class="outline-text-3" id="text-19"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-20" class="outline-3"&gt; &lt;h4 id="sec-20"&gt;所以我写了"cmail",我的第一个严肃的Lisp程序,我每天用它&lt;/h4&gt; &lt;div class="outline-text-3" id="text-20"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-21" class="outline-3"&gt; &lt;h4 id="sec-21"&gt;1993年,我开始搞我的Ruby&lt;/h4&gt; &lt;div class="outline-text-3" id="text-21"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-22" class="outline-3"&gt; &lt;h4 id="sec-22"&gt;Ruby的设计受到Emacs实现的影响,例如整数和tagged pointer合用,相似的GC,和Lisp类似的Object Model&lt;/h4&gt; &lt;div class="outline-text-3" id="text-22"&gt;  &lt;p&gt;tagged pointer的细节请参考上文的C代码,高地址的3bit用作判别数据类型,低地址的29bit用作指针或者整数(取决于数据类型) &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-23" class="outline-3"&gt; &lt;h4 id="sec-23"&gt;接下来我把Smalltalk的OO系统加上去&lt;/h4&gt; &lt;div class="outline-text-3" id="text-23"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-24" class="outline-3"&gt; &lt;h4 id="sec-24"&gt;语法我用Algol/Ada/Eiffel&lt;/h4&gt; &lt;div class="outline-text-3" id="text-24"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-25" class="outline-3"&gt; &lt;h4 id="sec-25"&gt;但是我是Emacs狂,所以在Emacs中支持auto-indent是必须的&lt;/h4&gt; &lt;div class="outline-text-3" id="text-25"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-26" class="outline-3"&gt; &lt;h4 id="sec-26"&gt;在1993年,类似的语法要支持auto-indent很难&lt;/h4&gt; &lt;div class="outline-text-3" id="text-26"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-27" class="outline-3"&gt; &lt;h4 id="sec-27"&gt;所以我就写了自己的ruby-mode.el,试图用elisp和正则表达式(regex)解决这个问题.&lt;/h4&gt; &lt;div class="outline-text-3" id="text-27"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-28" class="outline-3"&gt; &lt;h4 id="sec-28"&gt;一个礼拜后,我在给Ruby加上end关键字后终于成功了&lt;/h4&gt; &lt;div class="outline-text-3" id="text-28"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-29" class="outline-3"&gt; &lt;h4 id="sec-29"&gt;如果我不能让我的emacs下的ruby-mode成功,那么Ruby的语法会更像C&lt;/h4&gt; &lt;div class="outline-text-3" id="text-29"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-30" class="outline-3"&gt; &lt;h4 id="sec-30"&gt;这样就和其他脚本语言差不多,Ruby也不会那么受欢迎&lt;/h4&gt; &lt;div class="outline-text-3" id="text-30"&gt;  &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-31" class="outline-3"&gt; &lt;h4 id="sec-31"&gt;小结&lt;/h4&gt; &lt;div class="outline-text-3" id="text-31"&gt;  &lt;ul&gt; &lt;li&gt;Emacs教我什么是软件自由(freedom for software) &lt;/li&gt; &lt;li&gt;Emacs教我如何读代码 &lt;/li&gt; &lt;li&gt;Emacs让我认识到Lisp的威力 &lt;/li&gt; &lt;li&gt;Emacs教我如何实现语言核心 &lt;/li&gt; &lt;li&gt;Emacs教我如何进行内存自动回收(Garbage Collector) &lt;/li&gt; &lt;li&gt;Emacs有助于我写代码和调试 &lt;/li&gt; &lt;li&gt;我用Emacs写j文档邮件 &lt;/li&gt; &lt;li&gt;Emacs让我成为高效程序员 &lt;/li&gt; &lt;li&gt;Emacs让我成为黑客 &lt;/li&gt; &lt;li&gt;Emacs永远改变了我的人生 &lt;/li&gt; &lt;/ul&gt;  &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</description><category>emacs</category><category>ruby</category><category>zh</category><guid>http://blog.binchen.org/posts/emacs-zen-yang-gai-bian-le-wo-de-ren-shen.html</guid><pubDate>Tue, 27 Mar 2012 15:11:00 GMT</pubDate></item></channel></rss>