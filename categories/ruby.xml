<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (Posts about ruby)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/ruby.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 09 Aug 2018 14:47:50 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>针对Ruby on Rails开发的Emacs插件</title><link>http://blog.binchen.org/posts/zhen-dui-ruby-on-rails-kai-fa-de-emacs-cha-jian.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;我主要用两个插件&lt;a href="http://rinari.rubyforge.org/"&gt;rinari&lt;/a&gt;和&lt;a href="http://www.emacswiki.org/emacs/yari.el"&gt;yari&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; rinari支持在rails项目中多个文件快速跳转,另外它提供的grep工具我发觉也很有用.快捷键很容易记. &lt;/p&gt; &lt;p&gt; yari对ruby自带的ri工具提供一个emacs界面,优点是兼容最新的ruby,操作简单,只要使用一个函数yari-anything即可.但是其官方文档推荐的yari-anything的快捷键F1在有些远程terminal下有问题.我改成了&lt;code&gt;C-c ; r&lt;/code&gt;. &lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>rails</category><category>ruby</category><category>zh</category><guid>http://blog.binchen.org/posts/zhen-dui-ruby-on-rails-kai-fa-de-emacs-cha-jian.html</guid><pubDate>Mon, 28 May 2012 12:19:18 GMT</pubDate></item><item><title>松本行弘(Ruby发明者):Emacs怎样改变了我的人生</title><link>http://blog.binchen.org/posts/emacs-zen-yang-gai-bian-le-wo-de-ren-shen.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
:zh:emacs:ruby:
&lt;/p&gt;

&lt;p&gt;
原文(英文版本)见&lt;a href="http://www.slideshare.net/yukihiro_matz/how-emacs-changed-my-life"&gt;这里&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
以下是我的翻译兼一些背景资料:
&lt;/p&gt;

&lt;div id="outline-container-org260d249" class="outline-2"&gt;
&lt;h3 id="org260d249"&gt;1980年,我开始编程.&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7cdb189" class="outline-2"&gt;
&lt;h3 id="org7cdb189"&gt;Basic,400 steps (此句不知如何翻译)&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf5810ce" class="outline-2"&gt;
&lt;h3 id="orgf5810ce"&gt;1988年,我遇到了Emacs,在学校的Sun-3上,和200多个学生共用.&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6cd4f64" class="outline-2"&gt;
&lt;h3 id="org6cd4f64"&gt;Emacs实际上是被禁止使用的,因为消耗太多内存.所以我只是尝试了一下.&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6f56100" class="outline-2"&gt;
&lt;h3 id="org6f56100"&gt;我可以自由下载Emacs并阅读其源代码.&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org36bf7f3" class="outline-2"&gt;
&lt;h3 id="org36bf7f3"&gt;Emacs是我的第一个Lisp解释器.&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org32034d9" class="outline-2"&gt;
&lt;h3 id="org32034d9"&gt;从Emacs我学到了很多关于语言实现的知识.&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgd2e43da" class="outline-2"&gt;
&lt;h3 id="orgd2e43da"&gt;例如,emacs的整数实现(Embedding integer in pointers)&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgd2e43da"&gt;
&lt;p&gt;
参考Lisp_Object定义,在Emacs源代码的lisp.h中,Lisp_Object是一个既可以作为指针使用又可以作为整数使用的类型
具体代码见下,注意Lisp_Int为0,使得非负整数可以直接转换为对应的List_Object类型:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-c"&gt;#define VALBITS 29
#define GCTYPEBITS 3
enum Lisp_Type
  {
    Lisp_Int = 0,

    /* Symbol.  XSYMBOL (object) points to a struct Lisp_Symbol.  */
    Lisp_Symbol = 2,

    /* Miscellaneous.  XMISC (object) points to a union Lisp_Misc,
       whose first member indicates the subtype.  */
    Lisp_Misc = 3,

    /* String.  XSTRING (object) points to a struct Lisp_String.
       The length of the string, and its contents, are stored therein.  */
    Lisp_String = LISP_STRING_TAG,

    /* Vector of Lisp objects, or something resembling it.
       XVECTOR (object) points to a struct Lisp_Vector, which contains
       the size and contents.  The size field also contains the type
       information, if it's not a real vector object.  */
    Lisp_Vectorlike = 5,

    /* Cons.  XCONS (object) points to a struct Lisp_Cons.  */
    Lisp_Cons = 6,

    Lisp_Float = 7,
  };

typedef union Lisp_Object
  {
    /* Used for comparing two Lisp_Objects;
       also, positive integers can be accessed fast this way.  */
    EMACS_UINT i;

    struct
      {
    EMACS_INT val  : VALBITS;
    enum Lisp_Type type : GCTYPEBITS;
      } s;
    struct
      {
    EMACS_UINT val : VALBITS;
    enum Lisp_Type type : GCTYPEBITS;
      } u;
  }
Lisp_OLisp_Stringbject;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org157ec2e" class="outline-2"&gt;
&lt;h3 id="org157ec2e"&gt;又例如Emacs的内存自动回收机制(Mark and sweep garbage collection)&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org157ec2e"&gt;
&lt;p&gt;
具体细节参考&lt;a href="http://lists.gnu.org/archive/html/emacs-devel/2011-10/msg01289.html"&gt;这里&lt;/a&gt;的讨论.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org195bf31" class="outline-2"&gt;
&lt;h3 id="org195bf31"&gt;C和Lisp的Calling conventions(不好翻,基本上就是函数如何调用,函数参数的内存模型之类…)&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga1d8e7f" class="outline-2"&gt;
&lt;h3 id="orga1d8e7f"&gt;我完全理解Lisp怎么工作的&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org94bb82a" class="outline-2"&gt;
&lt;h3 id="org94bb82a"&gt;我被Lisp Objects迷住了&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga2bf6a4" class="outline-2"&gt;
&lt;h3 id="orga2bf6a4"&gt;当我得到Sparc工作站时我开始使用Emacs&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3b8b7fc" class="outline-2"&gt;
&lt;h3 id="org3b8b7fc"&gt;我完全被迷住了,Emacs成为我的一部分&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org40295a2" class="outline-2"&gt;
&lt;h3 id="org40295a2"&gt;而且Emacs任何我不喜欢的部分我都可以改,Emacs完全可配置.&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4b9ac24" class="outline-2"&gt;
&lt;h3 id="org4b9ac24"&gt;Emacs使我明白了任何东西都可以被程序员改变&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6d38712" class="outline-2"&gt;
&lt;h3 id="org6d38712"&gt;完全的自由&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgffd668c" class="outline-2"&gt;
&lt;h3 id="orgffd668c"&gt;编辑时可以无视键位设置&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc184c5c" class="outline-2"&gt;
&lt;h3 id="orgc184c5c"&gt;我想用Emacs做所有的事,编程,文档,邮件…&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgac12b16" class="outline-2"&gt;
&lt;h3 id="orgac12b16"&gt;所以我写了"cmail",我的第一个严肃的Lisp程序,我每天用它&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org416e0ba" class="outline-2"&gt;
&lt;h3 id="org416e0ba"&gt;1993年,我开始搞我的Ruby&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org480acb1" class="outline-2"&gt;
&lt;h3 id="org480acb1"&gt;Ruby的设计受到Emacs实现的影响,例如整数和tagged pointer合用,相似的GC,和Lisp类似的Object Model&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org480acb1"&gt;
&lt;p&gt;
tagged pointer的细节请参考上文的C代码,高地址的3bit用作判别数据类型,低地址的29bit用作指针或者整数(取决于数据类型)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb18bbc4" class="outline-2"&gt;
&lt;h3 id="orgb18bbc4"&gt;接下来我把Smalltalk的OO系统加上去&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org546ed43" class="outline-2"&gt;
&lt;h3 id="org546ed43"&gt;语法我用Algol/Ada/Eiffel&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc918232" class="outline-2"&gt;
&lt;h3 id="orgc918232"&gt;但是我是Emacs狂,所以在Emacs中支持auto-indent是必须的&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0c8120b" class="outline-2"&gt;
&lt;h3 id="org0c8120b"&gt;在1993年,类似的语法要支持auto-indent很难&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org650738a" class="outline-2"&gt;
&lt;h3 id="org650738a"&gt;所以我就写了自己的ruby-mode.el,试图用elisp和正则表达式(regex)解决这个问题.&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org353301d" class="outline-2"&gt;
&lt;h3 id="org353301d"&gt;一个礼拜后,我在给Ruby加上end关键字后终于成功了&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0955de4" class="outline-2"&gt;
&lt;h3 id="org0955de4"&gt;如果我不能让我的emacs下的ruby-mode成功,那么Ruby的语法会更像C&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-org34547d8" class="outline-2"&gt;
&lt;h3 id="org34547d8"&gt;这样就和其他脚本语言差不多,Ruby也不会那么受欢迎&lt;/h3&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb165aca" class="outline-2"&gt;
&lt;h3 id="orgb165aca"&gt;小结&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgb165aca"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Emacs教我什么是软件自由(freedom for software)&lt;/li&gt;
&lt;li&gt;Emacs教我如何读代码&lt;/li&gt;
&lt;li&gt;Emacs让我认识到Lisp的威力&lt;/li&gt;
&lt;li&gt;Emacs教我如何实现语言核心&lt;/li&gt;
&lt;li&gt;Emacs教我如何进行内存自动回收(Garbage Collector)&lt;/li&gt;
&lt;li&gt;Emacs有助于我写代码和调试&lt;/li&gt;
&lt;li&gt;我用Emacs写j文档邮件&lt;/li&gt;
&lt;li&gt;Emacs让我成为高效程序员&lt;/li&gt;
&lt;li&gt;Emacs让我成为黑客&lt;/li&gt;
&lt;li&gt;Emacs永远改变了我的人生&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>ruby</category><category>zh</category><guid>http://blog.binchen.org/posts/emacs-zen-yang-gai-bian-le-wo-de-ren-shen.html</guid><pubDate>Tue, 27 Mar 2012 18:11:00 GMT</pubDate></item></channel></rss>