<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (percol)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/percol.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 07 Dec 2014 23:12:03 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The power of git command line interface</title><link>http://blog.binchen.org/posts/the-power-of-git-command-line-interface-4.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Examples about how to use git CLI. NO gui front end needed. &lt;/p&gt; &lt;p&gt; You need install beautiful &lt;a href="https://github.com/mooz/percol"&gt;percol&lt;/a&gt; developed by mooz by run &lt;code&gt;pip installl percol&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; percol "adds flavor of interactive filtering to the traditional pipe concept of UNIX shell". &lt;/p&gt; &lt;p&gt; Append below code into ~/.bashrc and run "source ~/.bashrc": &lt;/p&gt; &lt;br&gt;
&lt;pre class="prettyprint "&gt;
&lt;p&gt;function gurl () {
    if [ -z "$1" ]; then
        echo "Usage: gurl commit-id"
        echo "get the full http url of commit"
    else
        local msg=&lt;code&gt;git remote -v|grep "origin\s\+.*\s\+(fetch)"|sed -e "s/origin\s\+\(.*\)\s\+(fetch)/\1/"&lt;/code&gt;
        local url=""
      # github
        if [ "${msg:0:14}" == "git@github.com" ]; then
            echo https://github.com/&lt;code&gt;echo ${msg}|sed -e "s/^git\@github\.com\:\(.*\)\.git$/\1/"&lt;/code&gt;/commit/$1
        fi
    fi
}&lt;/p&gt;
&lt;h2&gt;pick commit id from &lt;code&gt;git log&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;function gcid () {
    local commit_id=&lt;code&gt;git log --pretty=format:'%h %ad %s (%an)' --date=short|percol|sed -e"s/^\([a-z0-9]\+\)\s\+.*$/\1/"&lt;/code&gt;
    echo ${commit_id}
}&lt;/p&gt;
&lt;h2&gt;pick commit from &lt;code&gt;git log&lt;/code&gt; and output its url&lt;/h2&gt;
&lt;p&gt;function gqurl () {
    local commit_id=&lt;code&gt;git log --pretty=format:'%h %ad %s (%an)' --date=short|percol|sed -e"s/^\([a-z0-9]\+\)\s\+.*$/\1/"&lt;/code&gt;
    gurl ${commit_id}
}&lt;/p&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Now you have three bash fuctions "gurl", "gcid", "gqurl". &lt;/p&gt; &lt;p&gt; Here is demo how to use "gcid": &lt;img src="https://dl.dropboxusercontent.com/u/858862/git-percol-001.gif" alt="https://dl.dropboxusercontent.com/u/858862/git-percol-001.gif"&gt; &lt;/p&gt; &lt;p&gt; Here is demo of "gqurl": &lt;img src="https://dl.dropboxusercontent.com/u/858862/git-percol-002.gif" alt="https://dl.dropboxusercontent.com/u/858862/git-percol-002.gif"&gt; &lt;/p&gt; &lt;p&gt; BTW, I use CLI clipboard tool like xsel. For example, "echo hello|xsel -ib" which insert string "hello" into system clipboard. &lt;/p&gt; &lt;p&gt; so I can "git show &lt;code&gt;gcid&lt;/code&gt;|xsel -ib" to copy/paste the code of specific commit between terminal and firefox. &lt;/p&gt; &lt;p&gt; In summary, the only limit of taking advantage of git's raw power is your imagination. &lt;/p&gt;&lt;/div&gt;</description><category>bash</category><category>en</category><category>git</category><category>linux</category><category>percol</category><guid>http://blog.binchen.org/posts/the-power-of-git-command-line-interface-4.html</guid><pubDate>Thu, 01 Aug 2013 13:17:00 GMT</pubDate></item></channel></rss>