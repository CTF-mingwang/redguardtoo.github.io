<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (emacs)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/emacs.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Fri, 27 Feb 2015 16:57:36 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Why people say "Emacs is the best operating system"</title><link>http://blog.binchen.org/posts/why-people-say-emacs-is-the-best-operating-system.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
It's becasue Emacs has great documentation and enough APIs.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h3 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Documentation&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Its quality is the best.
&lt;/p&gt;

&lt;p&gt;
It helps me even on non-Emacs stuff.
&lt;/p&gt;

&lt;p&gt;
When configuring the font for &lt;a href="http://gnometerminator.blogspot.com/p/introduction.html"&gt;Terminator&lt;/a&gt; (a terminal emulator) I found its manual is NOT clear. The manual didn't explain what is "Pango font name". After googling, I found the Emacs manual which explained it and also provided related toolchain.
&lt;/p&gt;

&lt;p&gt;
For example, "fc-list" is mentioned to list the installed fonts. Since terminal use Mono font, I can type below command:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-bash"&gt;
fc-list | grep Mono
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
The output is like:
&lt;/p&gt;

&lt;pre class="example"&gt;
/usr/share/fonts/urw-fonts/n022003l.pfb: Nimbus Mono L:style=Regular
/usr/share/fonts/urw-fonts/n022024l.pfb: Nimbus Mono L:style=Bold Oblique
/usr/share/fonts/liberation-fonts/LiberationMono-Regular.ttf: Liberation Mono:style=Regular
/usr/share/fonts/urw-fonts/n022004l.pfb: Nimbus Mono L:style=Bold
/usr/share/fonts/liberation-fonts/LiberationMono-BoldItalic.ttf: Liberation Mono:style=Bold Italic
/usr/share/fonts/liberation-fonts/LiberationMono-Bold.ttf: Liberation Mono:style=Bold
/usr/share/fonts/wqy-zenhei/wqy-zenhei.ttc: 文泉驿等宽正黑,文泉驛等寬正黑,WenQuanYi Zen Hei Mono:style=Medium,中等
/usr/share/fonts/liberation-fonts/LiberationMono-Italic.ttf: Liberation Mono:style=Italic
/usr/share/fonts/urw-fonts/n022023l.pfb: Nimbus Mono L:style=Regular Oblique
&lt;/pre&gt;

&lt;p&gt;
Since Emacs manual explains the meaning of output, I know the font name "WenQuanYi Zen Hei Mono" is the key component of "Pango font name"
&lt;/p&gt;

&lt;p&gt;
Because the manual also gives the details of other components of "Pango font name", the final "~/.config/terminator/config" is like:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-conf"&gt;
[profiles]
  [[default]]
  use_system_font = False
  # @see emacs manual for tools and explanation of font formats
  # https://www.gnu.org/software/emacs/manual/html_node/emacs/GTK-Resource-Basics.html
  # https://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html#Fonts
  font =  WenQuanYi Zen Hei Mono 16
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h3 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; API&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
I create a new Emacs plugin which lists file names containing Chinese characters. At beginning I use Emacs API "find-name-dired". It uses the GNU find as the backend. But there is some integration issue on Linux. Chinese file names are displayed as garbled text in Emacs. I guess there is some decode/encode error between the interaction of Emacs process and GNU find process because Chinese files are fine on OS X.
&lt;/p&gt;
&lt;p&gt;
Emacs has enough APIs for anything. After some research I found another pure Lisp version called "find-lisp-find-dired". So problem solved.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>font</category><category>linux</category><category>terminal</category><category>terminator</category><guid>http://blog.binchen.org/posts/why-people-say-emacs-is-the-best-operating-system.html</guid><pubDate>Sun, 01 Feb 2015 09:40:44 GMT</pubDate></item><item><title>What's the best spell check set up in emacs</title><link>http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
To save your time, I started from conclusion.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h3 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Suggestion for non-programmers&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Emacs will find the right dictionary by querying your locale.
&lt;/p&gt;

&lt;p&gt;
Run command "locale" in your shell to get current locale.
&lt;/p&gt;

&lt;p&gt;
If you want to force Emacs use dictionary "en_US", copy below code into your ~/.emacs:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-lisp"&gt;
;; find aspell and hunspell automatically
(cond
 ((executable-find "aspell")
  (setq ispell-program-name "aspell")
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")))
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")
  (setq ispell-extra-args '("-d en_US")))
 )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
That's it!
&lt;/p&gt;

&lt;p&gt;
Please run command "man aspell" or "man hunspell" in shell if you have more questions. I've nothing more to say.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h3 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Suggestion for programmers&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
I strongly recommend aspell instead of hunspell (Though hunspell is fine).
&lt;/p&gt;

&lt;p&gt;
Please insert below code into your ~/.emacs:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-lisp"&gt;
;; if (aspell installed) { use aspell}
;; else if (hunspell installed) { use hunspell }
;; whatever spell checker I use, I always use English dictionary
;; I prefer use aspell because:
;; 1. aspell is older
;; 2. looks Kevin Atkinson still get some road map for aspell:
;; @see http://lists.gnu.org/archive/html/aspell-announce/2011-09/msg00000.html
(defun flyspell-detect-ispell-args (&amp;amp;optional RUN-TOGETHER)
  "if RUN-TOGETHER is true, spell check the CamelCase words"
  (let (args)
    (cond
     ((string-match  "aspell$" ispell-program-name)
      ;; force the English dictionary, support Camel Case spelling check (tested with aspell 0.6)
      (setq args (list "--sug-mode=ultra" "--lang=en_US"))
      (if RUN-TOGETHER
          (setq args (append args '("--run-together" "--run-together-limit=5" "--run-together-min=2")))))
     ((string-match "hunspell$" ispell-program-name)
      (setq args nil)))
    args
    ))

(cond
 ((executable-find "aspell")
  (setq ispell-program-name "aspell"))
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")
  ;; just reset dictionary to the safe one "en_US" for hunspell.
  ;; if we need use different dictionary, we specify it in command line arguments
  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8))))
 (t (setq ispell-program-name nil)))

;; ispell-cmd-args is useless, it's the list of *extra* arguments we will append to the ispell process when "ispell-word" is called.
;; ispell-extra-args is the command arguments which will *always* be used when start ispell process
(setq ispell-extra-args (flyspell-detect-ispell-args t))
;; (setq ispell-cmd-args (flyspell-detect-ispell-args))
(defadvice ispell-word (around my-ispell-word activate)
  (let ((old-ispell-extra-args ispell-extra-args))
    (ispell-kill-ispell t)
    (setq ispell-extra-args (flyspell-detect-ispell-args))
    ad-do-it
    (setq ispell-extra-args old-ispell-extra-args)
    (ispell-kill-ispell t)
    ))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
That's it.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h3 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Why&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h4 id="sec-3-1"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; Aspell&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
apell is recommended because its option "–run-together". That option could spell check the camel case word. Variable name often uses camel case naming convention these days. Read my &lt;a href="http://blog.binchen.org/?p=950"&gt;Effective spell check in Emacs&lt;/a&gt; for advanced tips on how to use flyspell to check variable names.
&lt;/p&gt;

&lt;p&gt;
If Emacs start a aspell process with "–run-together" option, that process is not closed so it can be re-used by other commands.
&lt;/p&gt;

&lt;p&gt;
This behaviour will be a problem if you want to let Emacs/aspell correct the typo by running the command "ispell-word" because a apell process with "–run-together" will produce much noise.
&lt;/p&gt;

&lt;p&gt;
For example, for a typo "helle" Emacs will give you too many candidates. It's hard to find the desired word "hello":
&lt;img src="http://blog.binchen.org/wp-content/aspell-camelcase-suggest-nq8.png" alt="aspell-camelcase-suggest-nq8.png"&gt;
&lt;/p&gt;

&lt;p&gt;
The better solution is before running "M-x ispell-word", we'd better restart a aspell proces without the argument "–run-together".
&lt;/p&gt;

&lt;p&gt;
Here is the screen shot after we applying this fix:
&lt;img src="http://blog.binchen.org/wp-content/aspell-normal-suggest-nq8.png" alt="aspell-normal-suggest-nq8.png"&gt;
&lt;/p&gt;

&lt;p&gt;
As I mentioned, the global variable "ispell-extra-args" contains arguments Emacs will always append to a spell checker process (aspell or hunspell). That's the only variable you need care about.
&lt;/p&gt;

&lt;p&gt;
There is another variable named "ispell-cmd-args". It is actually some &lt;b&gt;extra&lt;/b&gt; arguments Emacs could send to an &lt;b&gt;existing&lt;/b&gt; spell checker process when you "M-x ispell-word". In my opinion, it's useless. I mention it because the naming are really confusing. "ispell-extra-args" is actually command line arguments the spell checker will always use. The "ispell-cmd-args" are actually the extra arguments will be used in certain cases.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h4 id="sec-3-2"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; Hunspell&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
I cannot find hunspell option to check camel case words. Please enlighten me if you know the option.
&lt;/p&gt;
&lt;p&gt;
Hunspell has some design flaw. It will always check the environment variable LC_ALL, LC_MESSAGES and LANG &lt;b&gt;at first&lt;/b&gt; to find the default dictionary unless you specify the dictionary in the command line. If it cannot find the default dictionary, the spell checker process won't start. Aspell does not have this issue, if it cannot find the zh_CN dictionary, it will fall back into English.
&lt;/p&gt;

&lt;p&gt;
Specify the ispell-extra-args &lt;b&gt;won't stop hunspell to search for the default dictionary&lt;/b&gt; at the beginning.
&lt;/p&gt;

&lt;p&gt;
For example, I am a Chinese and my locale is "zh_CN.utf-8". So hunspell will always search the dictionary zh_CN. Even I'm only interested in English spell checking.
&lt;/p&gt;

&lt;p&gt;
To specify the dictionary explicitly, I need hack the Emacs code which is kind of mess. Finally, I figure out. It's just several lines of elisp code:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;
(setq ispell-program-name "hunspell")
(setq ispell-local-dictionary "en_US")
(setq ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>aspell</category><category>check</category><category>emacs</category><category>en</category><category>hunspell</category><category>ispell</category><category>spell</category><guid>http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html</guid><pubDate>Mon, 21 Apr 2014 08:25:20 GMT</pubDate></item><item><title>popup function where your cursor is in</title><link>http://blog.binchen.org/posts/popup-function-your-cursor-is-in.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="http://www.emacswiki.org/emacs/WhichFuncMode"&gt;Which Func Mode&lt;/a&gt; will display the current function name in the mode line.
&lt;/p&gt;

&lt;p&gt;
But I can't use it.
&lt;/p&gt;

&lt;p&gt;
It's because I reduce my mode-line into minimum to make it work with my tiny netbook.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://emacsredux.com/blog/2014/04/05/which-function-mode/"&gt;Showing the function in header&lt;/a&gt; is also not possible because it conflicts with my color theme.
&lt;/p&gt;

&lt;p&gt;
So I choose to display the function name in a popup.
&lt;/p&gt;

&lt;p&gt;
Insert below code into ~/.emacs,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;
(autoload 'which-function "which-func")
(autoload 'popup-tip "popup")

(defun copy-yank-str (msg)
  (kill-new msg)
  (with-temp-buffer
    (insert msg)
    (shell-command-on-region (point-min) (point-max)
                             (cond
                              ((eq system-type 'cygwin) "putclip")
                              ((eq system-type 'darwin) "pbcopy")
                              (t "xsel -ib")
                              ))))

(defun popup-which-function ()
  (interactive)
  (let ((msg (which-function)))
    (popup-tip msg)
    (copy-yank-str msg)
    ))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
The extra bonus is "popup-which-function" will also insert the function name into clipboard and kill ring.
&lt;/p&gt;

&lt;p&gt;
The above code need package &lt;a href="https://github.com/auto-complete/popup-el"&gt;"popup.el"&lt;/a&gt; to be installed.
&lt;/p&gt;

&lt;p&gt;
Screen shot:
&lt;img src="http://blog.binchen.org/wp-content/pop-which-func-nq8.png" alt="pop-which-func-nq8.png"&gt;
#+image/pop-which-func-nq8.png &lt;img src="http://blog.binchen.org/wp-content/uploads/2014/04/wpid-pop-which-func-nq8.png" alt="wpid-pop-which-func-nq8.png"&gt;
&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><guid>http://blog.binchen.org/posts/popup-function-your-cursor-is-in.html</guid><pubDate>Tue, 08 Apr 2014 22:59:00 GMT</pubDate></item><item><title>paste string from clipboard into minibuffer in Emacs</title><link>http://blog.binchen.org/posts/paste-string-from-clipboard-into-minibuffer-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
First, I find "Alt-Y" is easier to press when paste string into minibuffer than old "Shift+Insert". "Ctrl-V" is not supported in some terminals.
&lt;/p&gt;

&lt;p&gt;
Second, intergrating some command line clipboard tool into Emacs is better than Emacs X clipboard. Command line tool works in any environment. For example, when you log into a remote server with ssh, your local computer could share clipboard with your Emacs in remote shell. Please note in this example, you need using X11 forward over ssh, usually it's already set up on server.
&lt;/p&gt;

&lt;p&gt;
Here is the code:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;
(defun paste-from-x-clipboard()
  (interactive)
  (shell-command
   (cond
    (*cygwin* "getclip")
    (*is-a-mac* "pbpaste")
    (t "xsel -ob")
    )
   1)
  )

(defun my/paste-in-minibuffer ()
  (local-set-key (kbd "M-y") 'paste-from-x-clipboard)
  )

(add-hook 'minibuffer-setup-hook 'my/paste-in-minibuffer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>bash</category><category>emacs</category><category>en</category><guid>http://blog.binchen.org/posts/paste-string-from-clipboard-into-minibuffer-in-emacs.html</guid><pubDate>Tue, 08 Apr 2014 22:17:00 GMT</pubDate></item><item><title>Upload emacs package to marmalade</title><link>http://blog.binchen.org/posts/upload-emacs-package-to-marmalade.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href="https://plus.google.com/+SebastianWiesner/posts"&gt;Sebastian Wiesner&lt;/a&gt; for providing a python script to upload package to &lt;a href="http://marmalade-repo.org/"&gt;http://marmalade-repo.org/&lt;/a&gt;. &lt;/p&gt;    
&lt;pre class="prettyprint "&gt;

sudo pip install requests keyring

curl -L https://raw.githubusercontent.com/lunaryorn/dotfiles/master/emacs/bin/marmalade-upload &amp;gt; ~/bin/marmalade-upload &amp;amp;&amp;amp; chmod +x ~/bin/marmalade-upload

~/bin/marmalade-upload -h # see help
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Please note if the same version already exists on server, I need delete it before uploading. &lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>marmalade</category><guid>http://blog.binchen.org/posts/upload-emacs-package-to-marmalade.html</guid><pubDate>Fri, 28 Mar 2014 07:26:01 GMT</pubDate></item><item><title>Use firefox in Emacs way</title><link>http://blog.binchen.org/posts/use-firefox-in-emacs-way-3.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2014-05-20 Tue&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2014-03-23 Sun&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
I use &lt;a href="https://github.com/mooz/keysnail/wiki"&gt;keysnail&lt;/a&gt;. it's a firefox addon to convert firefox into Emacs.
&lt;/p&gt;

&lt;p&gt;
I install keysnail's own plugins "HoK" and "Tanything".
&lt;/p&gt;

&lt;p&gt;
Here are the use cases of keysnail.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h3 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Click &amp;amp; Copy the links&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Install the &lt;a href="https://github.com/mooz/keysnail/wiki/plugin"&gt;HoK&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Insert below code into ~/.keysnail.js:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-lisp"&gt;
hook.setHook("PluginLoaded", function () {
    if (!plugins.hok) return;

    /* HoK 1.3.9+ required */
    plugins.hok.pOptions.selector = plugins.hok.pOptions.selector
    /* feedly */
    + ", *[data-uri]" + ", *[data-selector-toggle]" + ", *[data-page-action]" + ", *[data-app-action]"
    /* google plus */
    + ", *[guidedhelpid]"
    /* twitter */
    + ", *[data-item-count]";
});

key.setGlobalKey(["C-c","C-f"], function (aEvent, aArg) {
        ext.exec("hok-start-foreground-mode", aArg);
}, "Hok - Foreground hint mode", true);

key.setGlobalKey(["C-c","C-b"], function (aEvent, aArg) {
        ext.exec("hok-start-background-mode", aArg);
}, "HoK - Background hint mode", true);

key.setGlobalKey(["C-c","C-y"], function (aEvent, aArg) {
        ext.exec("hok-yank-foreground-mode", aArg);
}, "HoK - Background hint mode", true);

key.setGlobalKey(["C-c","C-;"], function (aEvent, aArg) {
        ext.exec("hok-start-extended-mode", aArg);
}, "HoK - Extented hint mode", true);

key.setGlobalKey(["C-c", "C-e"], function (aEvent, aArg) {
        ext.exec("hok-start-continuous-mode", aArg);
}, "Start continuous HaH", true);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Now I can press "Ctrl-C Ctrl-F" to select the links to click.
&lt;/p&gt;

&lt;p&gt;
The links will be highlighted as below screen shot:
&lt;img src="http://blog.binchen.org/wp-content/keysnail-hok-nq8.png" alt="keysnail-hok-nq8.png"&gt;
&lt;/p&gt;

&lt;p&gt;
I can press the highlighted hint to click the link.
&lt;/p&gt;

&lt;p&gt;
Copy the link into clipboard is also easy. I press "C-c C-y" and similar UI will be displayed. I press the hint above to finish the operation.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h3 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Copy the text of link&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
This is my most favorite tool. As a developer, I need copy text of links from bug tracking software and paste it into git commit message frequently.
&lt;/p&gt;

&lt;p&gt;
That's error prone because:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;The links are cluttered so it's hard to select the text of the link without actually clicking the link. 
&lt;/li&gt;
&lt;li&gt;The web UI of bug tracing system may use some CSS magic. Only part of the text of links are displayed. So it's impossible to select the text at all. For example, &lt;a href="https://www.atlassian.com/software/jira"&gt;JIRA&lt;/a&gt; will display file name of "Screenshot 03/05/2014-193024.png" as "Screenshot 03/05/2014…png".
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
If you use keysnail+HOK, it's as simple as press hot key "C-c ; Y". That's it!
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h3 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Switch tab&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Install the &lt;a href="https://github.com/mooz/keysnail/wiki/plugin"&gt;Tanything&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Insert below code into ~/.keysnail.js:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-lisp"&gt;
key.setGlobalKey(["C-c", "C-a"], function (ev, arg) {
  ext.exec("tanything", arg);
}, "view all tabs", true);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Press "Ctrl-C Ctrl-A", you got below UI:
&lt;img src="http://blog.binchen.org/wp-content/keysnail-tanything-nq8.png" alt="keysnail-tanything-nq8.png"&gt;
&lt;/p&gt;

&lt;p&gt;
Tanything will locate the tab by finding match in web page's title or URL.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h3 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; My keysnail set up&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
You can download my ~/.keysnail.js from &lt;a href="https://gist.githubusercontent.com/redguardtoo/003ac86d4c11b70b870a/raw/32356b071785248c0ff56d9c5896168263efefdd/.keysnail.js"&gt;HERE&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
#+image/keysnail-hok-nq8.png &lt;img src="http://blog.binchen.org/wp-content/uploads/2014/03/wpid-keysnail-hok-nq8.png" alt="wpid-keysnail-hok-nq8.png"&gt;
#+image/keysnail-tanything-nq8.png &lt;img src="http://blog.binchen.org/wp-content/uploads/2014/03/keysnail-tanything-nq8.png" alt="keysnail-tanything-nq8.png"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>firefox</category><category>keysnail</category><guid>http://blog.binchen.org/posts/use-firefox-in-emacs-way-3.html</guid><pubDate>Sun, 23 Mar 2014 20:03:00 GMT</pubDate></item><item><title>Debug Emacs Lisp code the hard way</title><link>http://blog.binchen.org/posts/debug-emacs-lisp-code-the-hard-way.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I &lt;a href="https://github.com/emacs-helm/helm/issues/448"&gt;met some issue&lt;/a&gt; when using helm several days ago. &lt;/p&gt; &lt;p&gt; With the help from Michael Heerdegen, I can locate the line error message is dumped. &lt;/p&gt; &lt;p&gt; But the problem is I cannot get the backtrace at all. &lt;/p&gt; &lt;p&gt; So I insert some &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Internals-of-Debugger.html"&gt;backtrace printing code&lt;/a&gt; above that line and "M-x eval-buffer": &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

(with-output-to-temp-buffer "backtrace-output"
  (let ((var 1))
    (save-excursion
      (setq var (eval '(progn
                         (1+ var)
                         (list 'testing (backtrace))))))))
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; It turns out that some third party package I installed changes the emacs variable "display-buffer-function". I guess that's why the backtrace is blocked. Because backtrace is usually dumped into a backtrace buffer. And backtrace buffer's is actually influenced by the variable. &lt;/p&gt;&lt;/div&gt;</description><category>debug</category><category>elisp</category><category>emacs</category><category>en</category><guid>http://blog.binchen.org/posts/debug-emacs-lisp-code-the-hard-way.html</guid><pubDate>Wed, 19 Mar 2014 19:45:00 GMT</pubDate></item><item><title>How to use ctags in Emacs effectively</title><link>http://blog.binchen.org/posts/how-to-use-ctags-in-emacs-effectively-3.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://ctags.sourceforge.net/"&gt;Exuberant Ctags&lt;/a&gt; is a code navigation tool. It supports many language and could be integrated into Emacs well. &lt;/p&gt; &lt;p&gt; Please read &lt;a href="http://www.emacswiki.org/emacs/BuildTags"&gt;EmacsWiki&lt;/a&gt; for basic usage. &lt;/p&gt; &lt;p&gt; I will talk about how I manage my ctags. &lt;/p&gt; &lt;p&gt; Basically ctags will produce a index file with file name TAGS. The full path of TAGS will be stored in a global list "tags-table-list". &lt;/p&gt; &lt;p&gt; An example of tags-table-list: &lt;/p&gt;
&lt;pre class="prettyprint "&gt;
(setq tags-table-list '("~/wxWidgets-master/TAGS" "~/projs/Loris/src/desktop/TAGS"))
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Every time we you "M-x find-tag", the TAGS file in above list will be read from the scratch to locate the definition of the symbol under cursor. &lt;/p&gt; &lt;p&gt; Here is my strategy to manage TAGS &lt;b&gt;automatically&lt;/b&gt;: &lt;/p&gt;&lt;ul&gt; &lt;li&gt;I hard coded full path of TAGS in .emacs because I usually don't change project path. &lt;/li&gt; &lt;li&gt;In major mode hook like c++-mode-hook or js2-mode-hook I will check the directory path of current file. If it contains certain string, I suppose the file belong to certain project. &lt;/li&gt; &lt;li&gt;Then I will create TAGS for that project if needed &lt;/li&gt; &lt;li&gt;Every time when I save the file, I may update TAGS according to the value of tags-table-list. &lt;/li&gt; &lt;/ul&gt;   &lt;p&gt; Here is the code: &lt;/p&gt;
&lt;pre class="prettyprint lang-lisp"&gt;
(defun my-project-name-contains-substring (REGEX)
  (let ((dir (if (buffer-file-name)
                 (file-name-directory (buffer-file-name))
               "")))
    (string-match-p REGEX dir)))

(defun my-create-tags-if-needed (SRC-DIR &amp;amp;optional FORCE)
  "return the full path of tags file"
  (let ((dir (file-name-as-directory (file-truename SRC-DIR)) )
       file)
    (setq file (concat dir "TAGS"))
    (when (or FORCE (not (file-exists-p file)))
      (message "Creating TAGS in %s ..." dir)
      (shell-command
       (format "ctags -f %s -e -R %s" file dir))
      )
    file
    ))

(defvar my-tags-updated-time nil)

(defun my-update-tags ()
  (interactive)
  "check the tags in tags-table-list and re-create it"
  (dolist (tag tags-table-list)
    (my-create-tags-if-needed (file-name-directory tag) t)
    ))

(defun my-auto-update-tags-when-save ()
  (interactive)
  (cond
   ((not my-tags-updated-time)
    (setq my-tags-updated-time (current-time)))
   ((&amp;lt; (- (float-time (current-time)) (float-time my-tags-updated-time)) 300)
    ;; &amp;lt; 300 seconds
    ;; do nothing
    )
   (t
    (setq my-tags-updated-time (current-time))
    (my-update-tags)
    (message "updated tags after %d seconds." (- (float-time (current-time))  (float-time my-tags-updated-time)))
    )
   ))

(defun my-setup-develop-environment ()
    (when (my-project-name-contains-substring "Loris")
      (cond
       ((my-project-name-contains-substring "src/desktop")
        ;; C++ project don't need html tags
        (setq tags-table-list (list
                               (my-create-tags-if-needed
                                (concat (file-name-as-directory (getenv "WXWIN")) "include"))
                               (my-create-tags-if-needed "~/projs/Loris/loris/src/desktop")))
        )
       ((my-project-name-contains-substring "src/html")
        ;; html project donot need C++ tags
        (setq tags-table-list (list (my-create-tags-if-needed "~/projs/Loris/loris/src/html")))
        ))))

(add-hook 'after-save-hook 'my-auto-update-tags-when-save)
(add-hook 'js2-mode-hook 'my-setup-develop-environment)
(add-hook 'web-mode-hook 'my-setup-develop-environment)
(add-hook 'c++-mode-hook 'my-setup-develop-environment)
(add-hook 'c-mode-hook 'my-setup-develop-environment)
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; UPDATE: There is some discussion at &lt;a href="https://plus.google.com/110954683162859211810/posts/NsdzvywuoX3"&gt;Google Plus&lt;/a&gt; about using ctags. Kaushal Modi recommended three emacs plugins: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;ctags-update &lt;/li&gt; &lt;li&gt;etags-table &lt;/li&gt; &lt;li&gt;etags-select &lt;/li&gt; &lt;/ol&gt;   &lt;p&gt; I tried these three plugins. ctags-update and etags-table duplicate my above elisp code. I prefer my own code because it's simpler and totally controllable. For example, the fact that I need only care about &lt;b&gt;only one global variable tags-table-list&lt;/b&gt; makes my code shorter. &lt;/p&gt; &lt;p&gt; But I do like etags-select, it provide better UI for finding tag and I will use it from now on. &lt;/p&gt;&lt;/div&gt;</description><category>ctags</category><category>emacs</category><category>en</category><guid>http://blog.binchen.org/posts/how-to-use-ctags-in-emacs-effectively-3.html</guid><pubDate>Tue, 11 Mar 2014 18:52:00 GMT</pubDate></item><item><title>How to use org2blog effectively as a programmer</title><link>http://blog.binchen.org/posts/how-to-use-org2blog-effectively-as-a-programmer.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://github.com/punchagan/org2blog"&gt;org2blog&lt;/a&gt; is a beautiful plugin to post to wordpress blog.
&lt;/p&gt;

&lt;p&gt;
I won't waste your time on the basic usage because it has zero learning curve and its README is very clear.
&lt;/p&gt;

&lt;p&gt;
I will talk some advanced set up here.
&lt;/p&gt;

&lt;p&gt;
As a programmer, I need wordpress syntax highlight all the code snippets I post. But it seems org2blog need some tweak to support language like elisp.
&lt;/p&gt;

&lt;p&gt;
If you grep org2blog's code, you will find a variable "org2blog/wp-sourcecode-langs". It lists all the languages org2blog supports.
&lt;/p&gt;

&lt;p&gt;
So all you need to do is insert below code into ~/.emacs:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;
(setq org2blog/wp-sourcecode-langs
      '("actionscript3" "bash" "coldfusion" "cpp" "csharp" "css" "delphi"
        "erlang" "fsharp" "diff" "groovy" "javascript" "java" "javafx" "matlab"
        "objc" "perl" "php" "text" "powershell" "python" "ruby" "scala" "sql"
        "vb" "xml"
        "sh" "elisp" "lisp" "lua"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Then you need install the wordpress plugin &lt;a href="http://www.viper007bond.com/wordpress-plugins/syntaxhighlighter/"&gt;SyntaxHighlighter Evolved&lt;/a&gt; to do the syntax highlight thing. Well, you will find the languages like elisp is not supported by this plugin.
&lt;/p&gt;

&lt;p&gt;
That's easy to fix. Please log into your blog, modify that plugin online:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-diff"&gt;
diff --git a/syntaxhighlighter.php b/syntaxhighlighter.php
index 53b4815..808b14b 100644
--- a/syntaxhighlighter.php
+++ b/syntaxhighlighter.php
@@ -222,6 +222,11 @@ class SyntaxHighlighter {
            'xslt'          =&amp;gt; 'xml',
            'html'          =&amp;gt; 'xml',
            'xhtml'         =&amp;gt; 'xml',
+           'text'          =&amp;gt; 'clojure',
+           'elisp'         =&amp;gt; 'clojure',
+           'lisp'          =&amp;gt; 'clojure',
+           'sh'            =&amp;gt; 'bash',
+           'lua'           =&amp;gt; 'ruby',
        ) );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
As you can see, I use clojure syntax to highlight elisp and use ruby syntax to highlight lua.
&lt;/p&gt;

&lt;p&gt;
You may ask why I use clojure syntax to highlight simple text in above set up?
&lt;/p&gt;

&lt;p&gt;
Well, I already submit lots of my elisp code before set up my org2blog correctly. Those code snippets are regarded as simple text. I won't waste my time to mark those old snippets one by one. That's why I render text as clojure code.
&lt;/p&gt;

&lt;p&gt;
Besides, I find the wordpress theme produced by &lt;a href="http://automattic.com"&gt;Automattic&lt;/a&gt; (Yes, the company behind wordpress) is good for programmers because they obviously have optimized font size for different screen resolutions. That's important for code reading. I use Trvl v1.0.2.
&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>org</category><category>wordpress</category><guid>http://blog.binchen.org/posts/how-to-use-org2blog-effectively-as-a-programmer.html</guid><pubDate>Thu, 06 Mar 2014 14:25:00 GMT</pubDate></item><item><title>How to adapt my work style to the employer's standard in Emacs</title><link>http://blog.binchen.org/posts/how-to-adapt-my-work-style-to-the-employers-standard-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I write some set up code in ~/.custom.el. It will detect which machine and what directory I'm working on. Then I hook the set up code when major mode (js2-mode, web-mode, for example) loaded. &lt;/p&gt; &lt;p&gt; In my ~/.emacs, &lt;/p&gt;   
&lt;pre class="prettyprint lang-lisp"&gt;
(if (file-readable-p (expand-file-name "~/.custom.el"))
     (load-file (expand-file-name "~/.custom.el")))
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Content of my ~/.custom.el: &lt;/p&gt;   
&lt;pre class="prettyprint lang-lisp"&gt;
;; (getenv "HOSTNAME") won't work because $HOSTNAME is not an env variable
;; (system-name) won't work because as Optus required, my /etc/hosts is changed
(defun my/at-office ()
  (interactive)
  (let ((my-hostname (with-temp-buffer
                       (shell-command "hostname" t)
                       (goto-char (point-max))
                       (delete-char -1)
                       (buffer-string))
                     ))
    (and (string= my-hostname "my-sydney-workpc")
         (not (or (string= my-hostname "sydneypc")
                  (string= my-hostname "ChenBinMacAir")
                  (string= my-hostname "eee")
                  )))
    ))

(defun my/use-office-style ()
  (interactive)
  (let ((dir (if (buffer-file-name)
                 (file-name-directory (buffer-file-name))
               "")))
    (string-match-p "CompanyProject" dir)
    ))

(defun my/setup-develop-environment ()
  (cond
   ((my/use-office-style)
    (message "Office code style!")
    (setq coffee-tab-width 4)
    (setq javascript-indent-level 4)
    (setq js-indent-level 4)
    (setq js2-basic-offset 4)
    (setq web-mode-indent-style 4))
   (t
    (message "My code style!")
    (setq coffee-tab-width 4)
    (setq javascript-indent-level 2)
    (setq js-indent-level 2)
    (setq js2-basic-offset 2)
    (setq web-mode-indent-style 2))
   ))

(add-hook 'js2-mode-hook 'my/setup-develop-environment)
(add-hook 'web-mode-hook 'my/setup-develop-environment)
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><guid>http://blog.binchen.org/posts/how-to-adapt-my-work-style-to-the-employers-standard-in-emacs.html</guid><pubDate>Wed, 05 Mar 2014 10:53:00 GMT</pubDate></item></channel></rss>