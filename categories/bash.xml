<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (bash)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/bash.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Mon, 30 Nov 2015 11:27:24 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How to manage the file path in big project</title><link>http://blog.binchen.org/posts/how-to-manage-the-file-path-in-big-project.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;It's not good practice to use relative path in big project.
&lt;/p&gt;

&lt;p&gt;
Reasons:
&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;If file B refer to file A with "../A". Then B's position in the project *CANNOT be changed. Or else its reference to A will be wrong.
&lt;/li&gt;
&lt;li&gt;Relative path is not intuitive when debugging.
&lt;/li&gt;
&lt;li&gt;If the dependency is complex. Figure out the right path is mission impossible. For example, file A refer to file B with "./a/../../B" and file B refer to file C  "../../b/C".
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
So you should &lt;b&gt;ALWAYS use the absolute path&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Absolute path is tedious to type and not portable.
&lt;/p&gt;

&lt;p&gt;
It could be improved a little bit be use an environment variable to replace the common prefix of the full path.
&lt;/p&gt;

&lt;p&gt;
For example, we can replace absolute path "/home/cb/projects/app1/src/test.c" with "$TTAGROOT/src/test.c", if the value of environment variable TTAGROOT is "/home/cb/projects/app1".
&lt;/p&gt;

&lt;p&gt;
Insert below code into ~/.bashrc so TTAGROOT value is set when you logged into bash:
&lt;/p&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;export TTAGROOT="/home/cb/projects/app1"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
In you script to do the real job, you could make TTAGROOT optional and still use your full path happily. It's just one bash liner.
&lt;/p&gt;

&lt;p&gt;
Here is a sample file named test.sh:
&lt;/p&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;#!/bin/bash
[ -z "$TTAGROOT" ] &amp;amp;&amp;amp; TTAGROOT="hard-coded-full-path"
echo "TTAGROOT = $TTAGROOT"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
You could use test.sh without $TTAGROOT. Or you can set up default value of $TTAGROOT in ~/.bashrc as I already mentioned.
&lt;/p&gt;

&lt;p&gt;
Or you can override the TTAGROOT value when you executing "test.sh":
&lt;/p&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;TTAGROOT="hello" ./test.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
BTW, don't abuse this technique. Set &lt;b&gt;one environment variable&lt;/b&gt; for the root directory of project is enough.
&lt;/p&gt;&lt;/div&gt;</description><category>bash</category><category>en</category><category>engineering</category><category>software</category><guid>http://blog.binchen.org/posts/how-to-manage-the-file-path-in-big-project.html</guid><pubDate>Thu, 29 May 2014 01:31:35 GMT</pubDate></item><item><title>paste string from clipboard into minibuffer in Emacs</title><link>http://blog.binchen.org/posts/paste-string-from-clipboard-into-minibuffer-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;First, I find "Alt-Y" is easier to press when paste string into minibuffer than old "Shift+Insert". "Ctrl-V" is not supported in some terminals.
&lt;/p&gt;

&lt;p&gt;
Second, intergrating some command line clipboard tool into Emacs is better than Emacs X clipboard. Command line tool works in any environment. For example, when you log into a remote server with ssh, your local computer could share clipboard with your Emacs in remote shell. Please note in this example, you need using X11 forward over ssh, usually it's already set up on server.
&lt;/p&gt;

&lt;p&gt;
Here is the code:
&lt;/p&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun paste-from-x-clipboard()
  (interactive)
  (shell-command
   (cond
    (*cygwin* "getclip")
    (*is-a-mac* "pbpaste")
    (t "xsel -ob")
    )
   1)
  )

(defun my/paste-in-minibuffer ()
  (local-set-key (kbd "M-y") 'paste-from-x-clipboard)
  )

(add-hook 'minibuffer-setup-hook 'my/paste-in-minibuffer)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>bash</category><category>emacs</category><category>en</category><guid>http://blog.binchen.org/posts/paste-string-from-clipboard-into-minibuffer-in-emacs.html</guid><pubDate>Tue, 08 Apr 2014 22:17:00 GMT</pubDate></item><item><title>My answer to "How do you use Emacs without a directory tree on the side of the editor?" on quora.com</title><link>http://blog.binchen.org/posts/my-answer-to-how-do-you-use-emacs-without-a-directory-tree-on-the-side-of-the-editor-on-quora-com.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;This is &lt;a href="http://www.quora.com/Emacs/How-do-you-use-Emacs-without-a-directory-tree-on-the-side-of-the-editor"&gt;original link of the question&lt;/a&gt;. Please note I focus on programming for large projects. I need search/grep/modify files scattered in different places without documentation. &lt;/p&gt; &lt;p&gt; If your use case is different, a embedded file explorer may be a better choice &lt;/p&gt;  &lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;Tools I use to replace a file explorer&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;  &lt;ol&gt;&lt;li&gt;ido-find-file (emacs), just type any characters, it will fuzz search matched file in parent/sibling/current/or-whatever directory.  &lt;/li&gt; &lt;li&gt;helm-find-file (emacs), this one use regular expression and has bigger window  &lt;/li&gt; &lt;li&gt;recentf and helm (emacs), I use regular expression open recent opened files.  &lt;/li&gt; &lt;li&gt;ctags, gtags or whatever tag tools (CLI tool), as mentioned by other people  &lt;/li&gt; &lt;li&gt;I also use lots of bash functions written by myself, those functions are trivial, but combined with a wonderful tool called percol, they become really powerful.  &lt;/li&gt; &lt;li&gt;I use some CLI clipboard tool so I can easily share the file path between terminal/emacs/firefox.  &lt;/li&gt; &lt;li&gt;there is also a emacs bundled feature called speedbar, which is similar to the file explorer, I used it once, but it does not fit in my ninja style ;) It's fine but the UI is almost same to those average text editors.  &lt;/li&gt; &lt;li&gt;I also write some elisp snippets, for example, convert absolute path to relative path; given one relative path, output one absolute path, etc …  &lt;/li&gt; &lt;li&gt;there is also some git based emacs plugin: you can search file under the project root directory.  &lt;/li&gt; &lt;li&gt;there is a CLI tool called fasd which can let you interactively select the file or folder you recently visited.  &lt;/li&gt; &lt;li&gt;many other tools, plug-ins, code snippets I can use … &lt;/li&gt; &lt;/ol&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;Use case&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;  &lt;ol&gt;&lt;li&gt;I need search a big project for a certain library (it's a freemarker file I need include) whose full path I don't know, I just search the API's name by type: &lt;/li&gt; &lt;/ol&gt;&lt;p&gt;"gef keyword *". gef is my bash function based on grep. &lt;/p&gt;&lt;ol&gt;&lt;li&gt;matched files are displayed instantly (grep is much more quick than IDEs, BTW) in a interactive console filter (use percol), I type a regular expression to filter file name and press enter &lt;/li&gt; &lt;li&gt;the full path is in clipboard now, then I type ":e Shift-insert" to open that file. &lt;/li&gt; &lt;/ol&gt;&lt;p&gt;This is the most difficult case, I usually strike less keys and not get out of Emacs. &lt;/p&gt;&lt;ol&gt;&lt;li&gt;If i need insert this file's relative path, I press a hot key and another emacs plugin will correctly convert absolute path to relative one (relative to the file I'm editing in Emacs) and insert it into my editor. &lt;/li&gt; &lt;/ol&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3" class="outline-3"&gt; &lt;h4 id="sec-3"&gt;Demo&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3"&gt;  &lt;p&gt;Here is screen cast. In this demo I grepped and open a ftl file and then search another js file in the same project. &lt;img src="http://blog.binchen.org/wp-content/uploads/2014/02/wpid-emacs-grep-search-open-file.gif" alt="http://blog.binchen.org/wp-content/uploads/2014/02/wpid-emacs-grep-search-open-file.gif"&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</description><category>bash</category><category>emacs</category><category>en</category><category>linux</category><guid>http://blog.binchen.org/posts/my-answer-to-how-do-you-use-emacs-without-a-directory-tree-on-the-side-of-the-editor-on-quora-com.html</guid><pubDate>Wed, 19 Feb 2014 21:40:00 GMT</pubDate></item><item><title>How to use git effectively</title><link>http://blog.binchen.org/posts/how-to-use-git-effectively.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;To take the full power of git, you need forget GUI and use CLI only. A little knowledge of script language like Bash/Perl/Python may be helpful. &lt;/p&gt; &lt;p&gt; Here is an example how I use git. &lt;/p&gt;  &lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;Problem&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;  &lt;p&gt;I'm working for a big enterprise project which uses git as version control software.  My daily routine is find what files I changed. So I often use git commands with "–stat" paramters. &lt;/p&gt;    
&lt;pre class="prettyprint "&gt;

git show --stat

git diff --cached --stat

git log --stat

git diff --stat
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Since I use CLI git in bash shell only. I set alias for these commands in bash. For example, I need only type &lt;code&gt;gds&lt;/code&gt; in bash instead of "git diff –stat". &lt;/p&gt; &lt;p&gt; Git commands with "–stat" option usually only display relative paths, so I write some bash function which enable me select that relative path interactively (without using mouse, of course), convert that path to absolute path, and copy that absolute path into clipboard. &lt;/p&gt; &lt;p&gt; Getting full path into clipboard is useful because in big projects I need do lots of communication with managers and colleagues. For example, I need list files I changed in our bug tracking system (JIRA) and also email them by using Outlook. If you still don't understand why it's hard in big project, let me give you some hint. Big project is usually a big shit. Say you will edit file A, you will find another 10 files distributed in different location with &lt;b&gt;same file name&lt;/b&gt; and &lt;b&gt;similar code&lt;/b&gt;. Those another 10 files are not your business and if you dare touch them, you need deal with another 10 managers from ten teams. &lt;/p&gt; &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;Set up&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;  &lt;p&gt;Now you understand the problme. Here comes the solution. &lt;/p&gt; &lt;p&gt; Step 1, You need install percol by &lt;code&gt;sudo pip install percol&lt;/code&gt;. Percol will provide some interactive UI to help you select the line in shell. &lt;/p&gt; &lt;p&gt; Step 2, install xsel or xclip under Linux to support paste text into X clipboard. BTW, you did install some clipboard manager under Linux, didn't you? &lt;/p&gt; &lt;p&gt; Step 3, insert below code into your ~/.bash: &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

# search the file and pop up dialog, then put the full path in clipboard



function pclip() {
    if [ $OS_NAME == CYGWIN ]; then
        putclip $@;
    elif [ $OS_NAME == Darwin ]; then
        pbcopy $@;
    else
        if [ -x /usr/bin/xsel ]; then
            xsel -ib $@;
        else
            if [ -x /usr/bin/xclip ]; then
                xclip -selection c $@;
            else
                echo "Neither xsel or xclip is installed!"
            fi
        fi
    fi
}



function glsf () {
    local str=`git --no-pager log --oneline --decorate --stat $* |percol`
    if [[ $str =~ ^[[:space:]]*([a-z0-9A-Z_.\/-]*).*$ ]]; then
        echo -n ${BASH_REMATCH[1]} |pclip;
        echo ${BASH_REMATCH[1]}
    fi
}



function ff()

{
    # @see http://stackoverflow.com/questions/13373249/extract-substring-using-regexp-in-plain-bash
    local fullpath=$*
    local filename=${fullpath##*/}
    local filter=${fullpath##*./}
    #  only the filename without path is needed
    # filename should be reasonable
    local cli=`find $PWD -type f -iname '*'${filename}'*'|grep ${filter}|percol`
    echo ${cli}
    echo -n ${cli} |pclip;
}
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3" class="outline-3"&gt; &lt;h4 id="sec-3"&gt;Usage&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3"&gt;     
&lt;pre class="prettyprint "&gt;

glsf

ff line-from-clipboard

# now I can paste the full path into firefox, outlook ...
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Here is the screen cast: &lt;img src="https://dl.dropboxusercontent.com/u/858862/screencast/git-find-full-path.gif" alt="https://dl.dropboxusercontent.com/u/858862/screencast/git-find-full-path.gif"&gt;&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</description><category>bash</category><category>en</category><category>git</category><category>linux</category><guid>http://blog.binchen.org/posts/how-to-use-git-effectively.html</guid><pubDate>Fri, 11 Oct 2013 09:38:00 GMT</pubDate></item><item><title>The power of git command line interface</title><link>http://blog.binchen.org/posts/the-power-of-git-command-line-interface-4.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Examples about how to use git CLI. NO gui front end needed. &lt;/p&gt; &lt;p&gt; You need install beautiful &lt;a href="https://github.com/mooz/percol"&gt;percol&lt;/a&gt; developed by mooz by run &lt;code&gt;pip installl percol&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; percol "adds flavor of interactive filtering to the traditional pipe concept of UNIX shell". &lt;/p&gt; &lt;p&gt; Append below code into ~/.bashrc and run "source ~/.bashrc": &lt;/p&gt; &lt;br&gt;&lt;pre class="prettyprint "&gt;
&lt;p&gt;function gurl () {
    if [ -z "$1" ]; then
        echo "Usage: gurl commit-id"
        echo "get the full http url of commit"
    else
        local msg=&lt;code&gt;git remote -v|grep "origin\s\+.*\s\+(fetch)"|sed -e "s/origin\s\+\(.*\)\s\+(fetch)/\1/"&lt;/code&gt;
        local url=""
      # github
        if [ "${msg:0:14}" == "git@github.com" ]; then
            echo https://github.com/&lt;code&gt;echo ${msg}|sed -e "s/^git\@github\.com\:\(.*\)\.git$/\1/"&lt;/code&gt;/commit/$1
        fi
    fi
}&lt;/p&gt;
&lt;h2&gt;pick commit id from &lt;code&gt;git log&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;function gcid () {
    local commit_id=&lt;code&gt;git log --pretty=format:'%h %ad %s (%an)' --date=short|percol|sed -e"s/^\([a-z0-9]\+\)\s\+.*$/\1/"&lt;/code&gt;
    echo ${commit_id}
}&lt;/p&gt;
&lt;h2&gt;pick commit from &lt;code&gt;git log&lt;/code&gt; and output its url&lt;/h2&gt;
&lt;p&gt;function gqurl () {
    local commit_id=&lt;code&gt;git log --pretty=format:'%h %ad %s (%an)' --date=short|percol|sed -e"s/^\([a-z0-9]\+\)\s\+.*$/\1/"&lt;/code&gt;
    gurl ${commit_id}
}&lt;/p&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Now you have three bash fuctions "gurl", "gcid", "gqurl". &lt;/p&gt; &lt;p&gt; Here is demo how to use "gcid": &lt;img src="https://dl.dropboxusercontent.com/u/858862/git-percol-001.gif" alt="https://dl.dropboxusercontent.com/u/858862/git-percol-001.gif"&gt;&lt;/p&gt; &lt;p&gt; Here is demo of "gqurl": &lt;img src="https://dl.dropboxusercontent.com/u/858862/git-percol-002.gif" alt="https://dl.dropboxusercontent.com/u/858862/git-percol-002.gif"&gt;&lt;/p&gt; &lt;p&gt; BTW, I use CLI clipboard tool like xsel. For example, "echo hello|xsel -ib" which insert string "hello" into system clipboard. &lt;/p&gt; &lt;p&gt; so I can "git show &lt;code&gt;gcid&lt;/code&gt;|xsel -ib" to copy/paste the code of specific commit between terminal and firefox. &lt;/p&gt; &lt;p&gt; In summary, the only limit of taking advantage of git's raw power is your imagination. &lt;/p&gt;&lt;/div&gt;</description><category>bash</category><category>en</category><category>git</category><category>linux</category><category>percol</category><guid>http://blog.binchen.org/posts/the-power-of-git-command-line-interface-4.html</guid><pubDate>Thu, 01 Aug 2013 13:17:00 GMT</pubDate></item><item><title>My git alias in .bashrc</title><link>http://blog.binchen.org/posts/my-git-alias-in-bashrc.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;My favourite alias are &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;gau&lt;/code&gt;, &lt;code&gt;gc&lt;/code&gt;,&lt;code&gt;gt&lt;/code&gt;,&lt;code&gt;gl&lt;/code&gt;,&lt;code&gt;gdc&lt;/code&gt;. &lt;/p&gt;    &lt;pre class="src src-sh"&gt;&lt;span style="color: #af0000;"&gt;# &lt;/span&gt;&lt;span style="color: #af0000;"&gt;Git alias&lt;/span&gt;
&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;g&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git status"&lt;/span&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;ga&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git add"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gaa&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git add ."&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gau&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git add -u"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gc&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git commit -m"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gca&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git commit -am"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gb&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git branch"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gbd&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git branch -d"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gco&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git checkout"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gcob&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git checkout -b"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gt&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git stash"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gta&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git stash apply"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gm&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git merge"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gr&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git rebase"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gl&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git log --oneline --decorate --graph"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gs&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git show"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gd&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git diff"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gdc&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git diff --cached"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gbl&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git blame"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gps&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git push"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #5f5f87;"&gt;alias&lt;/span&gt; &lt;span style="color: #af5f00;"&gt;gpl&lt;/span&gt;=&lt;span style="color: #87005f;"&gt;"git pull"&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;  &lt;/div&gt;</description><category>bash</category><category>control</category><category>emacs</category><category>en</category><category>git</category><category>version</category><guid>http://blog.binchen.org/posts/my-git-alias-in-bashrc.html</guid><pubDate>Fri, 20 Jul 2012 17:22:02 GMT</pubDate></item></channel></rss>