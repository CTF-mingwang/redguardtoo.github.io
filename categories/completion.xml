<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (Posts about completion)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/completion.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 05 Apr 2017 13:01:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Emacs auto-completion for non-programmers</title><link>http://blog.binchen.org/posts/emacs-auto-completion-for-non-programmers.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2015-12-01&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2015-12-03 Thu&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
That's easy if you use &lt;a href="https://github.com/company-mode/company-mode"&gt;company-mode&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Say if you want to complete words ONLY in org-mode,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(require 'company)

(add-hook 'after-init-hook 'global-company-mode)

;; Don't enable company-mode in below major modes, OPTIONAL
(setq company-global-modes '(not eshell-mode comint-mode erc-mode rcirc-mode))

;; "text-mode" is a major mode for editing files of text in a human language"
;; most major modes for non-programmers inherit from text-mode
(defun text-mode-hook-setup ()
  ;; make `company-backends' local is critcal
  ;; or else, you will have completion in every major mode, that's very annoying!
  (make-local-variable 'company-backends)

  ;; company-ispell is the plugin to complete words
  (add-to-list 'company-backends 'company-ispell)

  ;; OPTIONAL, if `company-ispell-dictionary' is nil, `ispell-complete-word-dict' is used
  ;;  but I prefer hard code the dictionary path. That's more portable.
  (setq company-ispell-dictionary (file-truename "~/.emacs.d/misc/english-words.txt")))

(add-hook 'text-mode-hook 'text-mode-hook-setup)

(defun toggle-company-ispell ()
  (interactive)
  (cond
   ((memq 'company-ispell company-backends)
    (setq company-backends (delete 'company-ispell company-backends))
    (message "company-ispell disabled"))
   (t
    (add-to-list 'company-backends 'company-ispell)
    (message "company-ispell enabled!"))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
`M-x toggle-company-ispell` to toggle company-ispell in &lt;b&gt;any major mode&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
"english-words.txt" is just a plain text file where lines sorted alphabetically. Every line is a word.
&lt;/p&gt;

&lt;p&gt;
You can download my &lt;a href="https://github.com/redguardtoo/emacs.d/raw/master/misc/english-words.txt"&gt;english-words.txt&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>completion</category><category>emacs</category><category>en</category><category>word</category><guid>http://blog.binchen.org/posts/emacs-auto-completion-for-non-programmers.html</guid><pubDate>Tue, 01 Dec 2015 11:41:34 GMT</pubDate></item><item><title>Emacs中的自动完成(Auto Completion)完全指南</title><link>http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-cheng-wan-quan-zhi-nan.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;div id="table-of-contents"&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-cheng-wan-quan-zhi-nan.html#sec-1"&gt;1. 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-cheng-wan-quan-zhi-nan.html#sec-2"&gt;2. auto-complete结合clang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-cheng-wan-quan-zhi-nan.html#sec-3"&gt;3. company-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-cheng-wan-quan-zhi-nan.html#sec-4"&gt;4. hippie-expand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-cheng-wan-quan-zhi-nan.html#sec-5"&gt;5. complete-symbol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-cheng-wan-quan-zhi-nan.html#sec-6"&gt;6. evil-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-cheng-wan-quan-zhi-nan.html#sec-7"&gt;7. 其他&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-cheng-wan-quan-zhi-nan.html#sec-8"&gt;8. 小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
作者: 陈斌(redguardtoo)
&lt;/p&gt;

&lt;p&gt;
更新时间: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2017-04-05 Wed&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
原创时间: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2012-08-21 二&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
Emacs的比普通IDE的Intellisense强大得多,例如可输入当前文件名(带或者不带文件名后缀都可以).
&lt;/p&gt;

&lt;p&gt;
我不是来赞美Emacs的强大的,我是来吐槽的.Emacs自动完成框架太多了,框架的功能重叠,让人困扰.
&lt;/p&gt;

&lt;p&gt;
所以本文的目的有两个:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;说明哪些自动完成框架是主流的
&lt;/li&gt;
&lt;li&gt;如何配置使用自动完成框架
&lt;/li&gt;
&lt;/ul&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h3 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 概述&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;

&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;函数/插件名&lt;/th&gt;
&lt;th scope="col" class="left"&gt;快捷键&lt;/th&gt;
&lt;th scope="col" class="left"&gt;使用频率&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;company-mode (结合clang)&lt;/td&gt;
&lt;td class="left"&gt;不需要 (也可启用TAB)&lt;/td&gt;
&lt;td class="left"&gt;高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;hippie-expand&lt;/td&gt;
&lt;td class="left"&gt;M-/&lt;/td&gt;
&lt;td class="left"&gt;高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;evil-mode&lt;/td&gt;
&lt;td class="left"&gt;C-n/C-p(完成词),C-x C-n/p(完成行)&lt;/td&gt;
&lt;td class="left"&gt;高&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;auto-complete (结合clang)&lt;/td&gt;
&lt;td class="left"&gt;TAB&lt;/td&gt;
&lt;td class="left"&gt;低&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;complete-symbol&lt;/td&gt;
&lt;td class="left"&gt;C-M-i&lt;/td&gt;
&lt;td class="left"&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h3 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; auto-complete结合clang&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;a href="http://emacswiki.org/emacs/AutoComplete"&gt;auto-complete&lt;/a&gt;是第三方开发的插件,提供了自动完成需要的支持(例如在命令行环境下对下拉菜单的模拟).
&lt;/p&gt;

&lt;p&gt;
而&lt;a href="http://clang.llvm.org"&gt;clang&lt;/a&gt;是苹果公司C/C++/Objective-C编译器,对C++语法的解析很好.
&lt;/p&gt;

&lt;p&gt;
显然,这种方案只适用于clang支持的语言.支持Mac/Linux/Cygwin平台,我不知道是否支持Windows平台.
&lt;/p&gt;

&lt;p&gt;
需要通过&lt;a href="http://emacswiki.org/wiki/ELPA"&gt;elpa(Emacs的AppStore)&lt;/a&gt;安装第三方插件=auto-complete=和&lt;a href="https://github.com/brianjcj/auto-complete-clang"&gt;auto-complete-clang&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
具体配置请参考我的&lt;a href="https://github.com/redguardtoo/emacs.d/blob/903aeb10c316c0f43b35bc0dc6101eea3f729da7/init-auto-complete.el"&gt;init-auto-complete.el&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
顺便说一下,关于elpa的配置,可能你需要参考我的&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/init-elpa.el"&gt;init-elpa.el&lt;/a&gt;,因现在有多个AppStore,且直到Emacs24对elpa的支持才开始自带.
&lt;/p&gt;

&lt;p&gt;
已被company-mode取代,不推荐.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h3 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; company-mode&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
&lt;a href="https://github.com/company-mode/company-mode"&gt;company-mode&lt;/a&gt;和auto-complete功能类似，唯一的区别是clang以及其他语言支持已内置，所以不需要安装其他elisp插件或者额外配置.目前我已用company-mode代替了auto-complete.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h3 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; hippie-expand&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
&lt;a href="http://emacswiki.org/emacs/HippieExpand"&gt;hippie-expand&lt;/a&gt;是Emacs自带的自动完成框架.
&lt;/p&gt;

&lt;p&gt;
其默认的一些特色功能(例如,完成词/文件名/行的功能,或在=minibuffer=中使用)可作为=company-mode=补充.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h3 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; complete-symbol&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
Emacs自带的一个函数,我对这个方案感觉一般,因为在Emacs23中,它默认仅仅调用了后台的ctags而已.
&lt;/p&gt;

&lt;p&gt;
=hippie-expand=经过调教也可用ctags,且其默认的特色功能比=complete-symbol=多,所以我没兴趣配置第三个自动完成框架了.
&lt;/p&gt;

&lt;p&gt;
通过阅读Emacs24的ChangeLog,我发现=complete-symbol=经过配置后可以用=semantic=作为语法解析后端(Emacs23.4也支持,不明白为什么把该特性放在Emacs24的ChangeLog介绍).
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Semantic.html"&gt;semantic&lt;/a&gt;是lisp写的语法解析器,Emacs自带,智能程度介于ctags和clang之间,解析速度比较慢,如果机器配置较差会很卡.
&lt;/p&gt;

&lt;p&gt;
我不喜欢这个语法解析器,过去在semantic尚是&lt;a href="http://cedet.sourceforge.net"&gt;Cedet&lt;/a&gt;的一个组件时,我折腾过=Cedet=,当时的感觉是速度慢,配置繁琐,不稳定.
&lt;/p&gt;

&lt;p&gt;
=Semantic=支持多种语言,如C++/Java.
&lt;/p&gt;

&lt;p&gt;
具体配置请参考我的&lt;a href="https://github.com/redguardtoo/emacs.d/blob/903aeb10c316c0f43b35bc0dc6101eea3f729da7/init-semantic.el"&gt;init-semantic.el&lt;/a&gt;(注意,我不用=semantic=,所以相应代码被注释了.你可取消注释).
&lt;/p&gt;

&lt;p&gt;
已被=company-mode=取代,不推荐.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h3 id="sec-6"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; evil-mode&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
&lt;a href="http://emacswiki.org/emacs/Evil"&gt;Evil-mode&lt;/a&gt;把Emacs模拟成了Vim,是我最喜欢的第三方插件,其自动完成很简单,就是根据当前文件内容自动完成词或行.
&lt;/p&gt;

&lt;p&gt;
值得推荐是因为我也是重度Vim用户,Vim的快捷键已经成为我的本能了.
&lt;/p&gt;

&lt;p&gt;
没什么要配置的,启动=evil-mode=即可,参见我的&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/init-evil.el"&gt;init-evil.el&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h3 id="sec-7"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; 其他&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;p&gt;
我的一个想法. 类似于Evil的完成行.但是可以扫瞄指定目录中所有的文件,列出相似的行.
&lt;/p&gt;

&lt;p&gt;
优点在于:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;匹配可以更加宽容一点
&lt;/li&gt;
&lt;li&gt;使用目前最快的grep工具如&lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt;扫瞄文本
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
我的实现见&lt;a href="https://github.com/redguardtoo/emacs.d/blob/24dd0d7/lisp/init-ivy.el"&gt;init-ivy&lt;/a&gt;中的=counsel-complete-line-by-grep=.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-8" class="outline-2"&gt;
&lt;h3 id="sec-8"&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; 小结&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
自动完成包括前端用户界面和后端语法解析引擎两个部分.
&lt;/p&gt;

&lt;p&gt;
作为前端的用户界面,=company-mode=和=auto-complete=相当成熟.
&lt;/p&gt;

&lt;p&gt;
后端clang最优秀.ctags谈不上语法解析,只是正则表达式罢了,但是因此才能通吃所有语言.semantic支持的语言比clang多一点,性能和稳定性上比较差.
&lt;/p&gt;

&lt;p&gt;
作为一个C++程序员,我过去用=auto-complete=加上clang,现在用=company-mode=加clang.
&lt;/p&gt;

&lt;p&gt;
脚本语言(ruby/python/javascript)我用ctags加=company-mode=自带的=company-etags=.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>completion</category><category>emacs</category><category>intellisense</category><category>zh</category><guid>http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-cheng-wan-quan-zhi-nan.html</guid><pubDate>Tue, 21 Aug 2012 14:50:00 GMT</pubDate></item></channel></rss>