<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (completion)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/completion.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Tue, 01 Dec 2015 11:41:37 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Emacs auto-completion for non-programmers</title><link>http://blog.binchen.org/posts/emacs-auto-completion-for-non-programmers.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
That's easy if you use &lt;a href="https://github.com/company-mode/company-mode"&gt;company-mode&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Say if you want to complete words ONLY in org-mode,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(require 'company)

(add-hook 'after-init-hook 'global-company-mode)

;; Don't enable company-mode in below major modes, OPTIONAL
(setq company-global-modes '(not eshell-mode comint-mode erc-mode rcirc-mode))

(defun org-mode-hook-setup ()
  ;; make `company-backends' local is critcal
  ;; or else, you will have completion in every major mode, that's very annoying!
  (make-local-variable 'company-backends)

  ;; company-ispell is the plugin to complete words
  (add-to-list 'company-backends 'company-ispell)

  ;; OPTIONAL, if `company-ispell-dictionary' is nil, `ispell-complete-word-dict' is used
  ;;  but I prefer hard code the dictionary path. That's more portable.
  (setq company-ispell-dictionary (file-truename "~/.emacs.d/misc/english-words.txt")))

(add-hook 'org-mode-hook 'org-mode-hook-setup)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
"english-words.txt" is just a plain text file where lines sorted alphabetically. Every line is a word.
&lt;/p&gt;

&lt;p&gt;
You can download my &lt;a href="https://github.com/redguardtoo/emacs.d/raw/master/misc/english-words.txt"&gt;english-words.txt&lt;/a&gt;.
&lt;/p&gt;&lt;/div&gt;</description><category>completion</category><category>emacs</category><category>en</category><category>word</category><guid>http://blog.binchen.org/posts/emacs-auto-completion-for-non-programmers.html</guid><pubDate>Tue, 01 Dec 2015 11:41:34 GMT</pubDate></item><item><title>Emacs中的自动完成(Auto Completion)完全指南</title><link>http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-chen-wan-quan-zhi-nan.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;作者: 陈斌(redguardtoo) &lt;/p&gt; &lt;p&gt; 版本号: 20131106 &lt;/p&gt; &lt;p&gt; 更新时间: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2013-11-06 Wed&lt;/span&gt;&lt;/span&gt; 原创时间: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2012-08-21 二&lt;/span&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt; 所谓"自动完成",就是emacs智能猜测用户想输入的是什么词,帮助用户自动输入,如果emacs找到多个可选项,也可能弹出下拉菜单让用户来选择. &lt;/p&gt; &lt;p&gt; 通常我们所说的IDE中的Intellisense,也可以认为是某种"自动完成". &lt;/p&gt; &lt;p&gt; Emacs的自动完成远比篇普通IDE的Intellisense强大得多,例如Emacs可以自动输入当前打开的文件的名字(带或者不带文件名后缀都可以). &lt;/p&gt; &lt;p&gt; 我不是来赞美Emacs的强大的,我是来吐槽的.Emacs中的自动完成框架实在是太多了,很多框架的功能是重叠的,让人实在困扰. &lt;/p&gt; &lt;p&gt; 所以本文的目的有两个, &lt;/p&gt;&lt;ol&gt; &lt;li&gt;说明哪些自动完成框架是主流的 &lt;/li&gt; &lt;li&gt;如何配置使用自动完成框架 &lt;/li&gt; &lt;/ol&gt;    &lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;概述&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;  &lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt; &lt;caption&gt;&lt;/caption&gt; &lt;colgroup&gt;&lt;col class="left"&gt;&lt;col class="left"&gt;&lt;col class="left"&gt;&lt;col class="left"&gt; &lt;/colgroup&gt; &lt;thead&gt; &lt;tr&gt;&lt;th scope="col" class="left"&gt;函数/插件名&lt;/th&gt;&lt;th scope="col" class="left"&gt;快捷键&lt;/th&gt;&lt;th scope="col" class="left"&gt;推荐度&lt;/th&gt;&lt;th scope="col" class="left"&gt;使用频率&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td class="left"&gt;complete-symbol&lt;/td&gt;&lt;td class="left"&gt;C-M-i&lt;/td&gt;&lt;td class="left"&gt;中&lt;/td&gt;&lt;td class="left"&gt;低&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;auto-complete (结合clang)&lt;/td&gt;&lt;td class="left"&gt;TAB&lt;/td&gt;&lt;td class="left"&gt;优&lt;/td&gt;&lt;td class="left"&gt;低&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;company-mode (结合clang)&lt;/td&gt;&lt;td class="left"&gt;不需要&lt;/td&gt;&lt;td class="left"&gt;优&lt;/td&gt;&lt;td class="left"&gt;中&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;hippie-expand&lt;/td&gt;&lt;td class="left"&gt;M-/&lt;/td&gt;&lt;td class="left"&gt;良&lt;/td&gt;&lt;td class="left"&gt;高&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;evil-mode&lt;/td&gt;&lt;td class="left"&gt;C-n/C-p(完成词),C-x C-n/p(完成行)&lt;/td&gt;&lt;td class="left"&gt;中&lt;/td&gt;&lt;td class="left"&gt;高&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;auto-complete结合clang&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;  &lt;p&gt;&lt;a href="http://emacswiki.org/emacs/AutoComplete"&gt;auto-complete&lt;/a&gt;是第三方开发的插件,完美提供了自动完成需要的支持(例如在命令行环境下对下拉菜单的模拟). &lt;/p&gt; &lt;p&gt; 而&lt;a href="http://clang.llvm.org"&gt;clang&lt;/a&gt;是苹果公司开发的目前最优秀的C/C++/Objective-C编译器,对C++语法的解析又快又好. &lt;/p&gt; &lt;p&gt; 显然,这种方案只适用于clang支持的语言.支持Mac/Linux/Cygwin平台,我不知道是否支持Windows平台. &lt;/p&gt; &lt;p&gt; 需要通过&lt;a href="http://emacswiki.org/wiki/ELPA"&gt;elpa(Emacs的AppStore)&lt;/a&gt;安装第三方插件auto-complete和&lt;a href="https://github.com/brianjcj/auto-complete-clang"&gt;auto-complete-clang&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; 如果你是重度IDE用户,喜欢和IDE一样的Intellisense功能,这就是你需要的了. &lt;/p&gt; &lt;p&gt; 具体配置请参考我的&lt;a href="https://github.com/redguardtoo/emacs.d/blob/903aeb10c316c0f43b35bc0dc6101eea3f729da7/init-auto-complete.el"&gt;init-auto-complete.el&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; 顺便说一下,关于elpa的配置,可能你需要参考我的&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/init-elpa.el"&gt;init-elpa.el&lt;/a&gt;,因现在有多个AppStore,且直到Emacs24对elpa的支持才开始自带. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3" class="outline-3"&gt; &lt;h4 id="sec-3"&gt;company-mode&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3"&gt;  &lt;p&gt;&lt;a href="https://github.com/company-mode/company-mode"&gt;company-mode&lt;/a&gt;和auto-complete功能类似，唯一的区别是clang以及其他语言支持已内置，所以不需要安装其他elisp插件或者额外配置.目前我已用company-mode代替了auto-complete. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-4" class="outline-3"&gt; &lt;h4 id="sec-4"&gt;hippie-expand&lt;/h4&gt; &lt;div class="outline-text-3" id="text-4"&gt;  &lt;p&gt;&lt;a href="http://emacswiki.org/emacs/HippieExpand"&gt;hippie-expand&lt;/a&gt;是Emacs自带的自动完成框架,其默认的一些自动完成特色功能可作为auto-complete的补充,例如自动完成词/文件名/行的功能. &lt;/p&gt; &lt;p&gt; 既然是框架,当然可以扩充,在&lt;a href="http://emacswiki.org/emacs/HippieExpand"&gt;Emacs Wiki&lt;/a&gt;中提供了和&lt;a href="http://ctags.sourceforge.net"&gt;ctags&lt;/a&gt;结合的方案. &lt;/p&gt; &lt;p&gt; ctags类似clang,对各种语言做语法解析的后端,但是智能程度远不如clang及后文提到的semantic,优点是所有语言通吃(例如javascript),支持所有操作系统,解析速度快(废话,正则表达式当然快). &lt;/p&gt; &lt;p&gt; 具体配置请参考我的&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/init-hippie-expand.el"&gt;init-hippie-expand.el&lt;/a&gt;. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5" class="outline-3"&gt; &lt;h4 id="sec-5"&gt;complete-symbol&lt;/h4&gt; &lt;div class="outline-text-3" id="text-5"&gt;  &lt;p&gt;Emacs自带的一个函数,我对这个方案感觉一般,因为在Emacs23中,它默认仅仅调用了后台的ctags而已. &lt;/p&gt; &lt;p&gt; hippie-expand经过调教也可调用ctags,且其默认的特色功能比complete-symbol多,所以我没兴趣配置第三个自动完成框架了. &lt;/p&gt; &lt;p&gt; 之所以还值得介绍,是因为我通过阅读Emacs24的changelog,发觉complete-symbol经过配置后可以用semantic作为语法解析后端(我试用后,发觉Emacs23.4也支持,不明白为什么要把该特性放在Emacs24的changelog介绍). &lt;/p&gt; &lt;p&gt; &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Semantic.html"&gt;semantic&lt;/a&gt;是lisp写的语法解析器,Emacs自带,智能程度介于ctags和clang之间,解析速度比较慢,如果机器配置比较差(例如我的eeepc701上网本),会让emacs很卡. &lt;/p&gt; &lt;p&gt; 我个人不是很喜欢这个语法解析器,过去在semantic尚且是开源项目&lt;a href="http://cedet.sourceforge.net"&gt;Cedet&lt;/a&gt;的一个组件未被集成进Emacs中时,我折腾过Cedet,当时的感觉是速度慢,配置繁琐,不稳定. &lt;/p&gt; &lt;p&gt; 也许现在集成进Emacs后的semantic要好很多吧. &lt;/p&gt; &lt;p&gt; Semantic支持多种语言,如C++/Java,如果你是Java程序员,可以考虑complete-symbol加semantic的方案. &lt;/p&gt; &lt;p&gt; 具体配置请参考我的&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/init-semantic.el"&gt;init-semantic.el&lt;/a&gt;(注意,我不用semantic,所以相应的代码被注释了.如果你要用semantic,取消注释). &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-6" class="outline-3"&gt; &lt;h4 id="sec-6"&gt;evil-mode&lt;/h4&gt; &lt;div class="outline-text-3" id="text-6"&gt;  &lt;p&gt;&lt;a href="http://emacswiki.org/emacs/Evil"&gt;Evil-mode&lt;/a&gt;把Emacs模拟成了Vim,是我最喜欢的第三方插件,其自动完成很简单,就是根据当前文件内容自动完成词或行. &lt;/p&gt; &lt;p&gt; 值得推荐是因为我曾是重度Vim用户,Vim的自动完成快捷键已经成为我的本能了. &lt;/p&gt; &lt;p&gt; 没什么要配置的,启动evil-mode即可,参见我的&lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/init-evil.el"&gt;init-evil.el&lt;/a&gt;. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-7" class="outline-3"&gt; &lt;h4 id="sec-7"&gt;小结&lt;/h4&gt; &lt;div class="outline-text-3" id="text-7"&gt;  &lt;p&gt;所谓的自动完成框架,包括前端用户界面和后端语法解析引擎两个部分. &lt;/p&gt; &lt;p&gt; 作为前端的用户界面,我认为唯一做得好的就是auto-complete了,其他都很普通. &lt;/p&gt; &lt;p&gt; 后端语法解析引擎,clang最优秀.ctags实际上谈不上语法解析,只是玩玩正则表达式罢了,但是因此才能通吃所有语言.semantic支持的语言比clang多一点,性能和稳定性上比较差. &lt;/p&gt; &lt;p&gt; 作为一个C++程序员,我过去的首选是auto-complete加上clang,现在我用company-mode加上clang. &lt;/p&gt; &lt;p&gt; 如用一些脚本语言(ruby/python/javascript),我会用ctags加hippie-expand. &lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</description><category>completion</category><category>emacs</category><category>intellisense</category><category>zh</category><guid>http://blog.binchen.org/posts/emacs-zhong-de-zi-dong-wan-chen-wan-quan-zhi-nan.html</guid><pubDate>Tue, 21 Aug 2012 12:50:00 GMT</pubDate></item></channel></rss>