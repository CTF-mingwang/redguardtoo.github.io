<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (spell)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/spell.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Tue, 26 May 2015 21:40:22 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>What's the best spell check setup in emacs</title><link>http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;UPDATED: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2015-05-04&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2014-04-26&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
I will show you the minimum spell check setup for programmers and non programmers at first.
&lt;/p&gt;

&lt;p&gt;
Then I will explain why it is better.
&lt;/p&gt;

&lt;p&gt;
Topics covered in official manual (flyspell-mode-predicate, for example) are NOT discussed here.
&lt;/p&gt;

&lt;p&gt;
But you can see my &lt;b&gt;complete&lt;/b&gt; setup &lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-spelling.el"&gt;HERE&lt;/a&gt;.
&lt;/p&gt;

&lt;div id="outline-container-1" class="outline-3"&gt;
&lt;h4 id="sec-1"&gt;Suggestion for non-programmers&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-1"&gt;

&lt;p&gt;Emacs will find the right dictionary by querying your locale.
&lt;/p&gt;
&lt;p&gt;
Run command "locale" in your shell to get current locale.
&lt;/p&gt;
&lt;p&gt;
If you want to force Emacs use the dictionary "en_US", insert below code into your ~/.emacs:
&lt;/p&gt;



&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; find aspell and hunspell automatically
(cond
 ((executable-find "aspell")
  (setq ispell-program-name "aspell")
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US")))
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")
  (setq ispell-extra-args '("-d en_US")))
 )
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;
That's it!
&lt;/p&gt;
&lt;p&gt;
Please run command "man aspell" or "man hunspell" in shell if you have more questions. I've nothing more to say.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-2" class="outline-3"&gt;
&lt;h4 id="sec-2"&gt;Suggestion for programmers&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-2"&gt;

&lt;p&gt;I strongly recommend aspell instead of hunspell (Though hunspell is fine).
&lt;/p&gt;
&lt;p&gt;
Please insert below code into your ~/.emacs:
&lt;/p&gt;




&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; if (aspell installed) { use aspell}
;; else if (hunspell installed) { use hunspell }
;; whatever spell checker I use, I always use English dictionary
;; I prefer use aspell because:
;; 1. aspell is older
;; 2. looks Kevin Atkinson still get some road map for aspell:
;; @see http://lists.gnu.org/archive/html/aspell-announce/2011-09/msg00000.html
(defun flyspell-detect-ispell-args (&amp;amp;optional RUN-TOGETHER)
  "if RUN-TOGETHER is true, spell check the CamelCase words"
  (let (args)
    (cond
     ((string-match  "aspell$" ispell-program-name)
      ;; force the English dictionary, support Camel Case spelling check (tested with aspell 0.6)
      (setq args (list "--sug-mode=ultra" "--lang=en_US"))
      (if RUN-TOGETHER
          (setq args (append args '("--run-together" "--run-together-limit=5" "--run-together-min=2")))))
     ((string-match "hunspell$" ispell-program-name)
      (setq args nil)))
    args
    ))

(cond
 ((executable-find "aspell")
  (setq ispell-program-name "aspell"))
 ((executable-find "hunspell")
  (setq ispell-program-name "hunspell")
  ;; just reset dictionary to the safe one "en_US" for hunspell.
  ;; if we need use different dictionary, we specify it in command line arguments
  (setq ispell-local-dictionary "en_US")
  (setq ispell-local-dictionary-alist
        '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8))))
 (t (setq ispell-program-name nil)))

;; ispell-cmd-args is useless, it's the list of *extra* arguments we will append to the ispell process when "ispell-word" is called.
;; ispell-extra-args is the command arguments which will *always* be used when start ispell process
(setq ispell-extra-args (flyspell-detect-ispell-args t))
;; (setq ispell-cmd-args (flyspell-detect-ispell-args))
(defadvice ispell-word (around my-ispell-word activate)
  (let ((old-ispell-extra-args ispell-extra-args))
    (ispell-kill-ispell t)
    (setq ispell-extra-args (flyspell-detect-ispell-args))
    ad-do-it
    (setq ispell-extra-args old-ispell-extra-args)
    (ispell-kill-ispell t)
    ))

(defadvice flyspell-auto-correct-word (around my-flyspell-auto-correct-word activate)
  (let ((old-ispell-extra-args ispell-extra-args))
    (ispell-kill-ispell t)
    ;; use emacs original arguments
    (setq ispell-extra-args (flyspell-detect-ispell-args))
    ad-do-it
    ;; restore our own ispell arguments
    (setq ispell-extra-args old-ispell-extra-args)
    (ispell-kill-ispell t)
    ))
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;
That's it.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-3" class="outline-3"&gt;
&lt;h4 id="sec-3"&gt;Why&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3"&gt;

&lt;ul&gt;&lt;li id="sec-3-1"&gt;Aspell&lt;br&gt;
apell is recommended because its option "–run-together". That option could check the &lt;b&gt;camel case word&lt;/b&gt;. Variable name often uses camel case naming convention these days. Read my &lt;a href="http://blog.binchen.org/?p=950"&gt;Effective spell check in Emacs&lt;/a&gt; for advanced tips (spell check HTML files).

&lt;p&gt;
If Emacs start a aspell process with "–run-together" option, that process is not closed so it can be re-used by other commands.
&lt;/p&gt;
&lt;p&gt;
This behaviour will be a problem if you want to let Emacs/aspell correct the typo by running the command "ispell-word" because a apell process with "–run-together" will produce much noise.
&lt;/p&gt;
&lt;p&gt;
For example, for a typo "helle" Emacs will give you too many candidates. It's hard to find the desired word "hello":
&lt;img src="http://blog.binchen.org/wp-content/aspell-camelcase-suggest-nq8.png" alt="aspell-camelcase-suggest-nq8.png"&gt;&lt;/p&gt;
&lt;p&gt;
The better solution is before running "M-x ispell-word", we'd better restart a aspell proces without the argument "–run-together".
&lt;/p&gt;
&lt;p&gt;
Here is the screen shot after we applying this fix:
&lt;img src="http://blog.binchen.org/wp-content/aspell-normal-suggest-nq8.png" alt="aspell-normal-suggest-nq8.png"&gt;&lt;/p&gt;
&lt;p&gt;
As I mentioned, the global variable "ispell-extra-args" contains arguments Emacs will always append to a spell checker process (aspell or hunspell). That's the only variable you need care about.
&lt;/p&gt;
&lt;p&gt;
There is another variable named "ispell-cmd-args". It is actually some &lt;b&gt;extra&lt;/b&gt; arguments Emacs could send to an &lt;b&gt;existing&lt;/b&gt; spell checker process when you "M-x ispell-word". In my opinion, it's useless. I mention it because the naming are confusing. "ispell-extra-args" is actually command line arguments the spell checker will &lt;b&gt;always&lt;/b&gt; use. The "ispell-cmd-args" are actually the extra arguments will &lt;b&gt;optionally&lt;/b&gt; be used.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li id="sec-3-2"&gt;Hunspell&lt;br&gt;
I cannot find hunspell option to check camel case words. Please enlighten me if you know the option.

&lt;p&gt;
Hunspell has some design flaw. It will always check the environment variable LC_ALL, LC_MESSAGES and LANG &lt;b&gt;at first&lt;/b&gt; to find the default dictionary unless you specify the dictionary in the command line. If it cannot find the default dictionary, the spell checker process won't start. Aspell does not have this issue, if it cannot find the zh_CN dictionary, it will fall back into English.
&lt;/p&gt;
&lt;p&gt;
Specify the ispell-extra-args &lt;b&gt;won't stop hunspell to search for the default dictionary&lt;/b&gt; at the beginning.
&lt;/p&gt;
&lt;p&gt;
For example, I am a Chinese and my locale is "zh_CN.utf-8". So hunspell will always search the dictionary zh_CN. Even I'm only interested in English spell checking.
&lt;/p&gt;
&lt;p&gt;
To specify the dictionary explicitly, I need hack the Emacs code which is kind of mess. Finally, I figure out. It's just several lines of elisp code:
&lt;/p&gt;




&lt;pre&gt;&lt;code class="lang-lisp"&gt;(setq ispell-program-name "hunspell")
(setq ispell-local-dictionary "en_US")
(setq ispell-local-dictionary-alist
      '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil nil nil utf-8)))
&lt;/code&gt;&lt;/pre&gt;



&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>aspell</category><category>check</category><category>emacs</category><category>en</category><category>hunspell</category><category>ispell</category><category>spell</category><guid>http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html</guid><pubDate>Mon, 21 Apr 2014 08:25:20 GMT</pubDate></item><item><title>Effective spell check in Emacs</title><link>http://blog.binchen.org/posts/effective-spell-check-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;I will use spell check for html as an example. But the solution also works for other languages.
&lt;/p&gt;

&lt;div id="table-of-contents"&gt;
&lt;h3&gt;Table of Contents&lt;/h3&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="http://blog.binchen.org/posts/effective-spell-check-in-emacs.html#sec-1"&gt;1 Smart spell check in HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.binchen.org/posts/effective-spell-check-in-emacs.html#sec-2"&gt;2 Spell check the camel case strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.binchen.org/posts/effective-spell-check-in-emacs.html#sec-3"&gt;3 Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-1" class="outline-3"&gt;
&lt;h4 id="sec-1"&gt;Smart spell check in HTML&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-1"&gt;

&lt;p&gt;These days I'm maintaining some legacy web application.
&lt;/p&gt;
&lt;p&gt;
My customer is very serious about the content displayed because it's used by many people. For example, any wording change will be reviewed by team from legal team, business team and QA team. Any typo will bring me much paper work in this flow.
&lt;/p&gt;
&lt;p&gt;
Certainly I can use &lt;a href="http://www.emacswiki.org/emacs/FlySpell"&gt;Fly Spell&lt;/a&gt; to do the spell check thing.
&lt;/p&gt;
&lt;p&gt;
But a html file contains many html tags, spell-check everything is even worse than no spell check.
&lt;/p&gt;
&lt;p&gt;
The key point is make spell checker smarter:
&lt;/p&gt;&lt;ul&gt;&lt;li&gt;only check text between html tag like `&amp;lt;label&amp;gt;Please input email&amp;lt;/label&amp;gt;`
&lt;/li&gt;
&lt;li&gt;only check the value of html input control like `&amp;lt;input type="text" value="Please input your name"&amp;gt;`
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
Paste below code into ~/.emacs:
&lt;/p&gt;



&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; flyspell set up for web-mode
(defun web-mode-flyspell-verify ()
  (let ((f (get-text-property (- (point) 1) 'face))
        thing
        rlt)
    (cond
     ((not (memq f '(web-mode-html-attr-value-face
                     web-mode-html-tag-face
                     web-mode-html-attr-name-face
                     web-mode-constant-face
                     web-mode-doctype-face
                     web-mode-keyword-face
                     web-mode-comment-face ;; focus on get html label right
                     web-mode-function-name-face
                     web-mode-variable-name-face
                     web-mode-css-property-name-face
                     web-mode-css-selector-face
                     web-mode-css-color-face
                     web-mode-type-face
                     web-mode-block-control-face)
                 ))
      (setq rlt t))
     ((memq f '(web-mode-html-attr-value-face))
      (save-excursion
        (search-backward-regexp "=['\"]" (line-beginning-position) t)
        (backward-char)
        (setq thing (thing-at-point 'symbol))
        (setq rlt (string-match "^\\(value\\|class\\|ng[A-Za-z0-9-]*\\)$" thing))
        rlt))
     (t t))
    rlt
    ))

(put 'web-mode 'flyspell-mode-predicate 'web-mode-flyspell-verify)
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;
I use &lt;a href="http://web-mode.org/"&gt;web-mode&lt;/a&gt; for html file editing. But you can figure out similar solution for other major modes.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-2" class="outline-3"&gt;
&lt;h4 id="sec-2"&gt;Spell check the camel case strings&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-2"&gt;

&lt;p&gt;Another issue is that we use camel case naming convention. The variable name is usually very long. For example, name like "moduleServiceControllerLoginManager" is below average length.
&lt;/p&gt;
&lt;p&gt;
I need Emacs to spell check the each word from the camel case string.
&lt;/p&gt;
&lt;p&gt;
The solution is let Emacs use &lt;a href="http://aspell.net/"&gt;aspell&lt;/a&gt; with some extra arguments.
&lt;/p&gt;
&lt;p&gt;
Please paste below code into ~/.emacs,
&lt;/p&gt;



&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; if (aspell installed) { use aspell}
;; else if (hunspell installed) { use hunspell }
;; whatever spell checker I use, I always use English dictionary
;; I prefer use aspell because:
;; 1. aspell is older
;; 2. looks Kevin Atkinson still get some road map for aspell:
;; @see http://lists.gnu.org/archive/html/aspell-announce/2011-09/msg00000.html
(setq ispell-program-name "aspell"
      ;; force the English dictionary, support Camel Case spelling check (tested with aspell 0.6)
      ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together" "--run-together-limit=5" "--run-together-min=2"))
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;
Please note the option "–run-together-min=2" means the minimum length of &lt;b&gt;each word&lt;/b&gt; extracted from camel case string is two. Please `man aspell` for details.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-3" class="outline-3"&gt;
&lt;h4 id="sec-3"&gt;Summary&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3"&gt;

&lt;p&gt;If you read &lt;a href="http://www.emacswiki.org/emacs/FlySpell"&gt;Emacs wiki on fly spell&lt;/a&gt;, you may find code like `(flyspell-prog-mode)` is suggested for most programming environment.
&lt;/p&gt;
&lt;p&gt;
But as I proved in above two examples, I can &lt;b&gt;do more&lt;/b&gt; than simply copy code from internet, if I can spend some time to read code and manual.
&lt;/p&gt;
&lt;p&gt;
When I say "read code", I mean read the official elisp code bundled with emacs. For example, after "M-x describe ENTER flyspell-buffer ENTER", I realized that the strength of fly spell is its powerful APIs. Common setup around the internet only use small percentage of its power.
&lt;/p&gt;
&lt;p&gt;
"Read manual" means reading official manual. For example, Emacswiki has some outdated tips about aspell which misguided me. After wasting one hour on mess with aspell, it occurs to me that `man aspell` to check out official manual may help. And it does. It should be a simple task if I had read the manual at the beginning. 
&lt;/p&gt;
&lt;p&gt;
Finally, let's see then screen shot (the typos are underscored):
&lt;img src="http://blog.binchen.org/wp-content/spell-check-html-in-emacs.png" alt="spell-check-html-in-emacs.png"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>linux</category><category>spell</category><guid>http://blog.binchen.org/posts/effective-spell-check-in-emacs.html</guid><pubDate>Tue, 21 Jan 2014 12:00:00 GMT</pubDate></item></channel></rss>