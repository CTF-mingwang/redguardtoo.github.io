<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (org)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/org.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Fri, 03 Apr 2015 00:57:53 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Export org file embedded with code snippets</title><link>http://blog.binchen.org/posts/export-org-file-embedded-with-code-snippets.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2014-11-20 Thu&amp;gt;&lt;/span&gt;&lt;/span&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2014-12-08 Mon&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
I use &lt;a href="http://orgmode.org/"&gt;Org-mode&lt;/a&gt; to record all my notes.
&lt;/p&gt;

&lt;p&gt;
As a developer, I place code snippets from many programming languages into one org file.
&lt;/p&gt;

&lt;p&gt;
The issue is when exporting the org file, major mode for each language will be loaded to render the code snippet.
&lt;/p&gt;

&lt;p&gt;
It means the hooks of the major modes will be executed. Since I put lots of heavy weight setup things in those hooks, my exporting is extremely slow.
&lt;/p&gt;

&lt;p&gt;
In order to solve the issue, I write a small function which will be called at the beginning of each major mode hook.
&lt;/p&gt;

&lt;p&gt;
The function basically check whether the `(buffer-file-name)` is the temporary file created by Org-mode or the output HTML converted from org file. If answer is "YES", then code in major mode hook will not be executed.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defvar cached-normal-file-full-path nil)
(defun is-buffer-file-temp ()
  (interactive)
  "If (buffer-file-name) is nil or a temp file or HTML file converted from org file"
  (let ((f (buffer-file-name))
        org
        (rlt t))
    (cond
     ((not f)
      ;; file does not exist at all
      (setq rlt t))
     ((string= f cached-normal-file-full-path)
      (setq rlt nil))
     ((string-match (concat "^" temporary-file-directory) f)
      ;; file is create from temp directory
      (setq rlt t))
     ((and (string-match "\.html$" f)
           (file-exists-p (setq org (replace-regexp-in-string "\.html$" ".org" f))))
      ;; file is a html file exported from org-mode
      (setq rlt t))
     (t
      (setq cached-normal-file-full-path f)
      (setq rlt nil)))
    rlt))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Another tip is that exporting shell code will fail if `sh-mode` is loaded. So I use "bash" instead. Since there is no "bash-mode", exporting will be fine.
&lt;/p&gt;

&lt;p&gt;
UPDATE:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Add some cache system to avoid calling file-exists-p too often because it's slow!
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>export</category><category>html</category><category>org</category><guid>http://blog.binchen.org/posts/export-org-file-embedded-with-code-snippets.html</guid><pubDate>Thu, 20 Nov 2014 12:22:17 GMT</pubDate></item><item><title>How to use org2blog effectively as a programmer</title><link>http://blog.binchen.org/posts/how-to-use-org2blog-effectively-as-a-programmer.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://github.com/punchagan/org2blog"&gt;org2blog&lt;/a&gt; is a beautiful plugin to post to wordpress blog.
&lt;/p&gt;

&lt;p&gt;
I won't waste your time on the basic usage because it has zero learning curve and its README is very clear.
&lt;/p&gt;

&lt;p&gt;
I will talk some advanced set up here.
&lt;/p&gt;

&lt;p&gt;
As a programmer, I need wordpress syntax highlight all the code snippets I post. But it seems org2blog need some tweak to support language like elisp.
&lt;/p&gt;

&lt;p&gt;
If you grep org2blog's code, you will find a variable "org2blog/wp-sourcecode-langs". It lists all the languages org2blog supports.
&lt;/p&gt;

&lt;p&gt;
So all you need to do is insert below code into ~/.emacs:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(setq org2blog/wp-sourcecode-langs
      '("actionscript3" "bash" "coldfusion" "cpp" "csharp" "css" "delphi"
        "erlang" "fsharp" "diff" "groovy" "javascript" "java" "javafx" "matlab"
        "objc" "perl" "php" "text" "powershell" "python" "ruby" "scala" "sql"
        "vb" "xml"
        "sh" "elisp" "lisp" "lua"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Then you need install the wordpress plugin &lt;a href="http://www.viper007bond.com/wordpress-plugins/syntaxhighlighter/"&gt;SyntaxHighlighter Evolved&lt;/a&gt; to do the syntax highlight thing. Well, you will find the languages like elisp is not supported by this plugin.
&lt;/p&gt;

&lt;p&gt;
That's easy to fix. Please log into your blog, modify that plugin online:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-diff"&gt;diff --git a/syntaxhighlighter.php b/syntaxhighlighter.php
index 53b4815..808b14b 100644
--- a/syntaxhighlighter.php
+++ b/syntaxhighlighter.php
@@ -222,6 +222,11 @@ class SyntaxHighlighter {
            'xslt'          =&amp;gt; 'xml',
            'html'          =&amp;gt; 'xml',
            'xhtml'         =&amp;gt; 'xml',
+           'text'          =&amp;gt; 'clojure',
+           'elisp'         =&amp;gt; 'clojure',
+           'lisp'          =&amp;gt; 'clojure',
+           'sh'            =&amp;gt; 'bash',
+           'lua'           =&amp;gt; 'ruby',
        ) );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
As you can see, I use clojure syntax to highlight elisp and use ruby syntax to highlight lua.
&lt;/p&gt;

&lt;p&gt;
You may ask why I use clojure syntax to highlight simple text in above set up?
&lt;/p&gt;

&lt;p&gt;
Well, I already submit lots of my elisp code before set up my org2blog correctly. Those code snippets are regarded as simple text. I won't waste my time to mark those old snippets one by one. That's why I render text as clojure code.
&lt;/p&gt;

&lt;p&gt;
Besides, I find the wordpress theme produced by &lt;a href="http://automattic.com"&gt;Automattic&lt;/a&gt; (Yes, the company behind wordpress) is good for programmers because they obviously have optimized font size for different screen resolutions. That's important for code reading. I use Trvl v1.0.2.
&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>org</category><category>wordpress</category><guid>http://blog.binchen.org/posts/how-to-use-org2blog-effectively-as-a-programmer.html</guid><pubDate>Thu, 06 Mar 2014 14:25:00 GMT</pubDate></item><item><title>Matthew Keeler video tutorial on org-mode in Emacs</title><link>http://blog.binchen.org/posts/matthew-keeler-video-tutorial-on-org-mode-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;At &lt;a href="https://www.youtube.com/watch?feature=player_detailpage&amp;amp;v=lsYdK0C2RvQ#t=308"&gt;4:57&lt;/a&gt; it becomes interesting. &lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>org</category><guid>http://blog.binchen.org/posts/matthew-keeler-video-tutorial-on-org-mode-in-emacs.html</guid><pubDate>Mon, 23 Sep 2013 20:21:25 GMT</pubDate></item></channel></rss>