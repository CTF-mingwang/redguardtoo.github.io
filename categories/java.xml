<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (java)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/java.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 07 Dec 2014 23:12:02 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>C/C++/Java code indentation in Emacs</title><link>http://blog.binchen.org/posts/ccjava-code-indentation-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-1" class="outline-3"&gt;
&lt;h4 id="sec-1"&gt;Problem&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-1"&gt;

&lt;p&gt;There are two styles when insert curly braces in C like languages.
&lt;/p&gt;
&lt;p&gt;
Style 1:
&lt;/p&gt;



&lt;pre class="prettyprint lang-c"&gt;
if(true) {
    printf("hello world\n");
}
&lt;/pre&gt;



&lt;p&gt;
Style 2:
&lt;/p&gt;



&lt;pre class="prettyprint lang-c"&gt;
if(true)
{
    printf("hello world\n");
}
&lt;/pre&gt;



&lt;p&gt;
Whatever style I use, I expect Emacs will properly handle the indentation for me.
&lt;/p&gt;
&lt;p&gt;
In "Style 1", when I press ENTER key after "{" at first line, I expect the new line will indent four spaces.
&lt;/p&gt;
&lt;p&gt;
In "Style 2", when I press ENTER key after ")" at first line, I expect the new line will NOT indent.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-2" class="outline-3"&gt;
&lt;h4 id="sec-2"&gt;Solution&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-2"&gt;

&lt;p&gt;Insert below code into ~/.emacs:
&lt;/p&gt;



&lt;pre class="prettyprint lang-lisp"&gt;
(defun fix-c-indent-offset-according-to-syntax-context (key val)
  ;; remove the old element
  (setq c-offsets-alist (delq (assoc key c-offsets-alist) c-offsets-alist))
  ;; new value
  (add-to-list 'c-offsets-alist '(key . val)))

(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
              ;; indent
              (fix-c-indent-offset-according-to-syntax-context 'substatement 0)
              (fix-c-indent-offset-according-to-syntax-context 'func-decl-cont 0))
            ))

&lt;/pre&gt;



&lt;p&gt;
That's it.
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-3" class="outline-3"&gt;
&lt;h4 id="sec-3"&gt;Explanation&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3"&gt;

&lt;p&gt;When you press the ENTER key, the function &lt;b&gt;c-indent-line&lt;/b&gt; will be called.
&lt;/p&gt;
&lt;p&gt;
That function will do some simple syntax analysis and decide current syntactic context..
&lt;/p&gt;
&lt;p&gt;
It will use that syntactic context to look up a global variable c-offsets-alist and decide how many spaces the new line will indent.
&lt;/p&gt;
&lt;p&gt;
For example, &lt;b&gt;substatement&lt;/b&gt; corresponds to the code like below:
&lt;/p&gt;



&lt;pre class="prettyprint lang-c"&gt;
if(true) // press ENTER here
&lt;/pre&gt;



&lt;p&gt;
And &lt;b&gt;func-decl-cont&lt;/b&gt; corresponds to:
&lt;/p&gt;



&lt;pre class="prettyprint lang-c"&gt;
void fn () //press ENTER here
&lt;/pre&gt;



&lt;/div&gt;

&lt;/div&gt;

&lt;div id="outline-container-4" class="outline-3"&gt;
&lt;h4 id="sec-4"&gt;Technical details&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-4"&gt;

&lt;p&gt;When you press ENTER key, the new line will be inserted. Then the function &lt;b&gt;indent-according-to-mode&lt;/b&gt; will always be called
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;indent-according-to-mode&lt;/b&gt; will actually call function object &lt;b&gt;indent-line-function&lt;/b&gt; if it's not nil.
&lt;/p&gt;
&lt;p&gt;
In C/C++/Java, that object is actually &lt;b&gt;c-indent-line&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;c-indent-line&lt;/b&gt; is defined in /usr/share/emacs/24.3/lisp/progmodes/cc-cmds.el (I use Emacs 24.3 on Gentoo Linux).
&lt;/p&gt;
&lt;p&gt;
In that function, just below the code line:
&lt;/p&gt;



&lt;pre class="prettyprint lang-lisp"&gt;
(setq c-syntactic-context (c-guess-basic-syntax))
&lt;/pre&gt;



&lt;p&gt;
Please insert insert log code:
&lt;/p&gt;



&lt;pre class="prettyprint lang-lisp"&gt;
(message "c-syntactic-context=%s" c-syntactic-context)
&lt;/pre&gt;



&lt;p&gt;
Then you will know the current syntactic context when you press ENTER key.
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://www.emacswiki.org/emacs/IndentingC"&gt;EmacsWiki&lt;/a&gt; said you can run command "c-set-offset", whose hot key is "C-x C-o", in order to "see the syntax at point". As I tested, it does not work as expected. My way may seem a little bit intrusive but is reliable.
&lt;/p&gt;
&lt;p&gt;
For example, the context &lt;b&gt;statement-cont&lt;/b&gt; corresponds to the use case like this:
&lt;/p&gt;



&lt;pre class="prettyprint lang-c"&gt;
int a=3, // press ENTER here
&lt;/pre&gt;



&lt;p&gt;
Please note syntax analysis in c-indent-line is turned on if and &lt;b&gt;only if&lt;/b&gt; the global flag &lt;b&gt;c-syntactic-indentation&lt;/b&gt; is true.
&lt;/p&gt;
&lt;p&gt;
Thanks for &lt;a href="https://github.com/chengyi"&gt;chengyi&lt;/a&gt; for &lt;a href="https://github.com/redguardtoo/emacs.d/issues/98"&gt;reporting the issue and suggesting the fix&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
BTW, &lt;a href="http://www.emacswiki.org/emacs/IndentingC"&gt;EmacsWiki has a section&lt;/a&gt; to discuss the indenting in C. You may not need it if you have read this article and can read the Emacs lisp code.
&lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>c</category><category>emacs</category><category>en</category><category>java</category><guid>http://blog.binchen.org/posts/ccjava-code-indentation-in-emacs.html</guid><pubDate>Fri, 09 May 2014 09:19:18 GMT</pubDate></item></channel></rss>