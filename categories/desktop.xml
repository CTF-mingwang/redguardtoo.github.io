<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (desktop)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/desktop.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 08 Apr 2015 23:09:53 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Install gitso v0.6 on Gentoo Linux</title><link>http://blog.binchen.org/posts/install-gitso-v0-6-on-gentoo-linux.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Gitso is a frontend to reverse VNC connections. Say you want to access your office pc which is behind firewall. Then you need Gitso. &lt;/p&gt; &lt;p&gt; Here is the commands to install gitso: &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

sudo mkdir /usr/portage/net-misc/gitso

sudo bash -c "curl -L https://github.com/longlene/clx/raw/master/net-misc/gitso/gitso-0.6.ebuild &amp;gt; /usr/portage/net-misc/gitso/gitso-0.6.ebuild"

sudo bash -c "curl -L https://github.com/longlene/clx/raw/master/net-misc/gitso/Manifest|sed -e '/gitso[-_]0.5/d' &amp;gt; /usr/portage/net-misc/gitso/Manifest"

sudo emerge wxpython iproute2 x11vnc tightvnc

sudo ebuild /usr/portage/net-misc/gitso/gitso-0.6.ebuild unpack compile install qmerge clean
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; There are many howtos on gitso on internet. Google it. &lt;/p&gt;&lt;/div&gt;</description><category>desktop</category><category>en</category><category>gentoo</category><category>linux</category><category>remote</category><category>vnc</category><guid>http://blog.binchen.org/posts/install-gitso-v0-6-on-gentoo-linux.html</guid><pubDate>Thu, 29 Aug 2013 22:43:14 GMT</pubDate></item><item><title>Linux桌面使用之道</title><link>http://blog.binchen.org/posts/linux-zhuo-mian-shi-yong-zhi-dao.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;作者: 陈斌(redguardtoo) &lt;/p&gt; &lt;p&gt; 注意: 我会长期维护本文,请参考下面的更新时间 &lt;/p&gt; &lt;p&gt; 更新时间: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2014-04-14 Mon&lt;/span&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt; 原创时间: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2011-05-08 日&lt;/span&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt; 这是为有志于成为顶尖Linux Geek的中级Linux用户而写的入门指导. &lt;/p&gt; &lt;p&gt; 本文的重点是如何高效地使用Linux桌面软件. &lt;/p&gt;  &lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;为什么你的Linux水准原地踏步&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;   &lt;/div&gt;  &lt;div id="outline-container-1-1" class="outline-4"&gt; &lt;h5 id="sec-1-1"&gt;消费主义&lt;/h5&gt; &lt;div class="outline-text-4" id="text-1-1"&gt;  &lt;p&gt;Linux下的免费软件很多,许多人就要把所有有趣的软件都玩遍.这就和高富帅收集跑车,白富美收集包包一个概念.但是问题的关键是时间都被浪费了,学习Linux的初衷被丢之脑后. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-1-2" class="outline-4"&gt; &lt;h5 id="sec-1-2"&gt;自我主义&lt;/h5&gt; &lt;div class="outline-text-4" id="text-1-2"&gt;  &lt;p&gt;例如,拒绝使用更好的软件,因为"我习惯了老的软件"或者"我写了脚本可以实现类似功能"或者"我的人生哲学等等" &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-1-3" class="outline-4"&gt; &lt;h5 id="sec-1-3"&gt;缺乏经验,轻信他人&lt;/h5&gt; &lt;div class="outline-text-4" id="text-1-3"&gt;  &lt;p&gt;典型的就是如果有个新的最酷的文本编辑器出来了.你立即丢弃了你正在用的Emacs,因为你轻信了新软件的广告.一旦那个软件停止升级,发觉你在其上时间精力投资也就白费了.也许在转投阵营前调查软件后面的人(用户和开发者)可能更好一点. &lt;/p&gt; &lt;p&gt; 又比如有个开源界的知名人士宣称Unix的原则就是很多小的独立的程序通过纯文本协议相互作用.在你把这当成黄金法则到处乱应用之前,也许你应该了解一下该大牛讲话的风格就是比较偏激的. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-1-4" class="outline-4"&gt; &lt;h5 id="sec-1-4"&gt;自我管理差&lt;/h5&gt; &lt;div class="outline-text-4" id="text-1-4"&gt;  &lt;p&gt;年青的我就是最好的反面典型.当时我自认为自己智商高,记忆力好,所以学到有用的知识后没有记下来,后来全忘了. &lt;/p&gt; &lt;p&gt; 现在我醒悟了,我会写下心得,公开发表,同时增量备份到全世界至少三个服务器上.在若干年内不断的维护改进. &lt;/p&gt; &lt;p&gt; 比如我写的&lt;a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org"&gt;一年成为Emacs高手&lt;/a&gt;就是一个活生生的例子. &lt;/p&gt;&lt;/div&gt; &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;哲学&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;   &lt;/div&gt;  &lt;div id="outline-container-2-1" class="outline-4"&gt; &lt;h5 id="sec-2-1"&gt;长期投资&lt;/h5&gt; &lt;div class="outline-text-4" id="text-2-1"&gt;  &lt;p&gt;软件对我而言是长期投资.所以我会花很多时间学习软件的快捷键(快捷键长期来说操作比鼠标高效),那种只能用鼠标操作的软件对我来说就是"坏"软件. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2-2" class="outline-4"&gt; &lt;h5 id="sec-2-2"&gt;理性思维&lt;/h5&gt; &lt;div class="outline-text-4" id="text-2-2"&gt;  &lt;p&gt;以文件管理器来说,在Windows平台下我长期使用并热爱Total Commander,在Linux下平台下也有几款文件管理器在界面和功能上和Total Commander上非常接近,自然从感情上讲我会爱屋及乌.但是我最后还是选择了以Emacs作为主要的文件管理器,以丑陋的Midnight Commander为辅助,因我已确定选择软件的总的原则是尽可能用少的的软件做尽可能多的事.具体说来就是以Emacs做任何事,如果一定要用其他软件辅助Emacs,快捷键也应是Emacs的.Midnight Commander符合该条件 &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2-3" class="outline-4"&gt; &lt;h5 id="sec-2-3"&gt;科学方法&lt;/h5&gt; &lt;div class="outline-text-4" id="text-2-3"&gt;  &lt;p&gt;细节见后文,我要强调的是我的工具和方法都是有高手验证过,有官方文档支持.对我而言,科学的含义,就是前人反复验证过的,过去100%成功也许能保证现在将来可能成功(因工具环境不断在变化,所以只是有可能).除此以外都不叫科学. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2-4" class="outline-4"&gt; &lt;h5 id="sec-2-4"&gt;以人为本&lt;/h5&gt; &lt;div class="outline-text-4" id="text-2-4"&gt;  &lt;p&gt;在后文我会列出一些筛选软件的方法.也会推荐一些软件.但你决不要认为只要用了这些软件或者记住了我的方法就能成为高手了.这只是敲门砖而已. &lt;/p&gt; &lt;p&gt; 实际上我推荐的不是软件,而是人.这些软件和用户和开发者是一个精英荟萃的圈子.重要的是你要理解这个圈子的风格. &lt;/p&gt;&lt;/div&gt; &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3" class="outline-3"&gt; &lt;h4 id="sec-3"&gt;少而精&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3"&gt;  &lt;p&gt;软件数量少,品质高,功能强,依赖小,界面通用. &lt;/p&gt; &lt;/div&gt;  &lt;div id="outline-container-3-1" class="outline-4"&gt; &lt;h5 id="sec-3-1"&gt;数量少&lt;/h5&gt; &lt;div class="outline-text-4" id="text-3-1"&gt;  &lt;p&gt;这点很重要,只有需要使用的软件少(但是完成的工作一分都不能少),才可能精通. &lt;/p&gt; &lt;p&gt; 软件少的另外一个好处是维护省心,例如你发觉某个软件的快捷键和另一未知软件有冲突,找出另一个未知软件的工作量和你在系统上安装的软件数量有重大关系. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3-2" class="outline-4"&gt; &lt;h5 id="sec-3-2"&gt;品质高&lt;/h5&gt; &lt;div class="outline-text-4" id="text-3-2"&gt;  &lt;p&gt;我对于品质的要求很简单: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;久经考验(例如Emacs的开发历史有35年以上) &lt;/li&gt; &lt;li&gt;聪明人认同 &lt;/li&gt; &lt;/ul&gt;&lt;p&gt; 何为久经考验,何为聪明人,我相信是可以找出很多客观的指标的.指标越严格,筛选结果就越少. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3-3" class="outline-4"&gt; &lt;h5 id="sec-3-3"&gt;功能强&lt;/h5&gt; &lt;div class="outline-text-4" id="text-3-3"&gt;  &lt;p&gt;原谅我又用Emacs举例,用Emacs可以看网页,收邮件,写程序,做笔记,写博客,读rss. &lt;/p&gt; &lt;p&gt; 附带说明一下,在我罗列的这些功能中,Emacs都是极为优秀,很少有同类软件可以媲美. &lt;/p&gt; &lt;p&gt; 事实上,功能强的终极境界就是提供了一个无所不能的可编程平台. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3-4" class="outline-4"&gt; &lt;h5 id="sec-3-4"&gt;依赖小&lt;/h5&gt; &lt;div class="outline-text-4" id="text-3-4"&gt;  &lt;p&gt;例如,命令行软件不依赖于QT,GTK之类图形界面库,安装包小很多,运行时消耗内存也小,启动快. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3-5" class="outline-4"&gt; &lt;h5 id="sec-3-5"&gt;界面通用&lt;/h5&gt; &lt;div class="outline-text-4" id="text-3-5"&gt;  &lt;p&gt;例如,我写程序用emacs,一般操作用bash shell,文件管理用Midnight Commander(mc),上网用Firefox,但是通过适当的设置(Firefox需要安装插件keysnail,其他软件只要用最新版即可),他们的快捷键都是Emacs的. &lt;/p&gt;&lt;/div&gt; &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-4" class="outline-3"&gt; &lt;h4 id="sec-4"&gt;软件推荐&lt;/h4&gt; &lt;div class="outline-text-3" id="text-4"&gt;   &lt;/div&gt;  &lt;div id="outline-container-4-1" class="outline-4"&gt; &lt;h5 id="sec-4-1"&gt;编辑器&lt;/h5&gt; &lt;div class="outline-text-4" id="text-4-1"&gt;  &lt;p&gt;我用Emacs,考虑到它可以做任何事,可以认为它是轻量级的. &lt;/p&gt; &lt;p&gt; Vim也用,万不得已用nano,结束了. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-4-2" class="outline-4"&gt; &lt;h5 id="sec-4-2"&gt;浏览器&lt;/h5&gt; &lt;div class="outline-text-4" id="text-4-2"&gt;  &lt;p&gt;Firefox.它是自由软件,所以有很多顶尖Geek为其写插件.例如&lt;a href="https://github.com/mooz/keysnail/wiki"&gt;keysnail&lt;/a&gt;可以把Firefox的快捷键设置为Emacs的快捷键.所以我可以不用鼠标浏览网页. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-4-3" class="outline-4"&gt; &lt;h5 id="sec-4-3"&gt;Shell&lt;/h5&gt; &lt;div class="outline-text-4" id="text-4-3"&gt;  &lt;p&gt;我用bash,在我的.bashrc中有如下一行, &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

export HISTSIZE=200000
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; 确保我输入的所有命令都不会丢失,我偏爱命令行软件,但是记命令会消耗我很多脑细胞,所以我让shell替我记住.我只要记住按Ctrl+R可搜索历史就好了. &lt;/p&gt; &lt;p&gt; 其他有用的选项还很多.这只是个例子,说明Bash是可编程的. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-4-4" class="outline-4"&gt; &lt;h5 id="sec-4-4"&gt;桌面&lt;/h5&gt; &lt;div class="outline-text-4" id="text-4-4"&gt;  &lt;p&gt;Gnome,KDE是绝对不会考虑的.我使用更轻量级的&lt;a href="http://i3wm.org/"&gt;i3&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; i3的优点是平铺桌面(例如左边开一个窗口写代码,右边开个窗口看PDF文档)极为方便,学习曲线很低(同类软件我大概试用过10多个了,包括主流的Gnome,KDE,XFCE4). &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-4-5" class="outline-4"&gt; &lt;h5 id="sec-4-5"&gt;其他&lt;/h5&gt; &lt;div class="outline-text-4" id="text-4-5"&gt;  &lt;ul&gt;&lt;li&gt;联网我自己写脚本,因为GUI工具如wicd之类的依赖多而且曾经折腾过我. &lt;/li&gt; &lt;li&gt;听音乐我用命令行工具mpd和mpc &lt;/li&gt; &lt;li&gt;播放视频我用&lt;a href="http://www.mplayerhq.hu"&gt;mplayer&lt;/a&gt;(命令行),等等. &lt;/li&gt; &lt;li&gt;硬盘清理我用bleachbit(清理常用软件产生的临时文件),localepurge(删除无用的多国语言),ncdu(检查硬盘如何被占用) &lt;/li&gt; &lt;li&gt;文件管理器我用Midnight Commander.其键盘快捷键可设置为Emacs的快捷键,对于我这种记不住快捷键的人很有用. &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5" class="outline-3"&gt; &lt;h4 id="sec-5"&gt;软件的使用也需维护&lt;/h4&gt; &lt;div class="outline-text-3" id="text-5"&gt;  &lt;p&gt;安装软件在包管理系统的帮助下很简单.麻烦的是最新软件有时候不稳定,这通常是因为软件的配置文件更新引起的. &lt;/p&gt; &lt;/div&gt;  &lt;div id="outline-container-5-1" class="outline-4"&gt; &lt;h5 id="sec-5-1"&gt;将/etc目录下的默认配置文件备份&lt;/h5&gt; &lt;div class="outline-text-4" id="text-5-1"&gt;  &lt;p&gt;Linux的软件默认配置文件在/etc/目录下. 我使用分布式版本控制软件&lt;a href="http://git-scm.com/"&gt;git&lt;/a&gt;管理/etc目录,分布式版本控制系统好处很多,最大好处就是数据到处有完整备份,非常安全.具体细节请参考&lt;a href="http://en.wikipedia.org/wiki/Distributed_revision_control_system"&gt;wikipedia&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; 在Linux上更新完系统或者安装最新软件包后,可以考虑手动将/etc目录下的文件用git备份. &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

sudo git add /etc/

sudo git commit -am "backup"
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; 一旦某软件工作不正常了,可以检查其/etc下默认配置文件的修改纪录,将配置文件恢复到上一个正常工作的版本. &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

sudo git log /etc/mysql/my.cnf #check history

sudo git checkout commit_ref(version) /etc/mysql/my.cnf #restoren file
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5-2" class="outline-4"&gt; &lt;h5 id="sec-5-2"&gt;将用户目录下的用户定制配置文件备份&lt;/h5&gt; &lt;div class="outline-text-4" id="text-5-2"&gt;  &lt;p&gt;我也用git将个人用户的配置文件(在/home/username/下的配置文件)备份到&lt;a href="http://www.github.com"&gt;github&lt;/a&gt;的服务器上.这里必须用第三方服务器同步配置,因为我使用多台电脑. &lt;/p&gt; &lt;p&gt; 具体操作可写成长篇大论,这里不展开了. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5-3" class="outline-4"&gt; &lt;h5 id="sec-5-3"&gt;将软件版本降级&lt;/h5&gt; &lt;div class="outline-text-4" id="text-5-3"&gt;  &lt;p&gt;最新版本的软件可能不稳定,这时降级是必要的. &lt;/p&gt; &lt;p&gt; 对于Arch Linux来说很简单,请参考&lt;a href="https://wiki.archlinux.org/index.php/Downgrading_Packages"&gt;Archwiki&lt;/a&gt;,实际上很简单,安装名为downgrade的软件,然后让它干所有的体力活就行了. &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

packer downgrade
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; 对于其他主流的Linux发行版如Centos或者Ubuntu来说,由于包的测试周期比较长,所以不会有不稳定的问题. &lt;/p&gt; &lt;p&gt; 对于小众版本来说(例如我现在实用Gentoo Linux),更好的策略是不要随意使用最新版本的软件. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5-4" class="outline-4"&gt; &lt;h5 id="sec-5-4"&gt;云备份&lt;/h5&gt; &lt;div class="outline-text-4" id="text-5-4"&gt;  &lt;p&gt;电子图书,多媒体文件用专业的云备份服务更好,我推荐&lt;a href="https://www.getdropbox.com/referrals/NTg1ODg2Mjk"&gt;Dropbox&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; Dropbox实在是妙用无穷(例如,国外有人把Dropbox和git结合使用),我只是用了其最简单的功能. &lt;/p&gt; &lt;p&gt; 顺便说一下,国内的服务不要用,安全原因,不言自明. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5-5" class="outline-4"&gt; &lt;h5 id="sec-5-5"&gt;备份操作系统&lt;/h5&gt; &lt;div class="outline-text-4" id="text-5-5"&gt;  &lt;p&gt;不用经常作,又有云备份,又有分布式版本控制系统,怕什么. &lt;/p&gt; &lt;p&gt; 备份整个硬盘是用&lt;a href="http://clonezilla.org/"&gt;Clonezilla&lt;/a&gt;,只是备份操作系统的话用以下命令, &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

tar zcvpf mylinux.tgz --exclude=/proc/* --exclude=/lost+found --exclude='mylinux.tgz' --exclude=/mnt/* --exclude=/home/username/* --exclude=/sys/* /
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; 我建议用前者,因为省事. &lt;/p&gt; &lt;p&gt; 假设你采用clonezilla备份操作系统,我建议将/目录(操作系统目录)和/home目录放在两个分区内. &lt;/p&gt; &lt;p&gt; 如果能够按照我前面的少而精的原则选择软件的话,操作系统目录的分区并不需要很大(8G足够了),目前我的常用软件和操作系统的所占空间控制在3G左右(我的例子比较极端,因为我的netbook只有4G硬盘),这样clonezilla的操作就很快. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5-6" class="outline-4"&gt; &lt;h5 id="sec-5-6"&gt;阅读官方文档&lt;/h5&gt; &lt;div class="outline-text-4" id="text-5-6"&gt;  &lt;p&gt;阅读官方和社区文档. &lt;/p&gt; &lt;p&gt; Ubuntu社区的特点用户多,少见的bug一般都会在该社区报告.缺点是其文档深度不够. &lt;/p&gt; &lt;p&gt; Arch Linux和Gentoo Linux的特点是用户一般水准较高,所以文档技术含量很高. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5-7" class="outline-4"&gt; &lt;h5 id="sec-5-7"&gt;虚拟机的用处&lt;/h5&gt; &lt;div class="outline-text-4" id="text-5-7"&gt;  &lt;p&gt;我虚拟机软件使用VirtualBox,虚拟机为Windows XP,该操作系统我会定期更新安全补丁.软件只安装了IE和firefox.该操作系统我只用来操作网络银行.每次操作完毕,我会重置虚拟机状态到操作前的snapshot. &lt;/p&gt;&lt;/div&gt; &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-6" class="outline-3"&gt; &lt;h4 id="sec-6"&gt;常用软件的诊断修复&lt;/h4&gt; &lt;div class="outline-text-3" id="text-6"&gt;  &lt;p&gt;即使采用了上述做法,一年中也会有一次倒霉.就是我要用的某个版本的某个软件出问题了.没人能帮忙,不能降级,改软件配置也没用,也没有可用的错误信息. &lt;/p&gt; &lt;p&gt; 问题看起来很难,事实上5分钟就能搞定.这往往是因为某软件需要的第三方库的版本出问题了. &lt;/p&gt; &lt;p&gt; 比如说firefox不能启动,运行如下命令调试, &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

strace -o err.txt firefox
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; 读一下err.txt就可以知道是哪个库出问题了.相信我,这是不需要任何编程知识的,猜加google就可以了. &lt;/p&gt; &lt;p&gt; 你知道哪个库文件出问题了(保险起见,ldd firefox确认一下).比如/usr/lib/libpng.so.14找不到,简单的解决办法是用另一个版本的库文件代替. &lt;/p&gt; &lt;p&gt; 如果/usr/lib/libpng.so.15是存在的,我们可以用该库顶替libpng.so.14, &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

sudo ln -s /usr/lib/libpng.so.15 /usr/lib/libpng.so.14
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; 通常这样就行了. &lt;/p&gt; &lt;p&gt; 万一冒名顶替不行,我们就必须根据丢失的库文件查找需要安装的软件包. &lt;/p&gt; &lt;p&gt; 以Arch Linux为例(其他发行版也有类似功能): &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

pkgfile libpng
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; pkgfile属于软件包pkgtools,所以你必须安装pkgtools, &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

packer -S pkgtools-git
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-7" class="outline-3"&gt; &lt;h4 id="sec-7"&gt;系统启动失败的修复&lt;/h4&gt; &lt;div class="outline-text-3" id="text-7"&gt;  &lt;p&gt;解决方法很简单,用常见的Linux启动光盘启动,然后chroot,其作用是以指定目录作为操作系统根目录(root directory),然后以此根目录为基准建立一个新的环境. &lt;/p&gt; &lt;p&gt; 细节请参考&lt;a href="https://wiki.archlinux.org/index.php/Change_Root"&gt;https://wiki.archlinux.org/index.php/Change_Root&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; 比如说我升级kernel后系统启动失败,而老的kernel没有备份,我可以光盘启动电脑,然后chroot,再使用上文所提的工具升级或者降级kernel. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-8" class="outline-3"&gt; &lt;h4 id="sec-8"&gt;书籍推荐&lt;/h4&gt; &lt;div class="outline-text-3" id="text-8"&gt;  &lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;&lt;caption&gt;&lt;/caption&gt; &lt;colgroup&gt;&lt;col class="left"&gt;&lt;col class="left"&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th scope="col" class="left"&gt;书籍&lt;/th&gt;&lt;th scope="col" class="left"&gt;评论&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://www.tldp.org/LDP/abs/html/index.html"&gt;Advanced Bash-Scripting Guide&lt;/a&gt; by Mendel Cooper&lt;/td&gt;&lt;td class="left"&gt;经典,不断更新中.其提供的.bashrc模板很有价值,手册完全读完没必要&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://www.catb.org/esr/writings/taoup/"&gt;The Art of Unix Programming by Eric Steven Raymond&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;开拓思路,当八卦看,和编程实际上关系不大&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://debian-handbook.info/browse/stable/"&gt;The Debian Administrator's Handbook&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;很好.捡对你有用的章节看.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-9" class="outline-3"&gt; &lt;h4 id="sec-9"&gt;常见问题&lt;/h4&gt; &lt;div class="outline-text-3" id="text-9"&gt;  &lt;p&gt;等你的问题了. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-10" class="outline-3"&gt; &lt;h4 id="sec-10"&gt;联系我&lt;/h4&gt; &lt;div class="outline-text-3" id="text-10"&gt;  &lt;p&gt;这是我的&lt;a href="https://twitter.com/#!/chen_bin"&gt;twitter&lt;/a&gt;和&lt;a href="https://plus.google.com/110954683162859211810"&gt;google plus&lt;/a&gt;,也可以通过我的email&amp;lt;chenbin DOT sh AT GMAIL DOT COM&amp;gt;联系我. &lt;/p&gt; &lt;p&gt; 我的主力博客为&lt;a href="http://blog.binchen.org"&gt;http://blog.binchen.org&lt;/a&gt;. &lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</description><category>desktop</category><category>linux</category><category>software</category><category>zh</category><guid>http://blog.binchen.org/posts/linux-zhuo-mian-shi-yong-zhi-dao.html</guid><pubDate>Sun, 08 May 2011 16:08:00 GMT</pubDate></item></channel></rss>