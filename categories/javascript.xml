<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog (javascript)</title><link>http://blog.binchen.org/</link><description></description><atom:link href="http://blog.binchen.org/categories/javascript.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Fri, 27 Feb 2015 16:14:32 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Hack wordpress php and make cdnjs.com host js</title><link>http://blog.binchen.org/posts/hack-wordpress-php-and-make-cdnjs-com-host-js.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
For jquery.js, see &lt;a href="http://rk.md/2012/cdnjs-scripts-without-plugin-wordpress/"&gt;http://rk.md/2012/cdnjs-scripts-without-plugin-wordpress/&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I added below code into bottom of functions.php (Appearance =&amp;gt; Editor):
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-php"&gt;
add_action('wp_enqueue_scripts', 'CDNJS_scripts');
function CDNJS_scripts() 
{
    wp_deregister_script('jquery');
    wp_register_script('jquery','http://cdnjs.cloudflare.com/ajax/libs/jquery/1.10.2/jquery.min.js');
    wp_enqueue_script('jquery');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
For js from SyntaxHighlighter Evolved (Plugins =&amp;gt; Installed Plugins =&amp;gt; Edit):
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-diff"&gt;
diff --git a/syntaxhighlighter.php b/syntaxhighlighter.php
index db8c668..e41ec12 100644
--- a/syntaxhighlighter.php
+++ b/syntaxhighlighter.php
@@ -117,30 +117,30 @@ class SyntaxHighlighter {
        }

        // Register brush scripts
-       wp_register_script( 'syntaxhighlighter-core',             plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shCore.js'),            array(),                         $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-as3',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushAS3.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-bash',       plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushBash.js'),       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-coldfusion', plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushColdFusion.js'), array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-cpp',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushCpp.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-csharp',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushCSharp.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-css',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushCss.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-delphi',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushDelphi.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-diff',       plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushDiff.js'),       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-erlang',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushErlang.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-groovy',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushGroovy.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-java',       plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushJava.js'),       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-javafx',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushJavaFX.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-jscript',    plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushJScript.js'),    array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-perl',       plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushPerl.js'),       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-php',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushPhp.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-plain',      plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushPlain.js'),      array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-powershell', plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushPowerShell.js'), array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-python',     plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushPython.js'),     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-ruby',       plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushRuby.js'),       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-scala',      plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushScala.js'),      array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-sql',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushSql.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-vb',         plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushVb.js'),         array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
-       wp_register_script( 'syntaxhighlighter-brush-xml',        plugins_url('syntaxhighlighter/' . $this-&amp;gt;shfolder . '/scripts/shBrushXml.js'),        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-core',             '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shCore.js',            array(),                         $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-as3',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushAS3.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-bash',       '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushBash.js',       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-coldfusion', '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushColdFusion.js', array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-cpp',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushCpp.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-csharp',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushCSharp.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-css',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushCss.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-delphi',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushDelphi.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-diff',       '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushDiff.js',       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-erlang',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushErlang.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-groovy',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushGroovy.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-java',       '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushJava.js',       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-javafx',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushJavaFX.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-jscript',    '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushJScript.js',    array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-perl',       '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushPerl.js',       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-php',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushPhp.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-plain',      '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushPlain.js',      array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-powershell', '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushPowerShell.js', array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-python',     '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushPython.js',     array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-ruby',       '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushRuby.js',       array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-scala',      '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushScala.js',      array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-sql',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushSql.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-vb',         '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushVb.js',         array('syntaxhighlighter-core'), $this-&amp;gt;agshver );
+       wp_register_script( 'syntaxhighlighter-brush-xml',        '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shBrushXml.js',        array('syntaxhighlighter-core'), $this-&amp;gt;agshver );

        // Register some popular third-party brushes
        wp_register_script( 'syntaxhighlighter-brush-clojure',    plugins_url('syntaxhighlighter/third-party-brushes/shBrushClojure.js'),          array('syntaxhighlighter-core'), '20090602'     );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>en</category><category>javascript</category><category>php</category><category>wordpress</category><guid>http://blog.binchen.org/posts/hack-wordpress-php-and-make-cdnjs-com-host-js.html</guid><pubDate>Fri, 07 Mar 2014 00:58:00 GMT</pubDate></item><item><title>How to do HTML/Javascript REPL (Read–eval–print loop) with NO server set up</title><link>http://blog.binchen.org/posts/how-to-do-htmljavascript-repl-read-eval-print-loop-with-no-server-set-up-2.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h3 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Problem&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I love the REPL (Read–eval–print loop). Watch live update of web UI when typing code is cool.
&lt;/p&gt;

&lt;p&gt;
But most solutions around the internet are not practical for me.
&lt;/p&gt;

&lt;p&gt;
In my world, I never has a chance to develop fancy 2D/3D games written in HTML5 canvas.
&lt;/p&gt;

&lt;p&gt;
Intead, I was &lt;b&gt;ALWAYS&lt;/b&gt; assigned to maintain some enterprise CMS with complex business logic. For example, after refreshing the web page I need click lots of buttons before doing the job. Avoiding press "refresh page button" does not help much.
&lt;/p&gt;

&lt;p&gt;
Besides, I can't use the embedded server those solutions boasted because our web application has many dependencies. It needs a whole environment support team to set it up. There is no way I can persuade the team to use a different web server
&lt;/p&gt;

&lt;p&gt;
So for me, a practical solution must be:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;easy to set up
&lt;/li&gt;
&lt;li&gt;powerful. I can read/write any part of the web page in my text editor
&lt;/li&gt;
&lt;li&gt;no learning curve. I don't want to learn any domain specific language or API. For example, if my web application uses jquery, I want &lt;b&gt;use and only use jquery API&lt;/b&gt; to manuipulate web page in my text editor. If it use backbone, then I use backbone. No more, no less.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h3 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Solution&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
The best solution is firefox addon &lt;a href="https://github.com/bard/mozrepl/wiki"&gt;MozRepl&lt;/a&gt;. You can install it &lt;a href="https://addons.mozilla.org"&gt;https://addons.mozilla.org&lt;/a&gt;. Click firefox menu "Tools =&amp;gt; MozRepl =&amp;gt; Start" to run it.
&lt;img src="http://blog.binchen.org/wp-content/moz-repl-start-nq8.png" alt="moz-repl-start-nq8.png"&gt;
&lt;/p&gt;
&lt;p&gt;
So what is MozRepl, as its web site says, "MozRepl lets you program Firefox and other Mozilla-based applications &lt;b&gt;from the inside&lt;/b&gt;." Basically it convert firefox into a socket server. Your text editor could talk to firefox and let firefox do anything you want. Since it only interact with the firefox, I don't need mess with the web server.
&lt;/p&gt;

&lt;p&gt;
Well, I hope I can end this article by claiming "after reading its &lt;a href="https://github.com/bard/mozrepl/wiki/Tutorial"&gt;official tutorial&lt;/a&gt;,I live happily with MozRepl ever after".
&lt;/p&gt;

&lt;p&gt;
The ugly truth is, MozRepl has some rough edges. That's the reason why I write this article. I will explain how to use MozRepl in next two sections.
&lt;/p&gt;

&lt;p&gt;
Section 1 is about how to use MozRepl, whatever text editor you use, you should read this section.
&lt;/p&gt;

&lt;p&gt;
Section 2 is on how to set up my text editor Emacs to interact with MozRepl. It's optional.
&lt;/p&gt;

&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h4 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; Section 1, use MozRepl&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Here are key points:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;You need read above official tutorial at least once
&lt;/li&gt;
&lt;li&gt;There is video demo on youtube. I suggest watching from &lt;a href="http://www.youtube.com/watch?v=5RSnHN6S52c#t=137"&gt;2:18&lt;/a&gt; because you possibily are more interested in manipulating web page than toy with firefox internals.
&lt;/li&gt;
&lt;li&gt;web page is called "content" in MozRepl
&lt;/li&gt;
&lt;li&gt;In order to execute your javascript code with exactly same syntax as your web application is running code "repl.enter(content);" at first line, as you can see in both video and text tutorial
&lt;/li&gt;
&lt;li&gt;Use firefox 24.0+ and MozRepl 1.1.2+
&lt;/li&gt;
&lt;li&gt;For some weird reason, MozRepl socket server needs some warm up after web page refreshed. So run the code like "console.log('hello');" in the first connection, close the connection, and run your other code in second connection.
&lt;/li&gt;
&lt;li&gt;For code running in MozRepl, if one line will trigger some AJAX request, all the code just after that line &lt;b&gt;will not&lt;/b&gt; be executed. Use javascript API "setTimeout' to work around this issue.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Here is a complete example (note how I use setTimeout) written in javascript,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-javascript"&gt;
$('#serviceId').val('0451235550');
$('#serviceId').keyup();
console.log('hi');
setTimeout(function(){
  console.log('world');
  $('input[value="1"][name="isAccountHolder"]').click();
  $('#accountNumber').val('01234567891234');
  setTimeout(function(){
    $('#registrationLoginEmailAddress').val('cb@cb.cb');
    $('#registrationLoginEmailAddress2').val('cb@cb.cb');
    $('#password').val('Password1');
    $('#passwordConfirm').val('Password1');
    $('#title').val('Mr');
    $('#serviceFirstName').val('chen');
    $('#serviceLastName').val('bin');
    $('#registrationLoginDetailsContinueBtn').click();
  },2000);
  $('#serviceAccountContinueBtn').click();
},3000);
$('#confirmServiceBtn').click();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
As you can see from above, I can use jQuery API loaded in that web page without any problem. Of course, you can always use vanilla javascript instead.
&lt;/p&gt;

&lt;p&gt;
Please note the code is not part of my web application! It will be run only in MozRepl. You can telnet to the MozRepl socket server (127.0.0.1 with port 4424) and copy paste above code line by line.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h4 id="sec-2-2"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; Section 2, set up text editor (Emacs)&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
My text editor is Emacs, so I use Emacs as an example.
&lt;/p&gt;

&lt;p&gt;
Step 1, install moz.el according to &lt;a href="https://github.com/bard/mozrepl/wiki/Emacs-integration"&gt;official manual&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Step 2, Please insert below code into your ~/.emacs:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-lisp"&gt;
(defun moz-goto-content-and-run-cmd (cmd)
  (comint-send-string (inferior-moz-process)
                      (concat "repl.enter(content);"
                              cmd
                              "repl.back();")))

(setq moz-repl-js-dir (expand-file-name "~/moz-repl-js-dir"))

(defun moz--read-file (js-file)
  (with-temp-buffer
    (insert-file-contents js-file)
    (buffer-string)))

(defun moz--load-js-file (js-file)
  (let (cmd )
    (when (file-exists-p js-file)
      ;; make moz API usable in any major-mode
      (moz-minor-mode 1)
      ;; flush mozrepl at first
      (moz-goto-content-and-run-cmd "console.log('hello');")
      ;; read the content of js-file
      (setq cmd (moz--read-file js-file))
      (moz-goto-content-and-run-cmd cmd))))

(defun moz-load-js-file-and-send-it ()
  "load js file from specific directory and send it to mozrepl"
  (interactive)
  (let ((js-file (read-file-name "js file:" moz-repl-js-dir)))
    (moz--load-js-file js-file)
    ))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
From now on, you only need "M-x moz-load-js-file-and-send-it" and select the js file you need MozRepl to run.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h3 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Tips&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h4 id="sec-3-1"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; Tip 1&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
Well, this is a simple tip. Maybe you are already aware of this.
&lt;/p&gt;
&lt;p&gt;
You can write a all-in-one.js. In all-in-one.js, you can parse the URL to separate logic for different project.
&lt;/p&gt;

&lt;p&gt;
Here is javascript code,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;
var url=document.URL;
if(/^.*mycompany\.com\.au.*my-account\/registration/.test(url)){
   console.log("for regitration module");
} else if (/^.*mycompany\.com\.au.*my-account\/my-profile/.test(url)) {
   console.log("for profile module");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Since javascript is good at analyzing URL, you can also tweak the URL parameters. Anyway, the full power of javascript is at your hand.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h4 id="sec-3-2"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; Tip 2&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
Sometimes mozrepl will be unresponsive. You can test it by running "M-x moz-reload-browser" to refresh the page. If page is not refreshed, restart Firefox. Luckily this does not happen too often.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-lisp"&gt;
(defun moz-reload-browser ()
  (interactive)
  (comint-send-string (inferior-moz-process)
                      "setTimeout(function(){content.document.location.reload(true);}, '500');"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h3 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Demo&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
Here is a demo how I use it in a real world web application development.
&lt;/p&gt;

&lt;p&gt;
The script to drive the firefox is written in simple javascript/jquery code, which I already show you.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/mozrepl-in-action.gif" alt="mozrepl-in-action.gif"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>en</category><category>frontend</category><category>html</category><category>javascript</category><category>repl</category><guid>http://blog.binchen.org/posts/how-to-do-htmljavascript-repl-read-eval-print-loop-with-no-server-set-up-2.html</guid><pubDate>Mon, 10 Feb 2014 21:56:00 GMT</pubDate></item><item><title>Notes on Google Chrome's dev tool</title><link>http://blog.binchen.org/posts/notes-on-google-chromes-dev-tool.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt; &lt;li&gt;C-[ or C-] to switch panel &lt;/li&gt; &lt;li&gt;C-S-J to toggle dev tools and focus &lt;b&gt;Console panel&lt;/b&gt;, see &lt;a href="https://developers.google.com/chrome-developer-tools/docs/commandline-api"&gt;command line reference&lt;/a&gt; &lt;/li&gt; &lt;li&gt;C-S-I to toggle dev tools, then C-o to switch to &lt;b&gt;Sources panel&lt;/b&gt; if needed &lt;/li&gt; &lt;li&gt;C-S-C to &lt;b&gt;open&lt;/b&gt; dev tools and focus on &lt;b&gt;Elements panel&lt;/b&gt; &lt;/li&gt; &lt;li&gt;See &lt;a href="https://developers.google.com/chrome-developer-tools/docs/shortcuts"&gt;https://developers.google.com/chrome-developer-tools/docs/shortcuts&lt;/a&gt; for all hot keys &lt;/li&gt; &lt;li&gt;See &lt;a href="https://developers.google.com/chrome-developer-tools/docs/javascript-debugging"&gt;https://developers.google.com/chrome-developer-tools/docs/javascript-debugging&lt;/a&gt; &lt;/li&gt; &lt;li&gt;Click &lt;a href="http://javascript-library.googlecode.com/svn/trunk/javascript/goog/demos/hovercard.html"&gt;here&lt;/a&gt; for test &lt;/li&gt; &lt;/ul&gt;   &lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt; &lt;caption&gt;&lt;/caption&gt; &lt;colgroup&gt;&lt;col class="left"&gt;&lt;col class="left"&gt; &lt;/colgroup&gt; &lt;thead&gt; &lt;tr&gt;&lt;th scope="col" class="left"&gt;command in source panel&lt;/th&gt;&lt;th scope="col" class="left"&gt;hotkey&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td class="left"&gt;Continue&lt;/td&gt;&lt;td class="left"&gt;C-\&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Toggle break point&lt;/td&gt;&lt;td class="left"&gt;C-B&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Step over&lt;/td&gt;&lt;td class="left"&gt;C-'&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Step into&lt;/td&gt;&lt;td class="left"&gt;C-;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Step out&lt;/td&gt;&lt;td class="left"&gt;S-C-;&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Up call stack&lt;/td&gt;&lt;td class="left"&gt;C-,&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Down call stack&lt;/td&gt;&lt;td class="left"&gt;C-.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Toggle console view&lt;/td&gt;&lt;td class="left"&gt;ESC&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Goto line&lt;/td&gt;&lt;td class="left"&gt;C-G&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Goto file&lt;/td&gt;&lt;td class="left"&gt;C-P&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Jump to method&lt;/td&gt;&lt;td class="left"&gt;S-C-O&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;  &lt;ul&gt; &lt;li&gt;I don't use hotkey F1~F12 because my windows manager is different from most developers &lt;/li&gt; &lt;li&gt;live editing does not work on Chromium 30.0.1599.114 Built on Ubuntu 13.04. Anyway, I don't need this functionality &lt;/li&gt; &lt;li&gt;hotkeys of "Continue" button in &lt;b&gt;Sources panel&lt;/b&gt; does not work on Chromium 30.0.1599.114 Built on Ubuntu 13.04. &lt;/li&gt; &lt;li&gt;"Break on" inspected element is extremely useful &lt;/li&gt; &lt;/ul&gt;  &lt;/div&gt;</description><category>chrome</category><category>debug</category><category>en</category><category>google</category><category>javascript</category><guid>http://blog.binchen.org/posts/notes-on-google-chromes-dev-tool.html</guid><pubDate>Mon, 13 Jan 2014 12:32:00 GMT</pubDate></item><item><title>Why Emacs is better editor - a case study for javascript developer</title><link>http://blog.binchen.org/posts/why-emacs-is-better-editor.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;UPDATED: &lt;span class="timestamp-wrapper"&gt; &lt;span class="timestamp"&gt;2014-01-15 Wed&lt;/span&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt; Let's see an example in real life development. &lt;/p&gt; &lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;Note&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;  &lt;p&gt;For people who does not get the key points of this article, here are the points: &lt;/p&gt;&lt;ul&gt; &lt;li&gt;Emacs has an embedded &lt;b&gt;javascript interpreter&lt;/b&gt; which I extend a little bit. &lt;/li&gt; &lt;li&gt;Other editors just use external tools or regular expression to do the semantic analysis. &lt;/li&gt; &lt;li&gt;The difference of above two is bigger than the difference between machine gun and spear. &lt;/li&gt; &lt;/ul&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;Problem&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;  &lt;p&gt;I'm maintaining a big javascript file with thousands of lines of legacy code. &lt;/p&gt; &lt;p&gt; My most urgent issue is how to list all the functions in that javascript file and jump to the definition of specific function easily. &lt;/p&gt; &lt;p&gt; The modern enterprise application usually define the javascript function in some complex data structure. So most editors are not good at listing the functions. &lt;/p&gt; &lt;p&gt; To understand what "complex" means, let's check some code from real world application: &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

$(el.completeRegistrationForm).validate({
    ignore: " :hidden",
    rules : {
        password : {
            required : function () { return $(el.password).is(":visible"); }
        },
        accountNumber : {
            required : function () {
                return $(el.accountNumber).is(":visible");
            },
            digits : true
        }
        // ... I skipped next 200 lines which are similar to above lines

    },
    messages : {
        password: {
            required : "Please input a valid password"
        },
        accountNumber: {
            required : "Please provide a valid account number",
            digits : "Please enter only digits",
        }
        // ... I skipped next 200 lines which are similar to above lines
    }
});
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Most editors like Sublime Text 3 cannot display the javascript functions with meaningful context in this case. All you can see is only a bunch of functions with name "required".: &lt;img src="http://blog.binchen.org/wp-content/uploads/2013/12/wpid-sublime-functions.png" alt="http://blog.binchen.org/wp-content/uploads/2013/12/wpid-sublime-functions.png"&gt; &lt;/p&gt; &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3" class="outline-3"&gt; &lt;h4 id="sec-3"&gt;Solution&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3"&gt;  &lt;p&gt;Emacs has a &lt;a href="http://www.emacswiki.org/emacs/Js2Mode"&gt;js2-mode&lt;/a&gt; which is basically a javascript interpreter written in lisp. It's created by &lt;a href="http://www.emacswiki.org/emacs/SteveYegge"&gt;Steve Yegge&lt;/a&gt; and now maintained by &lt;a href="https://github.com/mooz/js2-mode"&gt;mooz&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; Since js2-mode is a interpreter, basically it can do anythig you want. The key point is to understand the &lt;a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;Abstract Syntax Tree (AST)&lt;/a&gt; defined in js2-mode. &lt;/p&gt;
&lt;p&gt; I already submitted the patch to mooz so everyone will enjoy this feature in the future. &lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Here is the screen shot of emacs in old js2-mode, the UI is based on &lt;a href="http://www.emacswiki.org/emacs/ImenuMode"&gt;Imenu Mode&lt;/a&gt; and &lt;a href="https://github.com/emacs-helm/helm"&gt;helm&lt;/a&gt;: &lt;img src="http://blog.binchen.org/wp-content/uploads/2013/12/wpid-emacs-functions.png" alt="http://blog.binchen.org/wp-content/uploads/2013/12/wpid-emacs-functions.png"&gt; &lt;/p&gt; &lt;p&gt; The screen shot after we applying the above patch:  &lt;img src="http://blog.binchen.org/wp-content/uploads/2013/12/wpid-emacs-functions-improved.png" alt="http://blog.binchen.org/wp-content/uploads/2013/12/wpid-emacs-functions-improved.png"&gt; &lt;/p&gt; &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-4" class="outline-3"&gt; &lt;h4 id="sec-4"&gt;Summary&lt;/h4&gt; &lt;div class="outline-text-3" id="text-4"&gt;  &lt;p&gt;That's an example of beauty of Emacs. &lt;/p&gt; &lt;p&gt; It gives you freedom and power. You can base your work on the top geeks like Steve Yegge and mooz. Just a few lines of lisp code to kick ass. &lt;/p&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-5" class="outline-3"&gt; &lt;h4 id="sec-5"&gt;Update&lt;/h4&gt; &lt;div class="outline-text-3" id="text-5"&gt;  &lt;p&gt;My patch is incorporated into js2-mode since version 20140114. You can install it through emacs package manager. &lt;/p&gt; &lt;p&gt; After installing js2-mode, you need paste only one line code into your ~/.emacs to enable the feature: &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;
(js2-imenu-extras-mode)
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; The UI to display the candidate in this actile is from package &lt;a href="https://github.com/emacs-helm/helm"&gt;helm&lt;/a&gt;. But there are many other UI front end for imenu instead of helm. &lt;/p&gt; &lt;p&gt; The helm version should be 20140125.1101 or higher, you can install helm from &lt;a href="http://melpa.milkbox.net/"&gt;melpa&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; After installing helm, you can use command "M-x helm-imenu" to show the list of functions to jump to. Here is the screen shot how I use imenu in my &lt;a href="https://github.com/redguardtoo/hello/raw/master/hello2.js"&gt;hello2.js&lt;/a&gt;: &lt;/p&gt; &lt;p&gt; &lt;img src="http://blog.binchen.org/wp-content/uploads/2014/01/wpid-helm-imenu-and-js2-mode-nq8.png" alt="http://blog.binchen.org/wp-content/uploads/2014/01/wpid-helm-imenu-and-js2-mode-nq8.png"&gt; &lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</description><category>emacs</category><category>en</category><category>html</category><category>javascript</category><category>web</category><guid>http://blog.binchen.org/posts/why-emacs-is-better-editor.html</guid><pubDate>Sun, 15 Dec 2013 19:02:00 GMT</pubDate></item><item><title>How to write javascript/html code quickly</title><link>http://blog.binchen.org/posts/how-to-write-javascripthtml-code-quickly.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;mixing code of javascript and html is a big problem&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;   &lt;p&gt; If we mix the javascript code into html file as below: &lt;/p&gt;   &lt;pre class="src src-html"&gt;&amp;lt;&lt;span style="color: #81a2be;"&gt;ul&lt;/span&gt;&amp;gt;
  &amp;lt;% for(var key in service.get('Detail')){ %&amp;gt;
    &amp;lt;&lt;span style="color: #000000; background-color: #ff00ff; font-weight: bold; text-decoration: underline;"&gt;%&lt;/span&gt; if(key!='creditcard_number){ %&amp;gt;
      &amp;lt;&lt;span style="color: #81a2be;"&gt;li&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style="color: #81a2be;"&gt;label&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;for&lt;/span&gt;='&amp;lt;%= key %&amp;gt;'&amp;gt;&amp;lt;%= key %&amp;gt;&amp;lt;/&lt;span style="color: #81a2be;"&gt;label&lt;/span&gt;&amp;gt;
          &amp;lt;&lt;span style="color: #81a2be;"&gt;div&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;id&lt;/span&gt;='&amp;lt;%=key %&amp;gt;'&amp;gt;&amp;lt;%= service.get('Details')[key] %&amp;gt;&amp;lt;/&lt;span style="color: #81a2be;"&gt;div&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style="color: #81a2be;"&gt;li&lt;/span&gt;&amp;gt;
    &amp;lt;% }&lt;span style="color: #000000; background-color: #ff00ff; font-weight: bold; text-decoration: underline;"&gt;%&lt;/span&gt;&amp;gt;
&amp;lt;% } &lt;span style="color: #000000; background-color: #ff00ff; font-weight: bold; text-decoration: underline;"&gt;%&lt;/span&gt;&amp;gt;
&lt;p&gt;&amp;lt;/&lt;span style="color: #81a2be;"&gt;ul&lt;/span&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;  &lt;p&gt; Then it's hard to write/debug/fix the javascript code because: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;html code becomes noise for javascript development. &lt;/li&gt; &lt;li&gt;The syntax checker for javascript will not work properly. &lt;/li&gt; &lt;/ol&gt;   &lt;p&gt; If  we mix the html code into javascript file as below: &lt;/p&gt;   &lt;pre class="src src-javascript"&gt;&lt;span style="color: #b5bd68;"&gt;for&lt;/span&gt;(&lt;span style="color: #b5bd68;"&gt;var&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;key&lt;/span&gt; &lt;span style="color: #b5bd68;"&gt;in&lt;/span&gt; service.get(&lt;span style="color: #8abeb7;"&gt;'Detail'&lt;/span&gt;)){
  &lt;span style="color: #b5bd68;"&gt;if&lt;/span&gt;(key!=&lt;span style="color: #8abeb7;"&gt;'creditcard_number'&lt;/span&gt;){
    htmlRender(formatString(&lt;span style="color: #8abeb7;"&gt;"&amp;lt;li&amp;gt;&amp;lt;label for='%s'&amp;gt;%s&amp;lt;/label&amp;gt;&amp;lt;div id='%s'&amp;gt;%s&amp;lt;/div&amp;gt;"&lt;/span&gt;,key,key,service.get(&lt;span style="color: #8abeb7;"&gt;'Details'&lt;/span&gt;)[key]));
  }
}
&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;  &lt;p&gt; Now html code becomes hard to write/debug/fix because: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;javascript code becomes noise for html development. &lt;/li&gt; &lt;li&gt;The syntax checker for html will not work properly. &lt;/li&gt; &lt;/ol&gt;   &lt;p&gt; In summary, mixing code in different language syntax will: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;make code hard to read &lt;/li&gt; &lt;li&gt;make syntax checker dysfunctional &lt;/li&gt; &lt;/ol&gt;   &lt;p&gt; These are the top two causes why we can not code fast in real application. &lt;/p&gt; &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;Use functional programming to avoid mix the javascript and html&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;  &lt;p&gt;So here is our objective: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;We need put the business logic into javascript file. The logic usually contains "for/while/if" statements. &lt;/li&gt; &lt;li&gt;Html tags like "&amp;lt;div&amp;gt;/&amp;lt;span&amp;gt;/&amp;lt;ul&amp;gt;/&amp;lt;li&amp;gt;" need be placed in html file. &lt;/li&gt; &lt;/ol&gt;   &lt;p&gt; The solution is actually simple. We just need apply a little bit of functional programming skill. &lt;/p&gt; &lt;p&gt; So here is our html file in functional programming style: &lt;/p&gt;   &lt;pre class="src src-html"&gt;&amp;lt;% forEachAttributeInService(service,function(service,key) { %&amp;gt;
   &amp;lt;&lt;span style="color: #81a2be;"&gt;li&lt;/span&gt;&amp;gt;
     &amp;lt;&lt;span style="color: #81a2be;"&gt;label&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;for&lt;/span&gt;='&amp;lt;%= key %&amp;gt;'&amp;gt;&amp;lt;%= key %&amp;gt;&amp;lt;/&lt;span style="color: #81a2be;"&gt;label&lt;/span&gt;&amp;gt;
     &amp;lt;&lt;span style="color: #81a2be;"&gt;div&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;id&lt;/span&gt;='&amp;lt;%=key %&amp;gt;'&amp;gt;&amp;lt;%= formatServiceAttributes(service,key) %&amp;gt;&amp;lt;/&lt;span style="color: #81a2be;"&gt;div&lt;/span&gt;&amp;gt;
   &amp;lt;/&lt;span style="color: #81a2be;"&gt;li&lt;/span&gt;&amp;gt;
&amp;lt;%  }); &lt;span style="color: #000000; background-color: #ff00ff; font-weight: bold; text-decoration: underline;"&gt;%&lt;/span&gt;&amp;gt;
&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;   &lt;p&gt; Here is the javascript file: &lt;/p&gt;   &lt;pre class="src src-javascript"&gt;&lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt; &lt;span style="color: #81a2be;"&gt;forEachAttributeInService&lt;/span&gt;(&lt;span style="color: #f0c674;"&gt;service&lt;/span&gt;,&lt;span style="color: #f0c674;"&gt;fn&lt;/span&gt;) {
  &lt;span style="color: #b5bd68;"&gt;for&lt;/span&gt;(&lt;span style="color: #b5bd68;"&gt;var&lt;/span&gt; &lt;span style="color: #f0c674;"&gt;key&lt;/span&gt; &lt;span style="color: #b5bd68;"&gt;in&lt;/span&gt; service.get(&lt;span style="color: #8abeb7;"&gt;'Detail'&lt;/span&gt;)){
    &lt;span style="color: #b5bd68;"&gt;if&lt;/span&gt;(key!=&lt;span style="color: #8abeb7;"&gt;'creditcard_number'&lt;/span&gt;){
      fn(service,key)
    }
  }
}
&lt;p&gt;&lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt; &lt;span style="color: #81a2be;"&gt;formatServiceAttributes&lt;/span&gt;(&lt;span style="color: #f0c674;"&gt;service&lt;/span&gt;,&lt;span style="color: #f0c674;"&gt;key&lt;/span&gt;) {
  &lt;span style="color: #b5bd68;"&gt;return&lt;/span&gt; service.get(&lt;span style="color: #8abeb7;"&gt;'Details'&lt;/span&gt;)[key];
}&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;   &lt;p&gt; Now let's check what happens. &lt;/p&gt; &lt;p&gt; In the html file, the business logic is converted into combination of functional calls. &lt;/p&gt; &lt;p&gt; In javascript file, all the code dealing with hard coded html tags are converted to the call of anonymous functions. Those anonymous function is basically dump of html tags which is defined in html file. &lt;/p&gt; &lt;p&gt; You can use this technique to convert any existing code into new style. For example, a simple "if else" statement could be re-written in new style: &lt;/p&gt;   &lt;pre class="src src-javascript"&gt;&lt;span style="color: #969896; font-style: italic;"&gt;/&lt;em&gt; &lt;/em&gt;&lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;code in old style /&lt;/span&gt;
&lt;p&gt;&lt;span style="color: #b5bd68;"&gt;if&lt;/span&gt; (&lt;span style="color: #de935f;"&gt;true&lt;/span&gt;){
  console.log(&lt;span style="color: #8abeb7;"&gt;'&amp;lt;li&amp;gt;YES&amp;lt;/li&amp;gt;'&lt;/span&gt;);
} &lt;span style="color: #b5bd68;"&gt;else&lt;/span&gt; {
  console.log(&lt;span style="color: #8abeb7;"&gt;'&amp;lt;li&amp;gt;NO&amp;lt;/li&amp;gt;'&lt;/span&gt;);
}&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #969896; font-style: italic;"&gt;/&lt;em&gt; &lt;/em&gt;&lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;code in new style /&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt; &lt;span style="color: #81a2be;"&gt;func_if_else&lt;/span&gt;(&lt;span style="color: #f0c674;"&gt;f1&lt;/span&gt;,&lt;span style="color: #f0c674;"&gt;f2&lt;/span&gt;,&lt;span style="color: #f0c674;"&gt;f3&lt;/span&gt;){
  &lt;span style="color: #b5bd68;"&gt;if&lt;/span&gt;(f1()){
    f2();
  } &lt;span style="color: #b5bd68;"&gt;else&lt;/span&gt; {
    f3();
  }
}&lt;/p&gt;
&lt;p&gt;&lt;span style="color: #969896; font-style: italic;"&gt;/&lt;em&gt; &lt;/em&gt;&lt;/span&gt;&lt;span style="color: #969896; font-style: italic;"&gt;the execution of func_if_else() /&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;func_if_else(&lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt;(){ &lt;span style="color: #b5bd68;"&gt;return&lt;/span&gt; &lt;span style="color: #de935f;"&gt;true&lt;/span&gt; },
           &lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt;(){
             console.log(&lt;span style="color: #8abeb7;"&gt;'&amp;lt;li&amp;gt;YES&amp;lt;/li&amp;gt;'&lt;/span&gt;);
           },
           &lt;span style="color: #b5bd68;"&gt;function&lt;/span&gt;(){
             console.log(&lt;span style="color: #8abeb7;"&gt;'&amp;lt;li&amp;gt;NO&amp;lt;/li&amp;gt;'&lt;/span&gt;);
           });
&lt;/p&gt;&lt;/pre&gt;   &lt;p&gt; This is a kind of radical example. I'm only demonstrating the power of new style. I'm not suggesting you should convert any logic statement into function call. New style is not a silver bullet. It's only a useful if used properly in right timing. &lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</description><category>emacs</category><category>en</category><category>html</category><category>javascript</category><category>programming</category><guid>http://blog.binchen.org/posts/how-to-write-javascripthtml-code-quickly.html</guid><pubDate>Wed, 22 May 2013 10:24:00 GMT</pubDate></item><item><title>Notes for js3-mode in emacs</title><link>http://blog.binchen.org/posts/notes-for-js3-mode-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Mark: 3 =&amp;gt; cool, 2 =&amp;gt; useful, 1 =&amp;gt; rarely used &lt;/p&gt;&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt; &lt;colgroup&gt;&lt;col class="left"&gt;&lt;col class="left"&gt;&lt;col class="left"&gt;&lt;col class="right"&gt; &lt;/colgroup&gt; &lt;thead&gt; &lt;tr&gt;&lt;th scope="col" class="left"&gt;Function&lt;/th&gt;&lt;th scope="col" class="left"&gt;Hotkey&lt;/th&gt;&lt;th scope="col" class="left"&gt;Comment&lt;/th&gt;&lt;th scope="col" class="right"&gt;Mark&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td class="left"&gt;js3-mode-toggle-hide-functions&lt;/td&gt;&lt;td class="left"&gt;C-c C-f&lt;/td&gt;&lt;td class="left"&gt;show/hide ALL functions&lt;/td&gt;&lt;td class="right"&gt;2&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;js3-narrow-to-defun&lt;/td&gt;&lt;td class="left"&gt;C-x n d&lt;/td&gt;&lt;td class="left"&gt;(C-x n w to wide)&lt;/td&gt;&lt;td class="right"&gt;3&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;js3-mode-display-warnings-and-errors&lt;/td&gt;&lt;td class="left"&gt;&lt;/td&gt;&lt;td class="left"&gt;&lt;/td&gt;&lt;td class="right"&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;js-toggle-element&lt;/td&gt;&lt;td class="left"&gt;C-c C-o&lt;/td&gt;&lt;td class="left"&gt;show/hide code snippet between {}&lt;/td&gt;&lt;td class="right"&gt;3&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;js3-next-error&lt;/td&gt;&lt;td class="left"&gt;M-g M-n or C-x `&lt;/td&gt;&lt;td class="left"&gt;&lt;/td&gt;&lt;td class="right"&gt;1&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;js3-beginning-of-defun&lt;/td&gt;&lt;td class="left"&gt;&lt;/td&gt;&lt;td class="left"&gt;jump to the beginning of function&lt;/td&gt;&lt;td class="right"&gt;2&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;js3-end-of-defun&lt;/td&gt;&lt;td class="left"&gt;&lt;/td&gt;&lt;td class="left"&gt;jump to the end of function&lt;/td&gt;&lt;td class="right"&gt;2&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;js3-mark-defun&lt;/td&gt;&lt;td class="left"&gt;C-M-h&lt;/td&gt;&lt;td class="left"&gt;Select the function body&lt;/td&gt;&lt;td class="right"&gt;2&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;js3-enter-mirror-mode&lt;/td&gt;&lt;td class="left"&gt;&lt;/td&gt;&lt;td class="left"&gt;Automatically insert [],()…&lt;/td&gt;&lt;td class="right"&gt;2&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;  &lt;/div&gt;</description><category>emacs</category><category>en</category><category>javascript</category><category>js3</category><category>mode</category><guid>http://blog.binchen.org/posts/notes-for-js3-mode-in-emacs.html</guid><pubDate>Fri, 10 Feb 2012 18:21:00 GMT</pubDate></item></channel></rss>