<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog</title><link>http://blog.binchen.org/</link><description>Linux, Programming, Emacs</description><atom:link href="http://blog.binchen.org/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 14 Nov 2019 13:06:47 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Emacs is the best merge tool for Git</title><link>http://blog.binchen.org/posts/emacs-is-the-best-merge-tool-for-git.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
I used to regard vimdiff as the best merge tool for Git because it's simply fast.
&lt;/p&gt;

&lt;p&gt;
Here is the demo how I use vimdiff to resolve conflicts from &lt;a href="https://github.com/redguardtoo/test-git-mergetool"&gt;https://github.com/redguardtoo/test-git-mergetool&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/vimdiff-as-git-merge-tool.gif" alt="vimdiff-as-git-merge-tool.gif"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Please note in the screencast I use Git built in command &lt;a href="https://git-scm.com/docs/git-mergetool"&gt;mergetool&lt;/a&gt;. It will &lt;b&gt;automatically&lt;/b&gt; open conflicted file one by one using vim. In other software, the developer need &lt;b&gt;manually&lt;/b&gt; select and open the conflicted file. 
&lt;/p&gt;

&lt;p&gt;
The only issue is Vim is not as powerful as Emacs.
&lt;/p&gt;

&lt;p&gt;
Resolving conflicts is NOT only picking up a diff hunk from either remote buffer or local buffer. I often need place my hunk into merged buffer first, then I go to remote buffer and copy some snippet into merged buffer. So there are lots of sub-window operations.
&lt;/p&gt;

&lt;p&gt;
In Emacs, I use &lt;a href="https://github.com/abo-abo/ace-window"&gt;Ace-window&lt;/a&gt; and &lt;a href="https://github.com/deb0ch/emacs-winum"&gt;Winum&lt;/a&gt; to move focus between sub-windows.  I also use API &lt;code&gt;window-configuration-to-register&lt;/code&gt; and &lt;code&gt;jump-to-register&lt;/code&gt; to save/load windows layout. Besides, &lt;a href="https://www.gnu.org/software/emacs/manual/html_mono/ediff.html"&gt;Ediff&lt;/a&gt; is a beast to handle diff and patch.
&lt;/p&gt;

&lt;p&gt;
So I give one example to prove why Emacs should be a better merge tool &lt;b&gt;in theory&lt;/b&gt;. If you are good at both Vim and Emacs, you know it's the truth.
&lt;/p&gt;

&lt;p&gt;
Now let's talk the real world problem. And I will show you a perfect solution soon.
&lt;/p&gt;

&lt;p&gt;
The problem is, I never use Emacs to resolve merge conflicts for two reasons:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;First, &lt;a href="https://github.com/redguardtoo/emacs.d"&gt;My Emacs configuration&lt;/a&gt; uses too many packages. It starts up slowly. As you can see from vimdiff demo, &lt;code&gt;git mergetool&lt;/code&gt; restarts the editor many times. So the editor should be lightweight.&lt;/li&gt;
&lt;li&gt;Second, the UI of &lt;code&gt;ediff&lt;/code&gt; is not right. UI of Vimdiff is much better. All operations should be completed freely in any sub-window instead of ediff control panel only.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Luckily, Emacs gives me the full freedom to solve the problem. The final result is beyond my expectation.
&lt;/p&gt;

&lt;p&gt;
Here is the complete solution.
&lt;/p&gt;

&lt;div id="outline-container-org3656241" class="outline-2"&gt;

&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This technique is only useful for &lt;code&gt;git mergetool&lt;/code&gt; because git will open and close the text editor Emacs many times.
&lt;/p&gt;

&lt;p&gt;
Insert below code into &lt;code&gt;~/.gitconfig&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-conf"&gt;[mergetool.ediff]
# use git mergetool ediff to resolve conflicts
cmd = emacs -nw -Q --eval \"(setq startup-now t)\" -l \"~/.emacs.d/init.el\" --eval \"(progn (setq ediff-quit-hook 'kill-emacs) (if (file-readable-p \\\"$BASE\\\") (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\") (ediff-merge-files \\\"$LOCAL\\\" \\\"$REMOTE\\\" nil \\\"$MERGED\\\")))\"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
In above code, option &lt;code&gt;-Q&lt;/code&gt; equals &lt;code&gt;-q --no-site-file --no-splash&lt;/code&gt;. Actually, only &lt;code&gt;-q&lt;/code&gt; is critical. &lt;code&gt;-q&lt;/code&gt; means "Do not load an init file". A global emacs lisp flag &lt;code&gt;startup-now&lt;/code&gt; is defined before loading &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Then in &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;, I need only add one line,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(when (not (boundp 'startup-now))
  ;; heavy weight configuration happens here
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
When &lt;code&gt;startup-now&lt;/code&gt; is defined, all the heavyweight configuration should be off. Considering in this scenario, we are using Emacs only as merge tool, 99% configuration could be turned off. For example, set up for any programming language is not required. Flyspell and flycheck should be off. Yasnippet is also useless. 
&lt;/p&gt;

&lt;p&gt;
I only need focus on essential operations related to text/file/window.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://github.com/emacs-evil/evil"&gt;Evil&lt;/a&gt; should be used. At the beginning of this article, I said "I love vimdiff because it's fast". It's impossible to be more efficient without Evil.
&lt;/p&gt;

&lt;p&gt;
Any patch/diff utilities should be included too. &lt;a href="https://github.com/abo-abo/swiper"&gt;counsel/swiper/ivy&lt;/a&gt; is also must have because I can use &lt;code&gt;counsel-git&lt;/code&gt; to find file and &lt;code&gt;counsel-git-grep&lt;/code&gt; to grep text.
&lt;/p&gt;

&lt;p&gt;
Native Emacs API is enough to save/load windows layout.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org47e5326" class="outline-2"&gt;

&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Packages dependent on ediff (&lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt;?) could also benefit from optimization of ediff.
&lt;/p&gt;

&lt;p&gt;
The optimization is simple. Do everything in merged buffer.
&lt;/p&gt;

&lt;p&gt;
First I move focus into merged buffer when Emacs starts up,
&lt;/p&gt;

&lt;p&gt;
This set up happens in &lt;code&gt;ediff-startup-hook&lt;/code&gt;, 
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun ediff-startup-hook-setup ()
  ;; hide control panel if it's current buffer
  (when (string-match-p (setq my-ediff-panel-name (buffer-name))
                        "\*Ediff Control Panel.*\*")
    ;; move to the first difference
    (ediff-next-difference)
    ;; move to the merged buffer window
    (winum-select-window-by-number 3)
    ;; save the windows layout
    (window-configuration-to-register ?a)))

(add-hook 'ediff-startup-hook 'ediff-startup-hook-setup)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;
Please note I use &lt;code&gt;winum-select-window-by-number&lt;/code&gt; from &lt;code&gt;winum&lt;/code&gt; move focus to merged buffer. You can use any other third party package or native API &lt;code&gt;select-window&lt;/code&gt; instead.
&lt;/p&gt;

&lt;p&gt;
Saving initial windows layout into register &lt;code&gt;a&lt;/code&gt; is achieved by &lt;code&gt;(window-configuration-to-register ?a)&lt;/code&gt; in &lt;code&gt;ediff-startup-hook&lt;/code&gt;. &lt;code&gt;(jump-to-register ?a)&lt;/code&gt; restores the saved layout.
&lt;/p&gt;

&lt;p&gt;
Then we need make sure ediff commands can be used out of ediff's panel. Currently ediff command can only be triggered inside of its panel.
&lt;/p&gt;

&lt;p&gt;
The trick is "move focus into ediff panel temporarily to execute its commands, then move focus back to original window".
&lt;/p&gt;

&lt;p&gt;
So I designed a macro &lt;code&gt;my-ediff-command&lt;/code&gt; to do this,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defmacro my-ediff-command (cmd &amp;amp;optional no-arg)
  `(lambda (&amp;amp;optional arg)
     (interactive "P")
     (let* ((w (get-buffer-window)))
       ;; go to panel window
       (select-window (get-buffer-window my-ediff-panel-name))
       ;; execute ediff command, ignore any error
       (condition-case e
           (if ,no-arg (funcall ,cmd) (funcall ,cmd arg))
         (error
          (message "%s" (error-message-string e))))
       ;; back to original window
       (select-window w))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Usage is simple,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(global-set-key (kbd "C-c C-y") (my-ediff-command 'ediff-next-difference))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Here is the list of essential ediff commands,
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;ediff-next-difference&lt;/li&gt;
&lt;li&gt;ediff-previous-difference&lt;/li&gt;
&lt;li&gt;ediff-restore-diff-in-merge-buffer&lt;/li&gt;
&lt;li&gt;ediff-revert-buffers-then-recompute-diffs&lt;/li&gt;
&lt;li&gt;ediff-copy-A-to-C&lt;/li&gt;
&lt;li&gt;ediff-copy-A-to-C&lt;/li&gt;
&lt;li&gt;ediff-copy-both-to-C&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
You can use &lt;a href="https://github.com/abo-abo/hydra"&gt;Hyra&lt;/a&gt; or &lt;a href="https://github.com/noctuid/general.el"&gt;General.el&lt;/a&gt; to assign key bindings.
&lt;/p&gt;

&lt;p&gt;
The definition of &lt;code&gt;ediff-copy-both-to-C&lt;/code&gt;,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;;; @see https://stackoverflow.com/a/29757750/245363
(defun ediff-copy-both-to-C (&amp;amp;optional arg)
  "Copy code from both A and B to C."
  (interactive)
  (ediff-copy-diff ediff-current-difference nil 'C nil
                   (concat
                    (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                    (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Here is &lt;a href="https://gist.github.com/redguardtoo/d4ecd51f785bd117a6a0"&gt;my ~/.gitconfig&lt;/a&gt; and &lt;a href="https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-ediff.el"&gt;my ediff set up&lt;/a&gt; in real world.
&lt;/p&gt;

&lt;p&gt;
Please note the techniques introduced here &lt;b&gt;can be used with other VCS (subversion, perforce …)&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Demo on using Emacs to resolve merge conflicts,
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/emacs-as-git-merge-tool.gif" alt="emacs-as-git-merge-tool.gif"&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>http://blog.binchen.org/posts/emacs-is-the-best-merge-tool-for-git.html</guid><pubDate>Wed, 13 Nov 2019 13:29:46 GMT</pubDate></item><item><title>counsel-etags 1.9.0 is out</title><link>http://blog.binchen.org/posts/counsel-etags-1-9-0-is-out.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://github.com/redguardtoo/counsel-etags"&gt;Counsel-etags&lt;/a&gt; is fast, energy-saving, and powerful code navigation solution.
&lt;/p&gt;

&lt;p&gt;
This version can list tags in current buffer.
&lt;/p&gt;

&lt;p&gt;
You can simply run &lt;code&gt;M-x counsel-etags-list-tag-in-current-file&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Or set up imenu before &lt;code&gt;M-x imenu&lt;/code&gt; or &lt;code&gt;M-x helm-imenu&lt;/code&gt; or &lt;code&gt;M-x counsel-imenu&lt;/code&gt;, 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(setq imenu-create-index-function 'counsel-etags-imenu-default-create-index-function)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
screenshot:
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/counsel-etags-imenu.png" alt="counsel-etags-imenu.png"&gt;
&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>http://blog.binchen.org/posts/counsel-etags-1-9-0-is-out.html</guid><pubDate>Sun, 27 Oct 2019 12:38:05 GMT</pubDate></item><item><title>Aspell 0.60.8 will have direct support for camelCase words</title><link>http://blog.binchen.org/posts/aspell-0-60-8-will-have-direct-support-for-camelcase-words.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://github.com/redguardtoo/emacs.d/issues/796"&gt;Kevin Atkinso&lt;/a&gt; told me this good news.
&lt;/p&gt;

&lt;p&gt;
Currently I'm using &lt;a href="https://github.com/redguardtoo/wucuo"&gt;Emacs Lisp&lt;/a&gt; to check camel case words.
&lt;/p&gt;

&lt;p&gt;
The new option &lt;code&gt;--camel-case&lt;/code&gt; from aspell will definitely speed up the whole process.
&lt;/p&gt;

&lt;p&gt;
Minimum Emacs setup,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(setq ispell-program-name "aspell")
(setq-default ispell-extra-args '("--sug-mode=ultra"
                                  "--lang=en_US"))
;; Make sure new aspell is installed
(when (string-match-p "--camel-case"
                      (shell-command-to-string (concat ispell-program-name " --help")))
  (push "--camel-case" ispell-extra-args))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Optionally, you could read &lt;a href="http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html"&gt;What's the best spell check setup in emacs&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>aspell</category><category>emacs</category><category>en</category><guid>http://blog.binchen.org/posts/aspell-0-60-8-will-have-direct-support-for-camelcase-words.html</guid><pubDate>Sun, 01 Sep 2019 13:13:35 GMT</pubDate></item><item><title>Javascript code navigation in counsel-etags</title><link>http://blog.binchen.org/posts/javascript-code-navigation-in-counsel-etags.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
Javascript code navigation is supported by &lt;a href="https://github.com/redguardtoo/counsel-etags"&gt;counsel-etags&lt;/a&gt; out of box.
&lt;/p&gt;

&lt;p&gt;
It can support new javascript syntax like arrow function easily because &lt;code&gt;counsel-etags&lt;/code&gt; is just frontend.
&lt;/p&gt;

&lt;p&gt;
It reads tags file created by backend CLI program &lt;a href="https://github.com/universal-ctags/ctags"&gt;Ctags&lt;/a&gt;. Ctags uses regular expression to extract tag name from source code.
&lt;/p&gt;

&lt;p&gt;
But there are some syntax which regular expression could not help.
&lt;/p&gt;

&lt;p&gt;
For example, json object path can't be extracted by regular expression.
&lt;/p&gt;

&lt;p&gt;
Given an object &lt;code&gt;a&lt;/code&gt; in file A,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-javascript"&gt;var a = {
  b: {
    c: 3,
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
File B has code &lt;code&gt;let v1 = a.b.c;&lt;/code&gt;, how can we jump to the definition of the field &lt;code&gt;c&lt;/code&gt; from json path &lt;code&gt;a.b.c&lt;/code&gt;?
&lt;/p&gt;

&lt;p&gt;
The solution is to use Lisp to parse code in file A and generate extra navigation data which could be appended to tags file generated by Ctags.
&lt;/p&gt;

&lt;p&gt;
The algorithm is simple,
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Traverse all the field of object &lt;code&gt;a&lt;/code&gt; in file A. Use API &lt;code&gt;js2-print-json-path&lt;/code&gt; from &lt;code&gt;js2-mode&lt;/code&gt; to get json path of current field.&lt;/li&gt;
&lt;li&gt;The json path could be regarded as tags name. We've already got file name and line number. So there is enough information to create navigation data for tags file. Here is &lt;a href="https://en.wikipedia.org/wiki/Ctags"&gt;tags file format&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Necessary utilities are already provided by &lt;code&gt;counsel-etags v1.8.7&lt;/code&gt;,
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;After tags files is generated by Ctags, the hook &lt;code&gt;counsel-etags-after-update-tags-hook&lt;/code&gt; is executed. Users can append tags file in this hook&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(counsel-etags-tag-line code-snippet tag-name line-number byte-offset)&lt;/code&gt; return a line which could be appended into tags file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
My current project uses a technology called &lt;a href="https://www.styled-components.com/docs/basics"&gt;styled-components&lt;/a&gt; which has an advanced feature &lt;a href="https://www.styled-components.com/docs/advanced#theming"&gt;theming&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It could dynamically change web application's appearance and is a critical technology for our application to support multiple customer. Application's theme is basically a file containing a huge json object. So it's important that developers can jump to the corresponding json object's field by json path.
&lt;/p&gt;

&lt;div id="outline-container-orgd712ba7" class="outline-2"&gt;
&lt;h3 id="orgd712ba7"&gt;Screencast&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgd712ba7"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/counsel-etags-plus-json-path.gif" alt="counsel-etags-plus-json-path.gif"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org87cedd5" class="outline-2"&gt;
&lt;h3 id="org87cedd5"&gt;Code&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org87cedd5"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(require 'counsel-etags)

(defun my-manual-update-tag-file (code-file tags-file)
  (let* ((dir (file-name-directory tags-file))
         (path (concat dir code-file))
         curline
         jp
         tagstr)
    (unless (featurep 'js2-mode) (require 'js2-mode))
    (with-temp-buffer
      (insert-file-contents path)
      (js2-init-scanner)
      (js2-do-parse)
      (goto-char (point-min))
      ;; find all js object property names
      (while (re-search-forward "\"?[a-z][a-zA-Z0-9]*\"?:" (point-max) t)
        (when (setq jp (js2-print-json-path))
          (setq curline (string-trim (buffer-substring-no-properties (line-beginning-position)
                                                                     (line-end-position))))
          (setq tagstr (concat tagstr
                               (counsel-etags-tag-line curline
                                                       jp
                                                       (count-lines 1 (point))
                                                       (point)))))
        ;; move focus to next search
        (goto-char (line-end-position))))
    (when tagstr
      (with-temp-buffer
        (insert-file-contents tags-file)
        (goto-char (line-end-position))
        (insert (format "\n\014\n%s,%d\n%s" code-file 0 tagstr))
        (write-region (point-min) (point-max) tags-file nil :silent)))))

(defun counsel-etags-after-update-tags-hook-setup (tags-file)
    (my-manual-update-tag-file "frontend/theming/themes/darkTheme.js" tags-file)
    (my-manual-update-tag-file "frontend/theming/themes/lightTheme.js" tags-file))
(add-hook 'counsel-etags-after-update-tags-hook 'counsel-etags-after-update-tags-hook-setup)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>etags</category><category>javascript</category><guid>http://blog.binchen.org/posts/javascript-code-navigation-in-counsel-etags.html</guid><pubDate>Mon, 22 Jul 2019 12:07:16 GMT</pubDate></item><item><title>dianyou 0.0.3 is out</title><link>http://blog.binchen.org/posts/dianyou-0-0-3-is-out.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
I created &lt;a href="https://github.com/redguardtoo/dianyou"&gt;dianyou&lt;/a&gt; (电邮) to solve improve my Gnus work flow.
&lt;/p&gt;

&lt;div id="outline-container-orgb950970" class="outline-2"&gt;
&lt;h3 id="orgb950970"&gt;Search mails&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgb950970"&gt;
&lt;p&gt;
Most Gnus users use &lt;code&gt;gnus-group-make-nnir-group&lt;/code&gt; to search mails. But it's not usable in "Summary Buffer". Its &lt;a href="https://tools.ietf.org/html/rfc3501#section-6.4.4"&gt;IMAP SEARCH Command&lt;/a&gt; is hard to use.
&lt;/p&gt;

&lt;p&gt;
It could be replaced by &lt;code&gt;dianyou-group-make-nnir-group&lt;/code&gt; which supports shortcuts. For example, you can input "f John s 1y2w2d" and select "imap" when Gnus asks the question "Imap Search in". It means search mails from John since 1 year, 2 weeks and 2 days ago.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2e26a49" class="outline-2"&gt;
&lt;h3 id="org2e26a49"&gt;Auto complete email address&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org2e26a49"&gt;
&lt;p&gt;
I'm too lazy to set up my contacts. It would be better that Gnus could &lt;b&gt;automatically&lt;/b&gt; collect email addresses from all received mails. So I created the command &lt;code&gt;dianyou-insert-email-address-from-received-mails&lt;/code&gt;. The inserted email address is also inserted into the global variable &lt;code&gt;dianyou-email-address-history&lt;/code&gt; which could be persisted by &lt;a href="https://github.com/jwiegley/session"&gt;session&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgff2ad17" class="outline-2"&gt;
&lt;h3 id="orgff2ad17"&gt;Switch Gnus buffer&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-orgff2ad17"&gt;
&lt;p&gt;
One annoying thing in Gnus is pressing "q" will close opened folder. I often pressed "q" when I only intended to switch to another Gnus buffer. Now I can use &lt;code&gt;dianyou-switch-gnus-buffer&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org744c946" class="outline-2"&gt;
&lt;h3 id="org744c946"&gt;Paste image from clipboard&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-org744c946"&gt;
&lt;p&gt;
Use &lt;code&gt;dianyou-paste-image-from-clipboard&lt;/code&gt;. CLI program &lt;a href="https://github.com/astrand/xclip"&gt;xclip&lt;/a&gt; should be installed at first.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>email</category><category>en</category><category>gnus</category><guid>http://blog.binchen.org/posts/dianyou-0-0-3-is-out.html</guid><pubDate>Tue, 04 Jun 2019 12:54:48 GMT</pubDate></item><item><title>My favorite Richard Stallman interviews</title><link>http://blog.binchen.org/posts/my-favourite-richard-stallman-interviews.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
I've watched/listened many Richard Stallman interviews. Some hosts are really bad. They know nothing about technology and are too aggressive.
&lt;/p&gt;

&lt;p&gt;
But good interviewers still exist. Here are top 3 interviews I recommend:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://hackerpublicradio.org/eps.php?id=1116"&gt;Interview with Richard Stallman&lt;/a&gt; from Hacker Public Radio. The interviewer is technical by himself so he can ask right questions and understand answers immediately.&lt;/li&gt;

&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NB8mCcLRxlg"&gt;Richard Stallman on Free Software: Freedom is Worth the Inconvenience&lt;/a&gt; from Singularity Weblog. Nikola Danaylov focus more on ethic perspective of technology.&lt;/li&gt;

&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JQbrQTc3jxM"&gt;Dr Diane Hamilton Interviews Richard Stallman&lt;/a&gt;. Diane Hamilton is good listener and just let Richard Stallman talk. Stallman quoted text from Chinese ancient novel San Guo (Three Kingdom) in the interview.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>gnu</category><guid>http://blog.binchen.org/posts/my-favourite-richard-stallman-interviews.html</guid><pubDate>Mon, 13 May 2019 14:33:32 GMT</pubDate></item><item><title>Enhance Emacs Evil global markers</title><link>http://blog.binchen.org/posts/enhance-emacs-evil-global-markers.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
Global evil marker is saved in &lt;code&gt;evil-global-markers-history&lt;/code&gt; by &lt;a href="https://github.com/jwiegley/session"&gt;session.el&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Insert below code int &lt;code&gt;~/.emacs&lt;/code&gt;,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defvar evil-global-markers-history nil)
(defun my-forward-line (lnum)
  "Forward LNUM lines."
  (setq lnum (string-to-number lnum))
  (when (and lnum (&amp;gt; lnum 0))
    (goto-char (point-min))
    (forward-line (1- lnum))))

(defadvice evil-set-marker (before evil-set-marker-before-hack activate)
  (let* ((args (ad-get-args 0))
         (c (nth 0 args))
         (pos (or (nth 1 args) (point))))
    ;; only rememeber global markers
    (when (and (&amp;gt;= c ?A) (&amp;lt;= c ?Z) buffer-file-name)
      (setq evil-global-markers-history
            (delq nil
                  (mapcar `(lambda (e)
                             (unless (string-match (format "^%s@" (char-to-string ,c)) e)
                               e))
                          evil-global-markers-history)))
      (setq evil-global-markers-history
            (add-to-list 'evil-global-markers-history
                         (format "%s@%s:%d:%s"
                                 (char-to-string c)
                                 (file-truename buffer-file-name)
                                 (line-number-at-pos pos)
                                 (string-trim (buffer-substring-no-properties (line-beginning-position)
                                                                              (line-end-position)))))))))

(defadvice evil-goto-mark-line (around evil-goto-mark-line-hack activate)
  (let* ((args (ad-get-args 0))
         (c (nth 0 args))
         (orig-pos (point)))

    (condition-case nil
        ad-do-it
      (error (progn
               (when (and (eq orig-pos (point)) evil-global-markers-history)
                 (let* ((markers evil-global-markers-history)
                        (i 0)
                        m
                        file
                        found)
                   (while (and (not found) (&amp;lt; i (length markers)))
                     (setq m (nth i markers))
                     (when (string-match (format "\\`%s@\\(.*?\\):\\([0-9]+\\):\\(.*\\)\\'"
                                                 (char-to-string c))
                                         m)
                       (setq file (match-string-no-properties 1 m))
                       (setq found (match-string-no-properties 2 m)))
                     (setq i (1+ i)))
                   (when file
                     (find-file file)
                     (my-forward-line found)))))))))

(defun counsel-evil-goto-global-marker ()
  "Goto global evil marker."
  (interactive)
  (unless (featurep 'ivy) (require 'ivy))
  (ivy-read "Goto global evil marker"
            evil-global-markers-history
            :action (lambda (m)
                      (when (string-match "\\`[A-Z]@\\(.*?\\):\\([0-9]+\\):\\(.*\\)\\'" m)
                        (let* ((file (match-string-no-properties 1 m))
                               (linenum (match-string-no-properties 2 m)))
                          (find-file file)
                          (my-forward-line linenum))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;evil-goto-mark-line&lt;/code&gt; will access marker in &lt;code&gt;evil-global-markers-history&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>evil</category><guid>http://blog.binchen.org/posts/enhance-emacs-evil-global-markers.html</guid><pubDate>Mon, 08 Apr 2019 13:00:53 GMT</pubDate></item><item><title>Steps to install Emacs 27 for testing</title><link>http://blog.binchen.org/posts/wucuo-a-emacs-spell-checker-that-works-with-camel-case-code.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
The Emacs is not for daily usage. Only for testing.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-bash"&gt;sudo apt install built-essential automake autoconf texinfo # optional if they are already installed
git clone https://git.savannah.gnu.org/git/emacs.git
cd emacs &amp;amp;&amp;amp; ./configure CFLAGS=-no-pie --without-x --without-dbus --without-sound --with-gnutls=no &amp;amp;&amp;amp; make
src/emacs # start emacs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><guid>http://blog.binchen.org/posts/wucuo-a-emacs-spell-checker-that-works-with-camel-case-code.html</guid><pubDate>Fri, 07 Sep 2018 12:39:54 GMT</pubDate></item><item><title>How to spell check function/variable in Emacs</title><link>http://blog.binchen.org/posts/how-to-spell-check-functionvariable-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2018-06-17 Sun&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2019-04-04 Thu&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://blog.binchen.org/posts/effective-spell-check-in-emacs.html"&gt;This article&lt;/a&gt; explains how to spell check camel cased names of functions and variables in Emacs. It uses options &lt;code&gt;--run-together&lt;/code&gt; from &lt;a href="http://aspell.net/"&gt;GNU Aspell&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
But this solution is not perfect. It wrongly identifies two character sub-word as typo. For example, "onChange" is regarded as typo because the sub-word "on" is identified as typo. Another issue is namespace of function name. For example, "MS" from "MSToggleButton" is alias of "Microsoft". If "MS" is identified as typo, every word containing "MS" is regarded as typo.
&lt;/p&gt;

&lt;p&gt;
In this article,
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;I will explain &lt;b&gt;how Emacs spell checker works&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Then we study the &lt;b&gt;algorithm of aspell&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Finally, &lt;b&gt;a complete solution&lt;/b&gt; which works with &lt;b&gt;both aspell and hunspell&lt;/b&gt; is provided&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Emacs built in plugin &lt;a href="https://www.emacswiki.org/emacs/FlySpell"&gt;Fly Spell&lt;/a&gt; does spell checking. It passes the options and plain text to command line tool aspell. Aspell sends back the typos into &lt;code&gt;Fly Spell&lt;/code&gt;. &lt;code&gt;Fly Spell&lt;/code&gt; then picks up typos to display. For example, &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html"&gt;flyspell-prog-mode&lt;/a&gt; only displays typos in comments and strings.
&lt;/p&gt;

&lt;p&gt;
Aspell doesn't understand syntax of any programming language. It simply reports typos in plain text.
&lt;/p&gt;

&lt;p&gt;
Aspell has two options:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;--run-together-limit&lt;/code&gt; is "Maximum number of words can be strung together"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--run-together-min&lt;/code&gt; is "Minimal length of sub-words"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Aspell C++ code has to be studied in order to understand above two options. Let's start from &lt;code&gt;Working::check_word&lt;/code&gt; in &lt;code&gt;modules/speller/default/suggest.cpp&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Here is code,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-c"&gt;class Working : public Score {
  unsigned check_word(char * word, char * word_end, CheckInfo * ci, unsigned pos = 1);
};
unsigned Working::check_word(char * word, char * word_end,  CheckInfo * ci,
                             /* it WILL modify word */
                             unsigned pos)
{
  // check the whole word before go into run-together mode
  unsigned res = check_word_s(word, ci);
  // if `res` is true, it's a valid word, don't bother run-together
  if (res) return pos + 1;
  // it's typo because number of sub-words is greater than "--run-together-limit"
  if (pos + 1 &amp;gt;= sp-&amp;gt;run_together_limit_) return 0;

  // `i` is the `end` of sub-word, the poition AFTER last character of sub-word
  for (char * i = word + sp-&amp;gt;run_together_min_; 
       // already checked the whole word; besides, any sub-word whose size is less 
       // than "--run-together-min" is regarded as invalid
       i &amp;lt;= word_end - sp-&amp;gt;run_together_min_;
       ++i)
  {
    char t = *i;

    // read the sub-word by set the character at `end` position to '\0'
    *i = '\0';
    res = check_word_s(word, ci);
    // restore original character at `end` position
    *i = t;

    // Current sub-word is invalid, we need append the character at current
    //  `end` position to creata new sub-word.
    //  Inncrement `i` because `i` always points to the `end` of sub-word
    if (!res) continue;

    // Current sub-word is valid, strip it from the whole word to create a totally
    // new word for `check_word`, `check_word` is a recursive function
    res = check_word(i, word_end, ci + 1, pos + 1);
    if (res) return res;
  }
  memset(ci, 0, sizeof(CheckInfo));
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Say first parameter of &lt;code&gt;check_word&lt;/code&gt; is "hisHelle",
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;word&lt;/code&gt; points to string "hisHelle" (in C/C++, string is character array. The last character of array is character &lt;code&gt;'\0'&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sp-&amp;gt;run_together_min_&lt;/code&gt; is 3, so &lt;code&gt;i&lt;/code&gt; initially points to the character "H", at the end of sub-word "his"&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_word_s&lt;/code&gt; return &lt;code&gt;true&lt;/code&gt; for sub-word "his"&lt;/li&gt;
&lt;li&gt;So we strip "his" from "hisHelle" and recursively call &lt;code&gt;check_word&lt;/code&gt; to check new word "Helle"&lt;/li&gt;
&lt;li&gt;In the new context of &lt;code&gt;check_word&lt;/code&gt;, we extract "Hel" from "Helle" initially&lt;/li&gt;
&lt;li&gt;"Hel" is invalid. So "Hell" is extracted from "Helle". The remaining charcter "e" is a treated as as new word with &lt;code&gt;check_word&lt;/code&gt; recursively applying on it&lt;/li&gt;
&lt;li&gt;"e" is not valid It's the last word could be extracted. So recursion is over. It's concluded that "hisHelle" is a typo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Key points:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;--run-together-limit&lt;/code&gt; could be bigger with enough memory. It's default value is 8. I prefer 16.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--run-together-min&lt;/code&gt; can't be 2 because too many typos are combination of "correct" two character sub-words ("hehe", "isme", …)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--run-together-min&lt;/code&gt; can't be greater than 3, or else, too many "correct" three character sub-words are regarded as invalid ("his", "her", "one", "two")&lt;/li&gt;
&lt;li&gt;So &lt;code&gt;--run-together-min&lt;/code&gt; &lt;b&gt;should always be 3&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
If &lt;code&gt;--run-together-min&lt;/code&gt; is 3, the word "onChange" is typo because the first two characters "on" is typo by aspell. This is obviously wrong.
&lt;/p&gt;

&lt;p&gt;
The solution is a Emacs Lisp predicate which supports &lt;b&gt;both aspell and hunspell&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
A predicate could be attached to specific major-mode. The predicate file all the typos reported by CLI program. If predicate returns  &lt;code&gt;t&lt;/code&gt;, the feed in typo is finally approved to be typo,
&lt;/p&gt;

&lt;p&gt;
A example of predicate for &lt;code&gt;js2-mode&lt;/code&gt;,
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun js-flyspell-verify ()
  (let* ((font-face (get-text-property (- (point) 1) 'face))
         (word (thing-at-point 'word)))
    (message "font-face=%s word=%s" font-face word)
    t))
(put 'js2-mode 'flyspell-mode-predicate 'js-flyspell-verify)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Typo candidates are filtered by &lt;code&gt;js-flyspell-verify&lt;/code&gt;. So predicate is where to fix typos wrongly reported by CLI program.
&lt;/p&gt;

&lt;p&gt;
Here is complete setup you can paste into &lt;code&gt;.emacs&lt;/code&gt; (I setup for &lt;code&gt;js2-mode&lt;/code&gt; and &lt;code&gt;rjsx-mode&lt;/code&gt; but code is generic enough).
&lt;/p&gt;

&lt;p&gt;
Please note function &lt;code&gt;split-camel-case&lt;/code&gt; splits a camel case word into a list of sub-words. Sub-word with less one or two characters is not typo.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(defun split-camel-case (word)
  "Split camel case WORD into a list of strings.
Ported from 'https://github.com/fatih/camelcase/blob/master/camelcase.go'."
  (let* ((case-fold-search nil)
         (len (length word))
         ;; ten sub-words is enough
         (runes [nil nil nil nil nil nil nil nil nil nil])
         (runes-length 0)
         (i 0)
         ch
         (last-class 0)
         (class 0)
         rlt)

    ;; split into fields based on class of character
    (while (&amp;lt; i len)
      (setq ch (elt word i))
      (cond
       ;; lower case
       ((and (&amp;gt;= ch ?a) (&amp;lt;= ch ?z))
        (setq class 1))
       ;; upper case
       ((and (&amp;gt;= ch ?A) (&amp;lt;= ch ?Z))
        (setq class 2))
       ((and (&amp;gt;= ch ?0) (&amp;lt;= ch ?9))
        (setq class 3))
       (t
        (setq class 4)))

      (cond
       ((= class last-class)
        (aset runes
              (1- runes-length)
              (concat (aref runes (1- runes-length)) (char-to-string ch))))
       (t
        (aset runes runes-length (char-to-string ch))
        (setq runes-length (1+ runes-length))))
      (setq last-class class)
      ;; end of while
      (setq i (1+ i)))

    ;; handle upper case -&amp;gt; lower case sequences, e.g.
    ;;     "PDFL", "oader" -&amp;gt; "PDF", "Loader"
    (setq i 0)
    (while (&amp;lt; i (1- runes-length))
      (let* ((ch-first (aref (aref runes i) 0))
             (ch-second (aref (aref runes (1+ i)) 0)))
        (when (and (and (&amp;gt;= ch-first ?A) (&amp;lt;= ch-first ?Z))
                   (and (&amp;gt;= ch-second ?a) (&amp;lt;= ch-second ?z)))
          (aset runes (1+ i) (concat (substring (aref runes i) -1) (aref runes (1+ i))))
          (aset runes i (substring (aref runes i) 0 -1))))
      (setq i (1+ i)))

    ;; construct final result
    (setq i 0)
    (while (&amp;lt; i runes-length)
      (when (&amp;gt; (length (aref runes i)) 0)
        (setq rlt (add-to-list 'rlt (aref runes i) t)))
      (setq i (1+ i)))
     rlt))

(defun flyspell-detect-ispell-args (&amp;amp;optional run-together)
  "If RUN-TOGETHER is true, spell check the CamelCase words.
Please note RUN-TOGETHER will make aspell less capable. So it should only be used in prog-mode-hook."
  ;; force the English dictionary, support Camel Case spelling check (tested with aspell 0.6)
  (let* ((args (list "--sug-mode=ultra" "--lang=en_US"))args)
    (if run-together
        (setq args (append args '("--run-together" "--run-together-limit=16"))))
    args))

;; {{ for aspell only, hunspell does not need setup `ispell-extra-args'
(setq ispell-program-name "aspell")
(setq-default ispell-extra-args (flyspell-detect-ispell-args t))
;; }}

;; ;; {{ hunspell setup, please note we use dictionary "en_US" here
;; (setq ispell-program-name "hunspell")
;; (setq ispell-local-dictionary "en_US")
;; (setq ispell-local-dictionary-alist
;;       '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
;; ;; }}

(defvar extra-flyspell-predicate '(lambda (word) t)
  "A callback to check WORD.  Return t if WORD is typo.")

(defun my-flyspell-predicate (word)
  "Use aspell to check WORD.  If it's typo return t."
  (let* ((cmd (cond
               ;; aspell: `echo "helle world" | aspell pipe`
               ((string-match-p "aspell$" ispell-program-name)
                (format "echo \"%s\" | %s pipe"
                        word
                        ispell-program-name))
               ;; hunspell: `echo "helle world" | hunspell -a -d en_US`
               (t
                (format "echo \"%s\" | %s -a -d en_US"
                        word
                        ispell-program-name))))
         (cmd-output (shell-command-to-string cmd))
         rlt)
    ;; (message "word=%s cmd=%s" word cmd)
    ;; (message "cmd-output=%s" cmd-output)
    (cond
     ((string-match-p "^&amp;amp;" cmd-output)
      ;; it's a typo because at least one sub-word is typo
      (setq rlt t))
     (t
      ;; not a typo
      (setq rlt nil)))
    rlt))

(defun js-flyspell-verify ()
  (let* ((case-fold-search nil)
         (font-matched (memq (get-text-property (- (point) 1) 'face)
                             '(js2-function-call
                               js2-function-param
                               js2-object-property
                               js2-object-property-access
                               font-lock-variable-name-face
                               font-lock-string-face
                               font-lock-function-name-face
                               font-lock-builtin-face
                               rjsx-text
                               rjsx-tag
                               rjsx-attr)))
         subwords
         word
         (rlt t))
    (cond
     ((not font-matched)
      (setq rlt nil))
     ;; ignore two character word
     ((&amp;lt; (length (setq word (thing-at-point 'word))) 2)
      (setq rlt nil))
     ;; handle camel case word
     ((and (setq subwords (split-camel-case word)) (&amp;gt; (length subwords) 1))
      (let* ((s (mapconcat (lambda (w)
                             (cond
                              ;; sub-word wholse length is less than three
                              ((&amp;lt; (length w) 3)
                               "")
                               ;; special characters
                              ((not (string-match-p "^[a-zA-Z]*$" w))
                               "")
                              (t
                               w))) subwords " ")))
        (setq rlt (my-flyspell-predicate s))))
     (t
      (setq rlt (funcall extra-flyspell-predicate word))))
    rlt))

(put 'js2-mode 'flyspell-mode-predicate 'js-flyspell-verify)
(put 'rjsx-mode 'flyspell-mode-predicate 'js-flyspell-verify)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;UPDATE:&lt;/b&gt;
Now you can use &lt;a href="https://github.com/redguardtoo/wucuo"&gt;wucuo&lt;/a&gt;. It's an out of box solution supporting both aspell and hunspell.&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>flyspell</category><guid>http://blog.binchen.org/posts/how-to-spell-check-functionvariable-in-emacs.html</guid><pubDate>Sun, 17 Jun 2018 03:16:41 GMT</pubDate></item><item><title>Use Imenu to list comments in current buffer</title><link>http://blog.binchen.org/posts/use-imenu-to-list-comments-in-current-buffer.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;a href="https://github.com/redguardtoo/evil-nerd-commenter"&gt;evil-nerd-commenter&lt;/a&gt; v3.2.0 has a new function &lt;code&gt;evilnc-imenu-create-index-function&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://www.gnu.org/s/emacs/manual/html_node/emacs/Imenu.html"&gt;Imenu&lt;/a&gt; could use this function to list all comments in current file.
&lt;/p&gt;

&lt;p&gt;
Usage:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-lisp"&gt;(require 'counsel)
(defun counsel-imenu-comments ()
  "Imenu display comments."
  (interactive)
  (let* ((imenu-create-index-function 'evilnc-imenu-create-index-function))
    (counsel-imenu)))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Screen cast:
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://blog.binchen.org/wp-content/counsel-imenu-comments.gif" alt="counsel-imenu-comments.gif"&gt;
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>imenu</category><guid>http://blog.binchen.org/posts/use-imenu-to-list-comments-in-current-buffer.html</guid><pubDate>Sun, 08 Apr 2018 02:12:04 GMT</pubDate></item></channel></rss>