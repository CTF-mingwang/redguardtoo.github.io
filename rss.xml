<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Chen's blog</title><link>http://blog.binchen.org/</link><description>Linux, Programming, Emacs</description><atom:link href="http://blog.binchen.org/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sat, 31 Jan 2015 14:43:16 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Migrate blog from wordpress into nikola</title><link>http://blog.binchen.org/posts/migrate-blog-from-wordpress-into-nikola.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;
UPDATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2015-01-31 Sat&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
CREATED: &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2014-04-22&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;
Here are the steps. Tested on Cygwin/Mac/Linux.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h3 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Requirements&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;
# install python2 and make sure sqlite is supported
sudo USE="sqlite" emerge -a =python-2* # Gentoo Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Make sure gcc libxslt-devel libxml2-devel zlib-devel installed, especially on cygwin.
See &lt;a href="http://getnikola.com/handbook.html#libxml-libxslt-files-missing-errors"&gt;http://getnikola.com/handbook.html#libxml-libxslt-files-missing-errors&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h3 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Install&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h4 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; Install Nikola&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Please note the package "requests" is required by zen theme, so it's optional.
&lt;/p&gt;

&lt;p&gt;
I prefer install packages into my HOME directory because it versatile and safe.
&lt;/p&gt;

&lt;p&gt;
For example, "sudo pip install" could &lt;a href="https://forums.gentoo.org/viewtopic-t-1006044-view-next.html?sid=931f7be2c16ac99fd85eb2940c0bf82b"&gt;screw up python on Gentoo Linux&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-sh"&gt;
# @see http://stackoverflow.com/questions/2915471/install-a-python-package-into-a-different-directory-using-pip
pip install --user markdown webassets nikola requests
export PATH=$PATH:$HOME/.local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h4 id="sec-2-2"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; Install theme (OPTIONAL)&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
I use zen theme,
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;
rm -rf themes/zen/;nikola install_theme zen
# or rm -rf themes/zen/; http_proxy=http://127.0.0.1:8087 nikola install_theme zen at mainland China
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Backup you theme under "~/.config/nikola/themes/zen". You won't need above command any more.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h3 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Usage&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h4 id="sec-3-1"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; Create root directory&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;
mkdir -p ~/.config/;nikola init "nikola";cd ~/.config/nikola;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Please note `nikola init "nikola"` creates "conf.py" for you. Backup this file and you never need `nikola init`. 
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h4 id="sec-3-2"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; Import old posts and build new site&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-sh"&gt;
nicola import_wordpress my_wordpress_dump.xml
nikola build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
The website is create at "~/.config/nikola/output".
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h3 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Tips (OPTIONAL)&lt;/h3&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-4-1" class="outline-3"&gt;
&lt;h4 id="sec-4-1"&gt;&lt;span class="section-number-3"&gt;4.1&lt;/span&gt; If wordpress use 3rd parth JS to render code&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;p&gt;
Use below command to fix embedded code in HTML files:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre&gt;&lt;code class="lang-bash"&gt;
find -name '*.wp' -exec grep -l "\[sourcecode.*\&amp;lt;diff\&amp;gt;.*\]" {} \; |xargs sed -i 's/\[sourcecode.*\&amp;lt;diff\&amp;gt;.*\]/&amp;lt;pre class="brush: diff;"&amp;gt;/g
find -name '*.wp' -exec grep -l "~~~~~~~~~~~~" {} \;|xargs sed -i "s%~~~~~~~~~~~~%&amp;lt;/pre&amp;gt;%g"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
Manually fixed those articles with Chinese titles in url_map.csv
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-2" class="outline-3"&gt;
&lt;h4 id="sec-4-2"&gt;&lt;span class="section-number-3"&gt;4.2&lt;/span&gt; Import comments into Disqus&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-4-2"&gt;
&lt;p&gt;
&lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt; is a blog comment hosting service.
&lt;/p&gt;

&lt;p&gt;
Use below script to fixed the comment dumped from wordpress before importing it into Disqus:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;


&lt;pre&gt;&lt;code class="lang-python"&gt;
#!/usr/bin/python
import getopt, sys, csv
def usage():
    print '''
NAME
    fix url mapping when migrate wordpress blog into nikola
Usage
    python fix-url-map.py [options]
'''[1:-1]

if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hf:x:", ["help", "file=","xml="])
    except getopt.GetoptError as err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    file=""
    xml=""

    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-f", "--file"):
            file= a
        elif o in ("-x", "--xml"):
            xml=a
        else:
            assert False, "unhandled option"

    with open(xml, 'r') as content_file:
        content = content_file.read()

    with open(file, 'rb') as csvfile:
         spamreader = csv.reader(csvfile, delimiter=',')
         for row in spamreader:
             content=content.replace("&amp;gt;"+row[0]+"&amp;lt;","&amp;gt;"+row[1]+"&amp;lt;")

    print content
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-3" class="outline-3"&gt;
&lt;h4 id="sec-4-3"&gt;&lt;span class="section-number-3"&gt;4.3&lt;/span&gt; Setup 3rd party JS libraries on new site&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-4-3"&gt;
&lt;p&gt;
Install syntaxhighlighter and google analytics, insert below code into conf.py:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre&gt;&lt;code class="lang-python"&gt;
BODY_END = """
&amp;lt;script type='text/javascript' src='//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shCore.min.js'&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type='text/javascript' src='//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/shAutoloader.min.js'&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type='text/javascript'&amp;gt;
function path()
{
  var args = arguments,
      result = [];

  for(var i = 0; i &amp;lt; args.length; i++){
    result.push(args[i].replace('@', '//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/scripts/'));
  }

  return result;
};

SyntaxHighlighter.autoloader.apply(null, path(
  'applescript            @shBrushAppleScript.min.js',
  'actionscript3 as3      @shBrushAS3.min.js',
  'bash shell             @shBrushBash.min.js',
  'coldfusion cf          @shBrushColdFusion.min.js',
  'cpp c c++              @shBrushCpp.min.js',
  'clojure                @shBrushScala.min.js',
  'c# c-sharp csharp      @shBrushCSharp.min.js',
  'css                    @shBrushCss.min.js',
  'delphi pascal          @shBrushDelphi.min.js',
  'diff patch pas         @shBrushDiff.min.js',
  'erl erlang             @shBrushErlang.min.js',
  'groovy                 @shBrushGroovy.min.js',
  'java                   @shBrushJava.min.js',
  'jfx javafx             @shBrushJavaFX.min.js',
  'js jscript javascript  @shBrushJScript.min.js',
  'perl pl                @shBrushPerl.min.js',
  'php                    @shBrushPhp.min.js',
  'text plain             @shBrushPlain.min.js',
  'py python              @shBrushPython.min.js',
  'ruby rails ror rb      @shBrushRuby.min.js',
  'sass scss              @shBrushSass.min.js',
  'scala                  @shBrushScala.min.js',
  'sql                    @shBrushSql.min.js',
  'vb vbnet               @shBrushVb.min.js',
  'xml xhtml xslt html    @shBrushXml.min.js'
));
SyntaxHighlighter.all();
&amp;lt;/script&amp;gt;
&amp;lt;script type='text/javascript'&amp;gt;
var _gaq = _gaq || [];

_gaq.push(['_setAccount', 'UA-29850823-2']);
_gaq.push(['_addDevId', 'i9k95']); // Google Analyticator App ID with Google
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
&amp;lt;/script&amp;gt;
"""

EXTRA_HEAD_DATA = """
&amp;lt;link rel='stylesheet' type='text/css' href='//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/styles/shCore.min.css'&amp;gt;
&amp;lt;link rel='stylesheet' type='text/css' href='//cdnjs.cloudflare.com/ajax/libs/SyntaxHighlighter/3.0.83/styles/shCoreEmacs.css'&amp;gt;
"""
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;
In above code, shCoreEmacs.css is the color theme for syntaxhighlighter.
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-4" class="outline-3"&gt;
&lt;h4 id="sec-4-4"&gt;&lt;span class="section-number-3"&gt;4.4&lt;/span&gt; Upload&lt;/h4&gt;
&lt;div class="outline-text-3" id="text-4-4"&gt;
&lt;p&gt;
I use &lt;a href="https://filezilla-project.org/"&gt;FileZilla&lt;/a&gt; as a FTP client. &lt;a href="http://www.ncftp.com/"&gt;NcFTP&lt;/a&gt; is a command line alternative.
&lt;/p&gt;

&lt;p&gt;
The best way to upload HTML files is &lt;a href="http://git-scm.com/"&gt;Git&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>en</category><category>migrate</category><category>nikola</category><category>wordpress</category><guid>http://blog.binchen.org/posts/migrate-blog-from-wordpress-into-nikola.html</guid><pubDate>Tue, 22 Apr 2014 09:09:21 GMT</pubDate></item><item><title>Upload emacs package to marmalade</title><link>http://blog.binchen.org/posts/upload-emacs-package-to-marmalade.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Thanks to &lt;a href="https://plus.google.com/+SebastianWiesner/posts"&gt;Sebastian Wiesner&lt;/a&gt; for providing a python script to upload package to &lt;a href="http://marmalade-repo.org/"&gt;http://marmalade-repo.org/&lt;/a&gt;. &lt;/p&gt;    
&lt;pre class="prettyprint "&gt;

sudo pip install requests keyring

curl -L https://raw.githubusercontent.com/lunaryorn/dotfiles/master/emacs/bin/marmalade-upload &amp;gt; ~/bin/marmalade-upload &amp;amp;&amp;amp; chmod +x ~/bin/marmalade-upload

~/bin/marmalade-upload -h # see help
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Please note if the same version already exists on server, I need delete it before uploading. &lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>marmalade</category><guid>http://blog.binchen.org/posts/upload-emacs-package-to-marmalade.html</guid><pubDate>Fri, 28 Mar 2014 07:26:01 GMT</pubDate></item><item><title>Debug Emacs Lisp code the hard way</title><link>http://blog.binchen.org/posts/debug-emacs-lisp-code-the-hard-way.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I &lt;a href="https://github.com/emacs-helm/helm/issues/448"&gt;met some issue&lt;/a&gt; when using helm several days ago. &lt;/p&gt; &lt;p&gt; With the help from Michael Heerdegen, I can locate the line error message is dumped. &lt;/p&gt; &lt;p&gt; But the problem is I cannot get the backtrace at all. &lt;/p&gt; &lt;p&gt; So I insert some &lt;a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Internals-of-Debugger.html"&gt;backtrace printing code&lt;/a&gt; above that line and "M-x eval-buffer": &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

(with-output-to-temp-buffer "backtrace-output"
  (let ((var 1))
    (save-excursion
      (setq var (eval '(progn
                         (1+ var)
                         (list 'testing (backtrace))))))))
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; It turns out that some third party package I installed changes the emacs variable "display-buffer-function". I guess that's why the backtrace is blocked. Because backtrace is usually dumped into a backtrace buffer. And backtrace buffer's is actually influenced by the variable. &lt;/p&gt;&lt;/div&gt;</description><category>debug</category><category>elisp</category><category>emacs</category><category>en</category><guid>http://blog.binchen.org/posts/debug-emacs-lisp-code-the-hard-way.html</guid><pubDate>Wed, 19 Mar 2014 19:45:00 GMT</pubDate></item><item><title>How to use ctags in Emacs effectively</title><link>http://blog.binchen.org/posts/how-to-use-ctags-in-emacs-effectively-3.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://ctags.sourceforge.net/"&gt;Exuberant Ctags&lt;/a&gt; is a code navigation tool. It supports many language and could be integrated into Emacs well. &lt;/p&gt; &lt;p&gt; Please read &lt;a href="http://www.emacswiki.org/emacs/BuildTags"&gt;EmacsWiki&lt;/a&gt; for basic usage. &lt;/p&gt; &lt;p&gt; I will talk about how I manage my ctags. &lt;/p&gt; &lt;p&gt; Basically ctags will produce a index file with file name TAGS. The full path of TAGS will be stored in a global list "tags-table-list". &lt;/p&gt; &lt;p&gt; An example of tags-table-list: &lt;/p&gt;
&lt;pre class="prettyprint "&gt;
(setq tags-table-list '("~/wxWidgets-master/TAGS" "~/projs/Loris/src/desktop/TAGS"))
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Every time we you "M-x find-tag", the TAGS file in above list will be read from the scratch to locate the definition of the symbol under cursor. &lt;/p&gt; &lt;p&gt; Here is my strategy to manage TAGS &lt;b&gt;automatically&lt;/b&gt;: &lt;/p&gt;&lt;ul&gt; &lt;li&gt;I hard coded full path of TAGS in .emacs because I usually don't change project path. &lt;/li&gt; &lt;li&gt;In major mode hook like c++-mode-hook or js2-mode-hook I will check the directory path of current file. If it contains certain string, I suppose the file belong to certain project. &lt;/li&gt; &lt;li&gt;Then I will create TAGS for that project if needed &lt;/li&gt; &lt;li&gt;Every time when I save the file, I may update TAGS according to the value of tags-table-list. &lt;/li&gt; &lt;/ul&gt;   &lt;p&gt; Here is the code: &lt;/p&gt;
&lt;pre class="prettyprint lang-lisp"&gt;
(defun my-project-name-contains-substring (REGEX)
  (let ((dir (if (buffer-file-name)
                 (file-name-directory (buffer-file-name))
               "")))
    (string-match-p REGEX dir)))

(defun my-create-tags-if-needed (SRC-DIR &amp;amp;optional FORCE)
  "return the full path of tags file"
  (let ((dir (file-name-as-directory (file-truename SRC-DIR)) )
       file)
    (setq file (concat dir "TAGS"))
    (when (or FORCE (not (file-exists-p file)))
      (message "Creating TAGS in %s ..." dir)
      (shell-command
       (format "ctags -f %s -e -R %s" file dir))
      )
    file
    ))

(defvar my-tags-updated-time nil)

(defun my-update-tags ()
  (interactive)
  "check the tags in tags-table-list and re-create it"
  (dolist (tag tags-table-list)
    (my-create-tags-if-needed (file-name-directory tag) t)
    ))

(defun my-auto-update-tags-when-save ()
  (interactive)
  (cond
   ((not my-tags-updated-time)
    (setq my-tags-updated-time (current-time)))
   ((&amp;lt; (- (float-time (current-time)) (float-time my-tags-updated-time)) 300)
    ;; &amp;lt; 300 seconds
    ;; do nothing
    )
   (t
    (setq my-tags-updated-time (current-time))
    (my-update-tags)
    (message "updated tags after %d seconds." (- (float-time (current-time))  (float-time my-tags-updated-time)))
    )
   ))

(defun my-setup-develop-environment ()
    (when (my-project-name-contains-substring "Loris")
      (cond
       ((my-project-name-contains-substring "src/desktop")
        ;; C++ project don't need html tags
        (setq tags-table-list (list
                               (my-create-tags-if-needed
                                (concat (file-name-as-directory (getenv "WXWIN")) "include"))
                               (my-create-tags-if-needed "~/projs/Loris/loris/src/desktop")))
        )
       ((my-project-name-contains-substring "src/html")
        ;; html project donot need C++ tags
        (setq tags-table-list (list (my-create-tags-if-needed "~/projs/Loris/loris/src/html")))
        ))))

(add-hook 'after-save-hook 'my-auto-update-tags-when-save)
(add-hook 'js2-mode-hook 'my-setup-develop-environment)
(add-hook 'web-mode-hook 'my-setup-develop-environment)
(add-hook 'c++-mode-hook 'my-setup-develop-environment)
(add-hook 'c-mode-hook 'my-setup-develop-environment)
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; UPDATE: There is some discussion at &lt;a href="https://plus.google.com/110954683162859211810/posts/NsdzvywuoX3"&gt;Google Plus&lt;/a&gt; about using ctags. Kaushal Modi recommended three emacs plugins: &lt;/p&gt;&lt;ol&gt; &lt;li&gt;ctags-update &lt;/li&gt; &lt;li&gt;etags-table &lt;/li&gt; &lt;li&gt;etags-select &lt;/li&gt; &lt;/ol&gt;   &lt;p&gt; I tried these three plugins. ctags-update and etags-table duplicate my above elisp code. I prefer my own code because it's simpler and totally controllable. For example, the fact that I need only care about &lt;b&gt;only one global variable tags-table-list&lt;/b&gt; makes my code shorter. &lt;/p&gt; &lt;p&gt; But I do like etags-select, it provide better UI for finding tag and I will use it from now on. &lt;/p&gt;&lt;/div&gt;</description><category>ctags</category><category>emacs</category><category>en</category><guid>http://blog.binchen.org/posts/how-to-use-ctags-in-emacs-effectively-3.html</guid><pubDate>Tue, 11 Mar 2014 18:52:00 GMT</pubDate></item><item><title>How to adapt my work style to the employer's standard in Emacs</title><link>http://blog.binchen.org/posts/how-to-adapt-my-work-style-to-the-employers-standard-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I write some set up code in ~/.custom.el. It will detect which machine and what directory I'm working on. Then I hook the set up code when major mode (js2-mode, web-mode, for example) loaded. &lt;/p&gt; &lt;p&gt; In my ~/.emacs, &lt;/p&gt;   
&lt;pre class="prettyprint lang-lisp"&gt;
(if (file-readable-p (expand-file-name "~/.custom.el"))
     (load-file (expand-file-name "~/.custom.el")))
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; Content of my ~/.custom.el: &lt;/p&gt;   
&lt;pre class="prettyprint lang-lisp"&gt;
;; (getenv "HOSTNAME") won't work because $HOSTNAME is not an env variable
;; (system-name) won't work because as Optus required, my /etc/hosts is changed
(defun my/at-office ()
  (interactive)
  (let ((my-hostname (with-temp-buffer
                       (shell-command "hostname" t)
                       (goto-char (point-max))
                       (delete-char -1)
                       (buffer-string))
                     ))
    (and (string= my-hostname "my-sydney-workpc")
         (not (or (string= my-hostname "sydneypc")
                  (string= my-hostname "ChenBinMacAir")
                  (string= my-hostname "eee")
                  )))
    ))

(defun my/use-office-style ()
  (interactive)
  (let ((dir (if (buffer-file-name)
                 (file-name-directory (buffer-file-name))
               "")))
    (string-match-p "CompanyProject" dir)
    ))

(defun my/setup-develop-environment ()
  (cond
   ((my/use-office-style)
    (message "Office code style!")
    (setq coffee-tab-width 4)
    (setq javascript-indent-level 4)
    (setq js-indent-level 4)
    (setq js2-basic-offset 4)
    (setq web-mode-indent-style 4))
   (t
    (message "My code style!")
    (setq coffee-tab-width 4)
    (setq javascript-indent-level 2)
    (setq js-indent-level 2)
    (setq js2-basic-offset 2)
    (setq web-mode-indent-style 2))
   ))

(add-hook 'js2-mode-hook 'my/setup-develop-environment)
(add-hook 'web-mode-hook 'my/setup-develop-environment)
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><guid>http://blog.binchen.org/posts/how-to-adapt-my-work-style-to-the-employers-standard-in-emacs.html</guid><pubDate>Wed, 05 Mar 2014 10:53:00 GMT</pubDate></item><item><title>My answer to "How do you use Emacs without a directory tree on the side of the editor?" on quora.com</title><link>http://blog.binchen.org/posts/my-answer-to-how-do-you-use-emacs-without-a-directory-tree-on-the-side-of-the-editor-on-quora-com.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;This is &lt;a href="http://www.quora.com/Emacs/How-do-you-use-Emacs-without-a-directory-tree-on-the-side-of-the-editor"&gt;original link of the question&lt;/a&gt;. Please note I focus on programming for large projects. I need search/grep/modify files scattered in different places without documentation. &lt;/p&gt; &lt;p&gt; If your use case is different, a embedded file explorer may be a better choice &lt;/p&gt;  &lt;div id="outline-container-1" class="outline-3"&gt; &lt;h4 id="sec-1"&gt;Tools I use to replace a file explorer&lt;/h4&gt; &lt;div class="outline-text-3" id="text-1"&gt;  &lt;ol&gt; &lt;li&gt;ido-find-file (emacs), just type any characters, it will fuzz search matched file in parent/sibling/current/or-whatever directory.  &lt;/li&gt; &lt;li&gt;helm-find-file (emacs), this one use regular expression and has bigger window  &lt;/li&gt; &lt;li&gt;recentf and helm (emacs), I use regular expression open recent opened files.  &lt;/li&gt; &lt;li&gt;ctags, gtags or whatever tag tools (CLI tool), as mentioned by other people  &lt;/li&gt; &lt;li&gt;I also use lots of bash functions written by myself, those functions are trivial, but combined with a wonderful tool called percol, they become really powerful.  &lt;/li&gt; &lt;li&gt;I use some CLI clipboard tool so I can easily share the file path between terminal/emacs/firefox.  &lt;/li&gt; &lt;li&gt;there is also a emacs bundled feature called speedbar, which is similar to the file explorer, I used it once, but it does not fit in my ninja style ;) It's fine but the UI is almost same to those average text editors.  &lt;/li&gt; &lt;li&gt;I also write some elisp snippets, for example, convert absolute path to relative path; given one relative path, output one absolute path, etc …  &lt;/li&gt; &lt;li&gt;there is also some git based emacs plugin: you can search file under the project root directory.  &lt;/li&gt; &lt;li&gt;there is a CLI tool called fasd which can let you interactively select the file or folder you recently visited.  &lt;/li&gt; &lt;li&gt;many other tools, plug-ins, code snippets I can use … &lt;/li&gt; &lt;/ol&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-2" class="outline-3"&gt; &lt;h4 id="sec-2"&gt;Use case&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2"&gt;  &lt;ol&gt; &lt;li&gt;I need search a big project for a certain library (it's a freemarker file I need include) whose full path I don't know, I just search the API's name by type: &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;"gef keyword *". gef is my bash function based on grep. &lt;/p&gt;&lt;ol&gt; &lt;li&gt;matched files are displayed instantly (grep is much more quick than IDEs, BTW) in a interactive console filter (use percol), I type a regular expression to filter file name and press enter &lt;/li&gt; &lt;li&gt;the full path is in clipboard now, then I type ":e Shift-insert" to open that file. &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;This is the most difficult case, I usually strike less keys and not get out of Emacs. &lt;/p&gt;&lt;ol&gt; &lt;li&gt;If i need insert this file's relative path, I press a hot key and another emacs plugin will correctly convert absolute path to relative one (relative to the file I'm editing in Emacs) and insert it into my editor. &lt;/li&gt; &lt;/ol&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id="outline-container-3" class="outline-3"&gt; &lt;h4 id="sec-3"&gt;Demo&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3"&gt;  &lt;p&gt;Here is screen cast. In this demo I grepped and open a ftl file and then search another js file in the same project. &lt;img src="http://blog.binchen.org/wp-content/uploads/2014/02/wpid-emacs-grep-search-open-file.gif" alt="http://blog.binchen.org/wp-content/uploads/2014/02/wpid-emacs-grep-search-open-file.gif"&gt; &lt;/p&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</description><category>bash</category><category>emacs</category><category>en</category><category>linux</category><guid>http://blog.binchen.org/posts/my-answer-to-how-do-you-use-emacs-without-a-directory-tree-on-the-side-of-the-editor-on-quora-com.html</guid><pubDate>Wed, 19 Feb 2014 21:40:00 GMT</pubDate></item><item><title>One liner to download and install emacs lisp source code</title><link>http://blog.binchen.org/posts/one-liner-to-download-and-extract-emacs-lisp-source-code.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Run the below command in shell, &lt;/p&gt;   
&lt;pre class="prettyprint "&gt;

curl http://ftp.gnu.org/gnu/emacs/emacs-`emacs --version|head -n1|sed 's/[^0-9.]*\([0-9]\+\.[0-9]\+\).*/\1/g'`.tar.gz | sudo tar --exclude=admin/* --exclude=etc/* --exclude=nt/* --exclude=doc/* --exclude=leim/* -C /usr/share/emacs/`emacs --version|head -n1|sed 's/[^0-9.]*\([0-9]\+\.[0-9]\+\).*/\1/g'`/lisp/ --strip-components=2 --wildcards -zxv *.el
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt; For example, after installing the lisp code. You can &lt;code&gt;M-x find-function package-list-packages&lt;/code&gt; in Emacs, you will jump to the definition of that command in "/usr/share/emacs/24.3/lisp/emacs-lisp/package.el" (I assume your emacs version is 24.3). &lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>en</category><category>linux</category><guid>http://blog.binchen.org/posts/one-liner-to-download-and-extract-emacs-lisp-source-code.html</guid><pubDate>Tue, 18 Feb 2014 11:56:00 GMT</pubDate></item><item><title>Add current directory into load-path in Emacs</title><link>http://blog.binchen.org/posts/add-current-directory-into-load-path-in-emacs.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Useful when developing emacs plugin: &lt;/p&gt;
&lt;pre class="prettyprint lang-lisp"&gt;
(defun add-pwd-into-load-path ()
  "add current directory into load-path, useful for elisp developers"
  (interactive)
  (let ((dir (expand-file-name default-directory)))
    (if (not (memq dir load-path))
        (add-to-list 'load-path dir)
        )
    (message "Directory added into load-path:%s" dir)
    )
  )
&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>elisp</category><category>emacs</category><category>en</category><category>programming</category><guid>http://blog.binchen.org/posts/add-current-directory-into-load-path-in-emacs.html</guid><pubDate>Mon, 17 Feb 2014 13:24:23 GMT</pubDate></item><item><title>Code Rush</title><link>http://blog.binchen.org/posts/code-rush.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;小结,代码库庞大,质量有问题,招了一些废物.M Toy:"我们不是要痛扁谁…". 1998年3月31日,Netscape公开其源代码. &lt;/p&gt; &lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt; &lt;caption&gt;&lt;/caption&gt; &lt;colgroup&gt;&lt;col class="left"&gt;&lt;col class="left"&gt; &lt;/colgroup&gt; &lt;thead&gt; &lt;tr&gt;&lt;th scope="col" class="left"&gt;人名&lt;/th&gt;&lt;th scope="col" class="left"&gt;背景&lt;/th&gt;&lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://en.wikipedia.org/wiki/Jamie_Zawinski"&gt;Jamie Zawinski&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;黑客,擅长C/Perl/Lisp,不喜欢C++,XEmacs开发者,Netscape早期版本开发者)解释源代码的意义.注意键盘符合人体工程学.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://en.wikipedia.org/wiki/Michael_Toy"&gt;Michael Toy&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;牢游戏Rogue的开发者,该游戏被PC World杂志2009年评为史上最伟大PC游戏第六,是Diablo的老祖宗,Netscape最早员工&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://en.wikipedia.org/wiki/Jim_Barksdale"&gt;Jim Barksdale&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;CEO&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://www.linkedin.com/pub/jim-roskind/0/20/195"&gt;Jim Roskind&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;Security Expert,开发大型软件,很麻烦.还说了一大堆屁话.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Scott Collins&lt;/td&gt;&lt;td class="left"&gt;值夜班,惨透了.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://en.wikipedia.org/wiki/Brendan_Eich"&gt;Brendan Eich&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;javascript&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://www.linkedin.com/pub/jeff-weinstein/b/869/433"&gt;Jeff Weinstein&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;programmer at Netscape.并不是Netscape最优秀的员工.嘿嘿.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;Tara Hernandez&lt;/td&gt;&lt;td class="left"&gt;QA&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td class="left"&gt;&lt;a href="http://en.wikipedia.org/wiki/Blake_Ross"&gt;Blake Ross&lt;/a&gt;&lt;/td&gt;&lt;td class="left"&gt;&lt;a href="http://www.insanely-great.com/news.php?id=3993"&gt;http://www.insanely-great.com/news.php?id=3993&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;  &lt;/div&gt;</description><category>emacs</category><category>engineering</category><category>firefox</category><category>zh</category><guid>http://blog.binchen.org/posts/code-rush.html</guid><pubDate>Fri, 14 Feb 2014 17:12:00 GMT</pubDate></item><item><title>My answer to "What are some must-have emacs additions" on quora.com</title><link>http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html</link><dc:creator>Chen Bin</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;div id="table-of-contents"&gt; &lt;h3&gt;Table of Contents&lt;/h3&gt; &lt;div id="text-table-of-contents"&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-1"&gt;1. Warning&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2"&gt;2. third party plugins&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2-1"&gt;2.1. company-mode&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2-2"&gt;2.2. yasnippet&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2-3"&gt;2.3. js2-mode&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2-4"&gt;2.4. evil-mode&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2-5"&gt;2.5. evil-leader&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2-6"&gt;2.6. evil-matchit (written by me)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2-7"&gt;2.7. evil-nerd-commenter (written by me)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2-8"&gt;2.8. helm&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2-9"&gt;2.9. web-mode&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2-10"&gt;2.10. windows-numbering.el&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-2-11"&gt;2.11. smex&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-3"&gt;3. plugins bundled with emacs 24&lt;/a&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-3-1"&gt;3.1. org-mode&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-3-2"&gt;3.2. winner-mode&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-3-3"&gt;3.3. gnus&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-3-4"&gt;3.4. ido&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-3-5"&gt;3.5. imenu&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-3-6"&gt;3.6. flymake&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-3-7"&gt;3.7. flyspell&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-4"&gt;4. The last and best plugin&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html#sec-5"&gt;5. Tip&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt; This is my answer for &lt;a href="http://www.quora.com/Emacs/What-are-some-must-have-additions-to-your-emacs-file"&gt;What are some must-have additions to your .emacs file?&lt;/a&gt; on quora.com. &lt;/p&gt;  &lt;p&gt; Emacs 24 is already bundled with a package manager. So you can download and install the package without leaving Emacs. See &lt;a href="http://www.emacswiki.org/emacs/ELPA"&gt;http://www.emacswiki.org/emacs/ELPA&lt;/a&gt; for how to set up. &lt;/p&gt;  &lt;p&gt; If you want to know more tips about specific plugin. Please search its name in &lt;a href="http://www.emacswiki.org"&gt;Emacswiki&lt;/a&gt;. &lt;/p&gt;  &lt;div id="outline-container-sec-1" class="outline-2"&gt; &lt;h3 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Warning&lt;/h3&gt; &lt;div class="outline-text-2" id="text-1"&gt; &lt;p&gt; I'm a web programmer, so my focus could be different from other emacs users. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="outline-container-sec-2" class="outline-2"&gt; &lt;h3 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; third party plugins&lt;/h3&gt; &lt;div class="outline-text-2" id="text-2"&gt; &lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt; &lt;h4 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; company-mode&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2-1"&gt; &lt;p&gt; auto completing code, it requires less key typing than another emacs plugin auto-complete. Besides, it's actively maintained  &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-2-2" class="outline-3"&gt; &lt;h4 id="sec-2-2"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; yasnippet&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2-2"&gt; &lt;p&gt; insert template &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-2-3" class="outline-3"&gt; &lt;h4 id="sec-2-3"&gt;&lt;span class="section-number-3"&gt;2.3&lt;/span&gt; js2-mode&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2-3"&gt; &lt;p&gt; javascript development, best of the best &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-2-4" class="outline-3"&gt; &lt;h4 id="sec-2-4"&gt;&lt;span class="section-number-3"&gt;2.4&lt;/span&gt; evil-mode&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2-4"&gt; &lt;p&gt; vim simulator, I cannot live without it as a vi guy &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-2-5" class="outline-3"&gt; &lt;h4 id="sec-2-5"&gt;&lt;span class="section-number-3"&gt;2.5&lt;/span&gt; evil-leader&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2-5"&gt; &lt;p&gt; evil's plugin, simple and powerful if you realize that ALL the hot keys (for example, I map "M-x" to ",mx") can be re-mapped with it &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-2-6" class="outline-3"&gt; &lt;h4 id="sec-2-6"&gt;&lt;span class="section-number-3"&gt;2.6&lt;/span&gt; evil-matchit (written by me)&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2-6"&gt; &lt;p&gt; jump between tag pair, port of  vim matchit &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-2-7" class="outline-3"&gt; &lt;h4 id="sec-2-7"&gt;&lt;span class="section-number-3"&gt;2.7&lt;/span&gt; evil-nerd-commenter (written by me)&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2-7"&gt; &lt;p&gt; (un)comment by lines,  port of nerd-comment &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-2-8" class="outline-3"&gt; &lt;h4 id="sec-2-8"&gt;&lt;span class="section-number-3"&gt;2.8&lt;/span&gt; helm&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2-8"&gt; &lt;p&gt; hard to describe but powerful &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-2-9" class="outline-3"&gt; &lt;h4 id="sec-2-9"&gt;&lt;span class="section-number-3"&gt;2.9&lt;/span&gt; web-mode&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2-9"&gt; &lt;p&gt; major-mode for all html templates &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-2-10" class="outline-3"&gt; &lt;h4 id="sec-2-10"&gt;&lt;span class="section-number-3"&gt;2.10&lt;/span&gt; windows-numbering.el&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2-10"&gt; &lt;p&gt; sub-window navigation, best one. well, it occupies hotkey from M-1 to M-9, For normal emacs user this could be issue. but I'm evil guy;) &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-2-11" class="outline-3"&gt; &lt;h4 id="sec-2-11"&gt;&lt;span class="section-number-3"&gt;2.11&lt;/span&gt; smex&lt;/h4&gt; &lt;div class="outline-text-3" id="text-2-11"&gt; &lt;p&gt; you don't need remember hot key or command any more &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="outline-container-sec-3" class="outline-2"&gt; &lt;h3 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; plugins bundled with emacs 24&lt;/h3&gt; &lt;div class="outline-text-2" id="text-3"&gt; &lt;/div&gt;&lt;div id="outline-container-sec-3-1" class="outline-3"&gt; &lt;h4 id="sec-3-1"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; org-mode&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3-1"&gt; &lt;p&gt; gtd tool, it changed my life, as git,vim,emacs did to me ages ago. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-3-2" class="outline-3"&gt; &lt;h4 id="sec-3-2"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; winner-mode&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3-2"&gt; &lt;p&gt; undo sub window-layout &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-3-3" class="outline-3"&gt; &lt;h4 id="sec-3-3"&gt;&lt;span class="section-number-3"&gt;3.3&lt;/span&gt; gnus&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3-3"&gt; &lt;p&gt; hate and love it. the UI is too geek. but has some killer feature,  for example, forward email, send email quickly, attach file. but the point is I can use with other awesome plugins like yasnippet, company-mode,evil. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-3-4" class="outline-3"&gt; &lt;h4 id="sec-3-4"&gt;&lt;span class="section-number-3"&gt;3.4&lt;/span&gt; ido&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3-4"&gt; &lt;p&gt; similar to helm, my tip, you can tell helm when to use ido, when to use helm. &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-3-5" class="outline-3"&gt; &lt;h4 id="sec-3-5"&gt;&lt;span class="section-number-3"&gt;3.5&lt;/span&gt; imenu&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3-5"&gt; &lt;p&gt; display list of function in current buffer, the point is it is programmable &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-3-6" class="outline-3"&gt; &lt;h4 id="sec-3-6"&gt;&lt;span class="section-number-3"&gt;3.6&lt;/span&gt; flymake&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3-6"&gt; &lt;p&gt; real time syntax check &lt;/p&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div id="outline-container-sec-3-7" class="outline-3"&gt; &lt;h4 id="sec-3-7"&gt;&lt;span class="section-number-3"&gt;3.7&lt;/span&gt; flyspell&lt;/h4&gt; &lt;div class="outline-text-3" id="text-3-7"&gt; &lt;p&gt; best spell checker, if you know how to do programming for it &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="outline-container-sec-4" class="outline-2"&gt; &lt;h3 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; The last and best plugin&lt;/h3&gt; &lt;div class="outline-text-2" id="text-4"&gt; &lt;p&gt; Lisp! &lt;/p&gt; &lt;ul class="org-ul"&gt; &lt;li&gt;simple &lt;/li&gt; &lt;li&gt;no learning curve, &lt;/li&gt; &lt;li&gt;it's syntax ensure that its plugin developer are experienced developers who knows at least three programming languages. &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="outline-container-sec-5" class="outline-2"&gt; &lt;h3 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Tip&lt;/h3&gt; &lt;div class="outline-text-2" id="text-5"&gt; &lt;p&gt; If I find some awesome plugin, I will investigate the original author and make sure what other tools he/she uses or develops &lt;/p&gt;  &lt;p&gt; For example, mooz maintains js2-mode, he also developed: &lt;/p&gt; &lt;dl class="org-dl"&gt; &lt;dt&gt; keysnail &lt;/dt&gt;&lt;dd&gt;firefox is converted into Emacs, best one in similar tools (I tried 3 or 2 similar firefox/chrome addons before settled on keysnail) &lt;/dd&gt; &lt;dt&gt; percol &lt;/dt&gt;&lt;dd&gt;A genius utility for shell operation. Make me ten times faster when working in bash shell. Without it, I will quit my programming career immediately. &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;</description><category>addon</category><category>emacs</category><category>en</category><category>plugin</category><guid>http://blog.binchen.org/posts/my-answer-to-what-are-some-must-have-emacs-additions-on-quora-com.html</guid><pubDate>Thu, 13 Feb 2014 19:44:00 GMT</pubDate></item></channel></rss>