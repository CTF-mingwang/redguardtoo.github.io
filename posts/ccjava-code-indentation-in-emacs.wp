<div id="outline-container-1" class="outline-3">
<h3 id="sec-1">Problem</h3>
<div class="outline-text-3" id="text-1">

<p>There are two styles when insert curly braces in C like languages.
</p>
<p>
Style 1:
</p>



<pre class="prettyprint lang-c">
if(true) {
    printf("hello world\n");
}
</pre>



<p>
Style 2:
</p>



<pre class="prettyprint lang-c">
if(true)
{
    printf("hello world\n");
}
</pre>



<p>
Whatever style I use, I expect Emacs will properly handle the indentation for me.
</p>
<p>
In "Style 1", when I press ENTER key after "{" at first line, I expect the new line will indent four spaces.
</p>
<p>
In "Style 2", when I press ENTER key after ")" at first line, I expect the new line will NOT indent.
</p>
</div>

</div>

<div id="outline-container-2" class="outline-3">
<h3 id="sec-2">Solution</h3>
<div class="outline-text-3" id="text-2">

<p>Insert below code into ~/.emacs:
</p>



<pre class="prettyprint lang-lisp">
(defun fix-c-indent-offset-according-to-syntax-context (key val)
  ;; remove the old element
  (setq c-offsets-alist (delq (assoc key c-offsets-alist) c-offsets-alist))
  ;; new value
  (add-to-list 'c-offsets-alist '(key . val)))

(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
              ;; indent
              (fix-c-indent-offset-according-to-syntax-context 'substatement 0)
              (fix-c-indent-offset-according-to-syntax-context 'func-decl-cont 0))
            ))

</pre>



<p>
That's it.
</p>
</div>

</div>

<div id="outline-container-3" class="outline-3">
<h3 id="sec-3">Explanation</h3>
<div class="outline-text-3" id="text-3">

<p>When you press the ENTER key, the function <b>c-indent-line</b> will be called.
</p>
<p>
That function will do some simple syntax analysis and decide current syntactic context..
</p>
<p>
It will use that syntactic context to look up a global variable c-offsets-alist and decide how many spaces the new line will indent.
</p>
<p>
For example, <b>substatement</b> corresponds to the code like below:
</p>



<pre class="prettyprint lang-c">
if(true) // press ENTER here
</pre>



<p>
And <b>func-decl-cont</b> corresponds to:
</p>



<pre class="prettyprint lang-c">
void fn () //press ENTER here
</pre>



</div>

</div>

<div id="outline-container-4" class="outline-3">
<h3 id="sec-4">Technical details</h3>
<div class="outline-text-3" id="text-4">

<p>When you press ENTER key, the new line will be inserted. Then the function <b>indent-according-to-mode</b> will always be called
</p>
<p>
<b>indent-according-to-mode</b> will actually call function object <b>indent-line-function</b> if it's not nil.
</p>
<p>
In C/C++/Java, that object is actually <b>c-indent-line</b>.
</p>
<p>
<b>c-indent-line</b> is defined in /usr/share/emacs/24.3/lisp/progmodes/cc-cmds.el (I use Emacs 24.3 on Gentoo Linux).
</p>
<p>
In that function, just below the code line:
</p>



<pre class="prettyprint lang-lisp">
(setq c-syntactic-context (c-guess-basic-syntax))
</pre>



<p>
Please insert insert log code:
</p>



<pre class="prettyprint lang-lisp">
(message "c-syntactic-context=%s" c-syntactic-context)
</pre>



<p>
Then you will know the current syntactic context when you press ENTER key.
</p>
<p>
<a href="http://www.emacswiki.org/emacs/IndentingC">EmacsWiki</a> said you can run command "c-set-offset", whose hot key is "C-x C-o", in order to "see the syntax at point". As I tested, it does not work as expected. My way may seem a little bit intrusive but is reliable.
</p>
<p>
For example, the context <b>statement-cont</b> corresponds to the use case like this:
</p>



<pre class="prettyprint lang-c">
int a=3, // press ENTER here
</pre>



<p>
Please note syntax analysis in c-indent-line is turned on if and <b>only if</b> the global flag <b>c-syntactic-indentation</b> is true.
</p>
<p>
Thanks for <a href="https://github.com/chengyi">chengyi</a> for <a href="https://github.com/redguardtoo/emacs.d/issues/98">reporting the issue and suggesting the fix</a>.
</p>
<p>
BTW, <a href="http://www.emacswiki.org/emacs/IndentingC">EmacsWiki has a section</a> to discuss the indenting in C. You may not need it if you have read this article and can read the Emacs lisp code.
</p></div>
</div>
