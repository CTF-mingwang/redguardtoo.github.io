<html><body><p>The script can read configuration file and runs on python 2.4. </p>   <pre class="src src-python"><span style="color: #af0000;">#!/usr/bin/python</span>
<span style="color: #af00ff;">import</span> sys

<span style="color: #af00ff;">import</span> os

<span style="color: #af00ff;">import</span> string

<span style="color: #af00ff;">import</span> time

<span style="color: #af00ff;">import</span> datetime

<span style="color: #af00ff;">import</span> getopt



<span style="color: #af0000;">#############</span>

<span style="color: #af0000;"># CONFIG</span>

<span style="color: #af0000;">#############</span>

<span style="color: #af5f00;">DB_NAME</span>=<span style="color: #87005f;">'mydb'</span>

<span style="color: #af5f00;">DB_PASSWORD</span>=<span style="color: #87005f;">'111111'</span>

<span style="color: #af5f00;">DB_USER</span>=<span style="color: #87005f;">'root'</span>

<span style="color: #af5f00;">DB_HOST</span>=<span style="color: #87005f;">'mylinux0'</span>

<span style="color: #af5f00;">SQL_DB_SCHEMA</span>=os.path.abspath(<span style="color: #87005f;">"db_schema.sql"</span>)

<span style="color: #af5f00;">SQL_CREATE_TABLE</span>=os.path.abspath(<span style="color: #87005f;">"000.sql"</span>)

<span style="color: #af5f00;">CLONE_TABLES</span>=[<span style="color: #87005f;">'MyJobs'</span>,<span style="color: #87005f;">'MyUsers'</span>]



<span style="color: #af0000;">#############</span>

<span style="color: #af0000;"># GLOBALS</span>

<span style="color: #af0000;">#############</span>

<span style="color: #af5f00;">backup_db</span>=<span style="color: #af00ff;">False</span>

<span style="color: #af5f00;">migration</span>=<span style="color: #af00ff;">False</span>

<span style="color: #af5f00;">config</span>=<span style="color: #008787;">None</span>

<span style="color: #af5f00;">verbose</span>=<span style="color: #af00ff;">False</span>

<span style="color: #af5f00;">delete</span>=<span style="color: #af00ff;">False</span>

<span style="color: #af5f00;">remote</span>=<span style="color: #af00ff;">False</span>



<span style="color: #af00ff;">def</span> <span style="color: #0000ff;">sql_cmd</span>(cmd):
    <span style="color: #af00ff;">if</span> remote:
        <span style="color: #af00ff;">return</span> <span style="color: #87005f;">'mysql -h %s -u %s -p%s -e " %s " %s'</span> % (DB_HOST,DB_USER,DB_PASSWORD,cmd,DB_NAME)
    <span style="color: #af00ff;">return</span> <span style="color: #87005f;">'mysql -u %s -p%s -e " %s " %s'</span> % (DB_USER,DB_PASSWORD,cmd,DB_NAME)


<span style="color: #af00ff;">def</span> <span style="color: #0000ff;">sql_script</span>(script):
    <span style="color: #af00ff;">if</span> remote:
        <span style="color: #af00ff;">return</span> <span style="color: #87005f;">'mysql -h %s -u %s -p%s %s &lt; %s'</span> % (DB_HOST,DB_USER,DB_PASSWORD,DB_NAME,script)
    <span style="color: #af00ff;">return</span> <span style="color: #87005f;">'mysql -u %s -p%s %s &lt; %s'</span> % (DB_USER,DB_PASSWORD,DB_NAME,script)




<span style="color: #af00ff;">def</span> <span style="color: #0000ff;">make_sql_to_create_table</span>():
    s=<span style="color: #5f5f87;">open</span>(SQL_DB_SCHEMA).read()
    <span style="color: #af00ff;">for</span> t <span style="color: #af00ff;">in</span> CLONE_TABLES:
        s=s.replace(t,t+<span style="color: #87005f;">'2'</span>)
    <span style="color: #5f5f87;">open</span>(SQL_CREATE_TABLE,<span style="color: #87005f;">'w'</span>).write(s)


<span style="color: #af00ff;">def</span> <span style="color: #0000ff;">backup_database</span>():
    fname=<span style="color: #87005f;">"%s-%s.dump.gz"</span> % (DB_NAME,time.strftime(<span style="color: #87005f;">'%Y%m%d%H%M%S'</span>, time.gmtime()))
    <span style="color: #af00ff;">if</span> remote:
        cmd=<span style="color: #87005f;">"mysqldump -h %s -u %s -p%s --compact %s|gzip -9 &gt; %s"</span> % (DB_HOST,DB_USER,DB_PASSWORD,DB_NAME,fname)
    <span style="color: #af00ff;">else</span>:
        cmd=<span style="color: #87005f;">"mysqldump -u %s -p%s --compact %s|gzip -9 &gt; %s"</span> % (DB_USER,DB_PASSWORD,DB_NAME,fname)

    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>


<span style="color: #af00ff;">def</span> <span style="color: #0000ff;">delete_db_records</span>():
    cmd=sql_cmd(<span style="color: #87005f;">"delete from sources;delete from cameras;"</span>)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>


<span style="color: #af00ff;">def</span> <span style="color: #0000ff;">package</span>():
    cmd=<span style="color: #87005f;">"tar zcvf migrate-db.tar.gz *.sql migrate.py .migrate_*"</span>
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>


<span style="color: #af00ff;">def</span> <span style="color: #0000ff;">read_config</span>(config):
    <span style="color: #af00ff;">global</span> DB_NAME
    <span style="color: #af00ff;">global</span> DB_PASSWORD
    <span style="color: #af00ff;">global</span> DB_USER
    <span style="color: #af00ff;">global</span> DB_HOST
    f=<span style="color: #5f5f87;">open</span>(config,<span style="color: #87005f;">"r"</span>)
    <span style="color: #af00ff;">for</span> line <span style="color: #af00ff;">in</span> f:
        a=line.split(<span style="color: #87005f;">"="</span>)
        <span style="color: #af00ff;">if</span> <span style="color: #5f5f87;">len</span>(a)!=2:
            <span style="color: #af00ff;">continue</span>
        n=a[0].strip()
        v=a[1].strip()
        <span style="color: #af00ff;">if</span> n==<span style="color: #87005f;">"DB_NAME"</span>:
            DB_NAME=v
        <span style="color: #af00ff;">elif</span> n==<span style="color: #87005f;">"DB_PASSWORD"</span>:
            DB_PASSWORD=v
        <span style="color: #af00ff;">elif</span> n==<span style="color: #87005f;">"DB_USER"</span>:
            DB_USER=v
        <span style="color: #af00ff;">elif</span> n==<span style="color: #87005f;">"DB_HOST"</span>:
            DB_HOST=v


<span style="color: #af00ff;">def</span> <span style="color: #0000ff;">usage</span>():
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">'''</span>
<span style="color: #87005f;">USAGE: python migrate.py [OPTIONS]</span>



<span style="color: #87005f;">OPTIONS:</span>

<span style="color: #87005f;">    -h, --help</span>

<span style="color: #87005f;">        print this help</span>



<span style="color: #87005f;">    -b, --backup-database</span>

<span style="color: #87005f;">        backup the old database before migration (recommended)</span>



<span style="color: #87005f;">    -m, --migrate</span>

<span style="color: #87005f;">        donot start migration</span>



<span style="color: #87005f;">    -v, --verbose</span>

<span style="color: #87005f;">        print database related information</span>



<span style="color: #87005f;">    -p, --package</span>

<span style="color: #87005f;">        packge all the scripts into migrate-db.tar.gz</span>



<span style="color: #87005f;">    -d, --delete-db-records</span>

<span style="color: #87005f;">        delete database records so we can restart migration</span>



<span style="color: #87005f;">    -c, --config</span>



<span style="color: #87005f;">SAMPLES:</span>

<span style="color: #87005f;">    python migrate.py -b                        #back database and exit</span>

<span style="color: #87005f;">    python migrate.py -m                        #start migration right now</span>

<span style="color: #87005f;">    python migrate.py -b -m                     #backup the database and start the migration (recommended)</span>

<span style="color: #87005f;">    python migrate.py -v                        #print database information and exit</span>

<span style="color: #87005f;">    python migrate.py -c .migrate_staging -v    #print staging database information and exit</span>

<span style="color: #87005f;">'''</span>



<span style="color: #af00ff;">def</span> <span style="color: #0000ff;">show_info</span>():
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">'''</span>
<span style="color: #87005f;">==Database Information</span>

<span style="color: #87005f;">name:{name}</span>

<span style="color: #87005f;">password:{password}</span>

<span style="color: #87005f;">user:{user}</span>

<span style="color: #87005f;">host:{host}</span>

<span style="color: #87005f;">'''</span>.format(name=DB_NAME, password=DB_PASSWORD,user=DB_USER,host=DB_HOST)



<span style="color: #af00ff;">def</span> <span style="color: #0000ff;">confirm</span>(prompt=<span style="color: #008787;">None</span>, resp=<span style="color: #af00ff;">False</span>):
    <span style="color: #87005f;">"""prompts for yes or no response from the user. Returns True for yes and</span>
<span style="color: #87005f;">    False for no.</span>



<span style="color: #87005f;">    'resp' should be set to the default value assumed by the caller when</span>

<span style="color: #87005f;">    user simply types ENTER.</span>



<span style="color: #87005f;">    &gt;&gt;&gt; confirm(prompt='Create Directory?', resp=True)</span>

<span style="color: #87005f;">    Create Directory? [y]|n:</span>

<span style="color: #87005f;">    True</span>

<span style="color: #87005f;">    &gt;&gt;&gt; confirm(prompt='Create Directory?', resp=False)</span>

<span style="color: #87005f;">    Create Directory? [n]|y:</span>

<span style="color: #87005f;">    False</span>

<span style="color: #87005f;">    &gt;&gt;&gt; confirm(prompt='Create Directory?', resp=False)</span>

<span style="color: #87005f;">    Create Directory? [n]|y: y</span>

<span style="color: #87005f;">    True</span>



<span style="color: #87005f;">    """</span>


    <span style="color: #af00ff;">if</span> prompt <span style="color: #af00ff;">is</span> <span style="color: #008787;">None</span>:
        prompt = <span style="color: #87005f;">'WARNING: DONOT run me twice and migration CANNOT be rolled back, GO?'</span>

    <span style="color: #af00ff;">if</span> resp:
        prompt = <span style="color: #87005f;">'%s [%s]|%s: '</span> % (prompt, <span style="color: #87005f;">'y'</span>, <span style="color: #87005f;">'n'</span>)
    <span style="color: #af00ff;">else</span>:
        prompt = <span style="color: #87005f;">'%s [%s]|%s: '</span> % (prompt, <span style="color: #87005f;">'n'</span>, <span style="color: #87005f;">'y'</span>)

    <span style="color: #af00ff;">while</span> <span style="color: #af00ff;">True</span>:
        ans = <span style="color: #5f5f87;">raw_input</span>(prompt)
        <span style="color: #af00ff;">if</span> <span style="color: #af00ff;">not</span> ans:
            <span style="color: #af00ff;">return</span> resp
        <span style="color: #af00ff;">if</span> ans <span style="color: #af00ff;">not</span> <span style="color: #af00ff;">in</span> [<span style="color: #87005f;">'y'</span>, <span style="color: #87005f;">'Y'</span>, <span style="color: #87005f;">'n'</span>, <span style="color: #87005f;">'N'</span>]:
            <span style="color: #af00ff;">print</span> <span style="color: #87005f;">'please enter y or n.'</span>
            <span style="color: #af00ff;">continue</span>
        <span style="color: #af00ff;">if</span> ans == <span style="color: #87005f;">'y'</span> <span style="color: #af00ff;">or</span> ans == <span style="color: #87005f;">'Y'</span>:
            <span style="color: #af00ff;">return</span> <span style="color: #af00ff;">True</span>
        <span style="color: #af00ff;">if</span> ans == <span style="color: #87005f;">'n'</span> <span style="color: #af00ff;">or</span> ans == <span style="color: #87005f;">'N'</span>:
            <span style="color: #af00ff;">return</span> <span style="color: #af00ff;">False</span>


<span style="color: #af00ff;">if</span> <span style="color: #5f5f87;">__name__</span>==<span style="color: #87005f;">"__main__"</span>:
    <span style="color: #87005f;">'''</span>
<span style="color: #87005f;">    @see http://linux.byexamples.com/archives/366/python-how-to-run-a-command-line-within-python/</span>

<span style="color: #87005f;">    '''</span>
    <span style="color: #af00ff;">try</span>:
        opts, args = getopt.getopt(sys.argv[1:], <span style="color: #87005f;">"hbmvpdc:r"</span>, [<span style="color: #87005f;">"help"</span>, <span style="color: #87005f;">"backup-database"</span>,<span style="color: #87005f;">"--migrate"</span>,<span style="color: #87005f;">"--verbose"</span>,<span style="color: #87005f;">"--package"</span>,<span style="color: #87005f;">"--delete-db-records"</span>,<span style="color: #87005f;">"--config="</span>,<span style="color: #87005f;">"--remote"</span>])
    <span style="color: #af00ff;">except</span> getopt.GetoptError, err:
        <span style="color: #af00ff;">print</span> str(err) <span style="color: #af0000;"># will print something like "option -a not recognized"</span>
        usage()
        <span style="color: #5f5f87;">exit</span>(2)

    <span style="color: #af00ff;">if</span> <span style="color: #5f5f87;">len</span>(opts)==0:
        usage()
        <span style="color: #5f5f87;">exit</span>(2)

    <span style="color: #af00ff;">for</span> o, a <span style="color: #af00ff;">in</span> opts:
        <span style="color: #af00ff;">if</span> o <span style="color: #af00ff;">in</span> (<span style="color: #87005f;">"-h"</span>, <span style="color: #87005f;">"--help"</span>):
            usage()
            sys.exit()
        <span style="color: #af00ff;">elif</span> o <span style="color: #af00ff;">in</span> (<span style="color: #87005f;">"-v"</span>, <span style="color: #87005f;">"--verbose"</span>):
            verbose=<span style="color: #af00ff;">True</span>
        <span style="color: #af00ff;">elif</span> o <span style="color: #af00ff;">in</span> (<span style="color: #87005f;">"-c"</span>, <span style="color: #87005f;">"--config"</span>):
            config=a
            <span style="color: #af00ff;">print</span> config
        <span style="color: #af00ff;">elif</span> o <span style="color: #af00ff;">in</span> (<span style="color: #87005f;">"-d"</span>, <span style="color: #87005f;">"--delete-db-records"</span>):
            delete=<span style="color: #af00ff;">True</span>
        <span style="color: #af00ff;">elif</span> o <span style="color: #af00ff;">in</span> (<span style="color: #87005f;">"-p"</span>, <span style="color: #87005f;">"--package"</span>):
            package()
            <span style="color: #5f5f87;">exit</span>(0)
        <span style="color: #af00ff;">elif</span> o <span style="color: #af00ff;">in</span> (<span style="color: #87005f;">"-b"</span>, <span style="color: #87005f;">"--backup-database"</span>):
            backup_db=<span style="color: #af00ff;">True</span>
        <span style="color: #af00ff;">elif</span> o <span style="color: #af00ff;">in</span> (<span style="color: #87005f;">"-m"</span>, <span style="color: #87005f;">"--migrate"</span>):
            migration=<span style="color: #af00ff;">True</span>
        <span style="color: #af00ff;">elif</span> o <span style="color: #af00ff;">in</span> (<span style="color: #87005f;">"-r"</span>, <span style="color: #87005f;">"--remote"</span>):
            remote=<span style="color: #af00ff;">True</span>
        <span style="color: #af00ff;">else</span>:
            <span style="color: #af00ff;">assert</span> <span style="color: #af00ff;">False</span>, <span style="color: #87005f;">"unhandled option"</span>

    <span style="color: #af00ff;">if</span> config!=<span style="color: #008787;">None</span>:
        read_config(config)

    <span style="color: #af00ff;">if</span> delete:
        delete_db_records()
        sys.exit()

    <span style="color: #af00ff;">if</span> verbose:
        show_info()
        sys.exit()

    <span style="color: #af00ff;">if</span> backup_db:
        backup_database()

    <span style="color: #af00ff;">if</span> migration==<span style="color: #af00ff;">False</span>:
        <span style="color: #5f5f87;">exit</span>(0)

    <span style="color: #af00ff;">if</span> confirm()==<span style="color: #af00ff;">False</span>:
        <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"Aborting ..."</span>
        <span style="color: #5f5f87;">exit</span>(0)

    make_sql_to_create_table()

    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==START MIGRATION"</span>

    <span style="color: #af0000;"># test data base connection</span>
    cmd=sql_cmd(<span style="color: #87005f;">'show databases;use %s;'</span> % (DB_NAME))
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>

    cmd=sql_script(<span style="color: #87005f;">"000.sql"</span>)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>

    os.system(sql_cmd(<span style="color: #87005f;">"insert into migrate (Action) values ('001.sql')"</span>))
    cmd=sql_script(<span style="color: #87005f;">"001.sql"</span>)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>

    os.system(sql_cmd(<span style="color: #87005f;">"insert into migrate (Action) values ('002.sql')"</span>))
    cmd=sql_script(<span style="color: #87005f;">"002.sql"</span>)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>

    os.system(sql_cmd(<span style="color: #87005f;">"insert into migrate (Action) values ('003.sql')"</span>))
    cmd=sql_script(<span style="color: #87005f;">"003.sql"</span>)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>

    os.system(sql_cmd(<span style="color: #87005f;">"insert into migrate (Action) values ('004.sql')"</span>))
    cmd=sql_script(<span style="color: #87005f;">"004.sql"</span>)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>

    os.system(sql_cmd(<span style="color: #87005f;">"insert into migrate (Action) values ('005.sql')"</span>))
    cmd=sql_script(<span style="color: #87005f;">"005.sql"</span>)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>

    os.system(sql_cmd(<span style="color: #87005f;">"insert into migrate (Action) values ('006.sql')"</span>))
    cmd=sql_script(<span style="color: #87005f;">"006.sql"</span>)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>

    os.system(sql_cmd(<span style="color: #87005f;">"insert into migrate (Action) values ('100.sql')"</span>))
    cmd=sql_script(<span style="color: #87005f;">"100.sql"</span>)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>

    cmd=sql_script(<span style="color: #87005f;">"insert_sample_sources.sql"</span>)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>

    cmd=sql_script(<span style="color: #87005f;">"app_config.sql"</span>)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==WILL RUN [ %s ]"</span> % (cmd)
    os.system(cmd)
    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==DONE"</span>

    <span style="color: #af00ff;">print</span> <span style="color: #87005f;">"==END MIGRATION"</span>
<span style="color: #af0000;"># vim: set expandtab tabstop=4 shiftwidth=4:</span>

</pre>  </body></html>