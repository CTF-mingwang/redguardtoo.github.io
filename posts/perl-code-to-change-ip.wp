<html><body><p>I write this script for a real project. It changes ip of every node in a local network. All the information related to our customer is deleted. </p>
<p>if you see the test() function and you will notice "assert" lines. Yes, I believe in <strong>TDD (Test Drivern Development)</strong>. </p>

<p>

</p><pre class="src src-perl"><span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">!/usr/bin/perl</span>



<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">File name: chgip</span>

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">Description : change ip of every node in the local network</span>

<span style="color: #b5bd68;">require</span> <span style="color: #8abeb7;">"assert.pl"</span>;

<span style="color: #b5bd68;">use</span> <span style="color: #de935f;">File</span>::Basename;



<span style="color: #969896; font-style: italic;">#</span>

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">Globals</span>

<span style="color: #969896; font-style: italic;">#</span>

<span style="color: #b5bd68;">use</span> <span style="color: #de935f;">vars</span> qw<span style="color: #8abeb7;">/ %opt /</span>;



<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">valid input:</span>

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">192.168.30.151 node1 -&gt; change /etc/hosts ;$k= node1;</span>

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">192.168.30.151 node1 eth0 none-&gt; NOT change /etc/hosts;$k=node1 eth0</span>

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">192.168.30.151 node1 eth1 none-&gt; NOT change /etc/hosts;$k=node1 eth1</span>

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">192.168.30.151 192.168.30.111 -&gt; NOT change /etc/hosts;$k= 192.168.30.111</span>

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">192.168.30.151 node1 eth1 default -&gt; change /etc/hosts;$k=node1 eth1 default </span>

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">192.168.30.151 node1 eth1 -&gt; "eth1" will be skipped andit equals </span>

<span style="color: #969896; font-style: italic;">#                          </span><span style="color: #969896; font-style: italic;">192.168.30.151 node1</span>

<span style="color: #969896; font-style: italic;">#                         </span><span style="color: #969896; font-style: italic;">cat /etc/hosts/ and you will see</span>

<span style="color: #969896; font-style: italic;">#                         </span><span style="color: #969896; font-style: italic;">"150.245.178.31 node1 node1.dcinema.com", </span>

<span style="color: #969896; font-style: italic;">#                         </span><span style="color: #969896; font-style: italic;">we will avoid confilict with such lines in /etc/hosts</span>



$<span style="color: #f0c674;">USE_SSH</span>=1;

$<span style="color: #f0c674;">USE_TELNET</span>=2;

<span style="color: #969896; font-style: italic;">############################</span>

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">main</span>

<span style="color: #969896; font-style: italic;">############################</span>

$<span style="color: #f0c674;">NDEBUG</span>=0; <span style="color: #969896; font-style: italic;"># NDEBUG  NOT debug version</span>



&amp;<span style="color: #81a2be;">init</span>();

<span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">opt</span>{h}){
    usage();<span style="color: #b5bd68;">exit</span> 1;
}



$<span style="color: #f0c674;">NDEBUG</span>=$<span style="color: #f0c674;">opt</span>{d}?0:1;



<span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">NDEBUG</span>){
    <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">pipein</span>;

    <span style="color: #b5bd68;">if</span>(&amp;<span style="color: #81a2be;">is_interactive</span>()){
        <span style="color: #b5bd68;">if</span>($#<span style="color: #f0c674; text-decoration: underline;">ARGV</span>==-1){
            usage();<span style="color: #b5bd68;">exit</span> 1;
        }
        @<span style="color: #f0c674; text-decoration: underline;">pipein</span>=split(<span style="color: #8abeb7;">/[rn]+/</span>,$<span style="color: #f0c674;">ARGV</span>[$#<span style="color: #f0c674; text-decoration: underline;">ARGV</span>]);
    }
    <span style="color: #b5bd68;">else</span>{
        @<span style="color: #f0c674; text-decoration: underline;">pipein</span>=;
    }


<span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">print "pipein[0]=$pipein[0]n"; #debug</span>


    <span style="color: #b5bd68;">if</span>(!$<span style="color: #f0c674;">opt</span>{a} &amp;&amp; !$<span style="color: #f0c674;">opt</span>{p}){
        $<span style="color: #f0c674;">opt</span>{a}=$<span style="color: #f0c674;">USE_SSH</span>;
    }

    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">arp</span>;
    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">opt</span>{a}){
        $<span style="color: #f0c674;">arp</span>=&amp;<span style="color: #81a2be;">get_hosts_from_arp</span>();
    }
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">h</span>=&amp;<span style="color: #81a2be;">who_will_change</span>(@<span style="color: #f0c674; text-decoration: underline;">pipein</span>);

    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">pingable</span>;
    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">opt</span>{p}){
        $<span style="color: #f0c674;">pingable</span>=&amp;<span style="color: #81a2be;">who_are_pingable</span>($<span style="color: #f0c674;">h</span>);
    }

    <span style="color: #de935f;">my</span> %<span style="color: #f0c674; text-decoration: underline;">whose_ip_changed</span>=();

    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">local_restart_later</span>=0;
<span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">for my $it (keys %$h){ print "key=$it:val=$h-&gt;{$it}n"; } #debug </span>
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">pingcmd</span>=&amp;<span style="color: #81a2be;">get_pingcmd</span>();
    <span style="color: #b5bd68;">for</span> <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">k</span> (sort keys %$<span style="color: #f0c674;">h</span>){
        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">a</span>=split(<span style="color: #8abeb7;">/[st]+/</span>,$<span style="color: #f0c674;">k</span>);
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">s</span>=<span style="color: #8abeb7;">`hostname`</span>;chomp($<span style="color: #f0c674;">s</span>);
        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">a</span>[0] eq $<span style="color: #f0c674;">s</span>){
            $<span style="color: #f0c674;">local_restart_later</span>=1;
        }

        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">opt</span>{a}){
            <span style="color: #b5bd68;">if</span>(!exists($<span style="color: #f0c674;">arp</span>-&gt;{$<span style="color: #f0c674;">a</span>[0]})){ <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">s</span> ne $<span style="color: #f0c674;">a</span>[0]){ <span style="color: #b5bd68;">next</span>; } }
        }

        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">opt</span>{p}){
            <span style="color: #b5bd68;">if</span>(!exists($<span style="color: #f0c674;">pingable</span>-&gt;{$<span style="color: #f0c674;">a</span>[0]})){ <span style="color: #b5bd68;">next</span>; }
        }
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">netcard</span>=<span style="color: #8abeb7;">"eth0"</span>;
        <span style="color: #b5bd68;">if</span>($#<span style="color: #f0c674; text-decoration: underline;">a</span>==2){
            <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">a</span>[2] eq <span style="color: #8abeb7;">"default"</span> || $<span style="color: #f0c674;">a</span>[2] eq <span style="color: #8abeb7;">"none"</span>){
                $<span style="color: #f0c674;">netcard</span>=$<span style="color: #f0c674;">a</span>[1];
            }
        }
        <span style="color: #969896; font-style: italic;">#print "netcard=$netcardn"; #debug</span>
        print <span style="color: #8abeb7;">"changing ip of $netcard on $a[0] ... "</span>;
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">try_telnet</span>=0;
        $<span style="color: #f0c674;">ret</span>=&amp;<span style="color: #81a2be;">change_ip</span>($<span style="color: #f0c674;">a</span>[0],$<span style="color: #f0c674;">h</span>-&gt;{$<span style="color: #f0c674;">k</span>},<span style="color: #8abeb7;">"/etc/sysconfig/network-scripts"</span>,
                        $<span style="color: #f0c674;">netcard</span>,$<span style="color: #f0c674;">try_telnet</span>);
        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">ret</span>){
            print <span style="color: #8abeb7;">"failed!n"</span>;
        }
        <span style="color: #b5bd68;">else</span>{
            $<span style="color: #f0c674;">whose_ip_changed</span>{$<span style="color: #f0c674;">a</span>[0]}=1;
            print <span style="color: #8abeb7;">"succeededn"</span>;
        }
        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">try_telnet</span>){
            <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">opt</span>{a}){
                $<span style="color: #f0c674;">arp</span>-&gt;{$<span style="color: #f0c674;">a</span>[0]}=$<span style="color: #f0c674;">USE_TELNET</span>;
            }

            <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">opt</span>{p}){
                $<span style="color: #f0c674;">pingable</span>-&gt;{$<span style="color: #f0c674;">a</span>[0]}=$<span style="color: #f0c674;">USE_TELNET</span>;
            }
        }
    }


<span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">change /etc/host, every node need it</span>
    <span style="color: #de935f;">my</span> %<span style="color: #f0c674; text-decoration: underline;">nodes_restarted</span>=();
    system(<span style="color: #8abeb7;">"cp -f /etc/hosts /tmp/hosts.new &gt;/dev/null 2&gt;&amp;1"</span>);
    &amp;<span style="color: #81a2be;">change_etc_hosts</span>(<span style="color: #8abeb7;">"/tmp/hosts.new"</span>,$<span style="color: #f0c674;">h</span>);


<span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">distribute /etc/hosts</span>
    <span style="color: #b5bd68;">for</span> <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">k</span> (keys %$<span style="color: #f0c674;">h</span>){
        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">a</span>=split(<span style="color: #8abeb7;">/[st]+/</span>,$<span style="color: #f0c674;">k</span>);
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">s</span>=<span style="color: #8abeb7;">`hostname`</span>;chomp($<span style="color: #f0c674;">s</span>);
        <span style="color: #b5bd68;">if</span>( $<span style="color: #f0c674;">s</span> eq $<span style="color: #f0c674;">a</span>[0]){
            <span style="color: #969896; font-style: italic;">#print "s=$s;k=$k****n"; #debug</span>
            <span style="color: #969896; font-style: italic;">#you need reinstall ssh key, if you change anyone's ip and you want </span>
            <span style="color: #969896; font-style: italic;">#ssh it again </span>
            <span style="color: #b5bd68;">next</span>;
        }

        <span style="color: #969896; font-style: italic;">#if we cannot connect to the node, how can we send it /etc/hosts</span>
        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">opt</span>{a}){
            <span style="color: #b5bd68;">if</span>(!exists($<span style="color: #f0c674;">arp</span>-&gt;{$<span style="color: #f0c674;">a</span>[0]}) || $<span style="color: #f0c674;">arp</span>-&gt;{$<span style="color: #f0c674;">a</span>[0]}==$<span style="color: #f0c674;">USE_TELNET</span> )
            {
                <span style="color: #b5bd68;">next</span>;
            }
        }

        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">opt</span>{p}){
            <span style="color: #b5bd68;">if</span>(!exists($<span style="color: #f0c674;">pingable</span>-&gt;{$<span style="color: #f0c674;">a</span>[0]}) || $<span style="color: #f0c674;">pingable</span>-&gt;{$<span style="color: #f0c674;">a</span>[0]}==$<span style="color: #f0c674;">USE_TELNET</span> )
            {
                <span style="color: #b5bd68;">next</span>;
            }
        }

        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">a</span>=split(<span style="color: #8abeb7;">/[st]+/</span>,$<span style="color: #f0c674;">k</span>);
        <span style="color: #969896; font-style: italic;">#it's ridiculous to restart same pc again and again!</span>
        <span style="color: #b5bd68;">if</span>(!exists($<span style="color: #f0c674;">nodes_restarted</span>{$<span style="color: #f0c674;">a</span>[0]})){
            <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">ret</span>=0;
            print <span style="color: #8abeb7;">"distributing new /etc/hosts to $a[0] ... "</span>;
            $<span style="color: #f0c674;">ret</span>=system(<span style="color: #8abeb7;">"scp /tmp/hosts.new root@$a[0]:/etc/hosts &gt;/dev/null 2&gt;&amp;1"</span>);
            <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">ret</span>){
                print <span style="color: #8abeb7;">"failed!n"</span>;
            }
            <span style="color: #b5bd68;">else</span>{
                print <span style="color: #8abeb7;">"succeededn"</span>;
            }



            <span style="color: #969896; font-style: italic;">#http://groups.google.com/group/linux.gentoo.user/browse_frm/thread/</span>
            <span style="color: #969896; font-style: italic;">#       677f23ea20dd85a/506384edeba2c270?lnk=st&amp;q=ssh+network+restart&amp;rnum=5&amp;hl</span>
            <span style="color: #969896; font-style: italic;">#       =zh-CN#506384edeba2c270</span>
            <span style="color: #969896; font-style: italic;">#print `cat /etc/hosts|grep node1`; #debug</span>
            <span style="color: #969896; font-style: italic;">#nohup return too quickly, before ssh starts, we've already changed /etc/hosts</span>
            <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">restart_cmd</span>=<span style="color: #8abeb7;">"/etc/init.d/network restart;/etc/init.d/rmiregistry restart;"</span>;
            <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">a</span>[0]=~<span style="color: #8abeb7;">/node[0-9]+/</span>){
                $<span style="color: #f0c674;">restart_cmd</span>.=<span style="color: #8abeb7;">"restart_some_scripts;"</span>;
            }
            <span style="color: #b5bd68;">elsif</span>($<span style="color: #f0c674;">a</span>[0]=~<span style="color: #8abeb7;">/ekfp[0-9]+/</span>){
                $<span style="color: #f0c674;">restart_cmd</span>.=<span style="color: #8abeb7;">"fp_restart;"</span>;
            }
            <span style="color: #969896; font-style: italic;">#print "restart_cmd=$restart_cmdn"; #debug</span>
            $<span style="color: #f0c674;">ret</span>=system(<span style="color: #8abeb7;">"nohup ssh root@"</span>.&amp;<span style="color: #81a2be;">get_ip</span>($<span style="color: #f0c674;">a</span>[0]).<span style="color: #8abeb7;">" '$restart_cmd' &gt;/dev/null 2&gt;&amp;1 &amp;"</span>);
            $<span style="color: #f0c674;">nodes_restarted</span>{$<span style="color: #f0c674;">a</span>[0]}=1;
        }
        <span style="color: #b5bd68;">else</span>{
            $<span style="color: #f0c674;">nodes_restarted</span>{$<span style="color: #f0c674;">a</span>[0]}+=1;
        }
    } <span style="color: #969896; font-style: italic;">#end of for</span>


<span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">print("local_restart_later=$local_restart_latern");#debug</span>
    system(<span style="color: #8abeb7;">"cp -f /tmp/hosts.new /etc/hosts &gt;/dev/null 2&gt;&amp;1"</span>);
<span style="color: #969896; font-style: italic;">#</span><span style="color: #969896; font-style: italic;">print `cat /etc/hosts|grep node1`; #debug</span>
    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">local_restart_later</span> ){
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">restart_cmd</span>=<span style="color: #8abeb7;">"/etc/init.d/network restart &gt;/dev/null 2&gt;&amp;1;"</span>;
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">s</span>=<span style="color: #8abeb7;">`hostname`</span>;chomp($<span style="color: #f0c674;">s</span>);
        print <span style="color: #8abeb7;">"restarting $s ... "</span>;
        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">s</span>=~<span style="color: #8abeb7;">/manager.*/</span> ){
            $<span style="color: #f0c674;">restart_cmd</span>.=<span style="color: #8abeb7;">"restart_some_scripts &gt;/dev/null 2&gt;&amp;1;"</span>;
        }
        <span style="color: #b5bd68;">else</span>{
            $<span style="color: #f0c674;">restart_cmd</span>.=<span style="color: #8abeb7;">"restart_some_scripts &gt;/dev/null 2&gt;&amp;1;"</span>;
        }
        <span style="color: #969896; font-style: italic;">#assume this is a cms or tms</span>
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">ret</span>=system($<span style="color: #f0c674;">restart_cmd</span>);
        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">ret</span>){
            print <span style="color: #8abeb7;">"failed!n"</span>;
        }
        <span style="color: #b5bd68;">else</span>{
            print <span style="color: #8abeb7;">"succeededn"</span>;
        }

    }

    print <span style="color: #8abeb7;">"finished to change ip!n"</span>;
    system(<span style="color: #8abeb7;">"rm nohup.out &gt;/dev/null 2&gt;&amp;1"</span>);
    system(<span style="color: #8abeb7;">"rm ~/.ssh/known_hosts&gt;/dev/null 2&gt;&amp;1"</span>);

    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">opt</span>{a}){
        print <span style="color: #8abeb7;">"updating arp cache ... "</span>;
        <span style="color: #b5bd68;">for</span> <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">k</span> (keys %<span style="color: #f0c674; text-decoration: underline;">whose_ip_changed</span>){
            <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">pingcmd</span>=&amp;<span style="color: #81a2be;">get_pingcmd</span>();
            system(<span style="color: #8abeb7;">"$pingcmd $k &gt;/dev/null 2&gt;&amp;1"</span>);
        }
        print <span style="color: #8abeb7;">"finishedn"</span>;
    }
}<span style="color: #969896; font-style: italic;">#if(0)</span>



<span style="color: #969896; font-style: italic;">############################</span>

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">test</span>

<span style="color: #969896; font-style: italic;">############################</span>

<span style="color: #b5bd68;">if</span>(!$<span style="color: #f0c674;">NDEBUG</span>){
    &amp;<span style="color: #81a2be;">test</span>();
}<span style="color: #969896; font-style: italic;">#if(0)</span>



<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">test</span>

{


    <span style="color: #b5bd68;">if</span>(1){
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">hostname</span>=<span style="color: #8abeb7;">`hostname`</span>;chomp($<span style="color: #f0c674;">hostname</span>);
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">pipein</span>;
        <span style="color: #b5bd68;">if</span>(&amp;<span style="color: #81a2be;">is_interactive</span>()){
            @<span style="color: #f0c674; text-decoration: underline;">pipein</span>=split(<span style="color: #8abeb7;">/[rn]/</span>,<span style="color: #8abeb7;">"127.0.0.9 $hostname"</span>);
            <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">h</span>=&amp;<span style="color: #81a2be;">who_will_change</span>(@<span style="color: #f0c674; text-decoration: underline;">pipein</span>);
            <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">pingable</span>=&amp;<span style="color: #81a2be;">who_are_pingable</span>($<span style="color: #f0c674;">h</span>);
            assert(exists($<span style="color: #f0c674;">pingable</span>-&gt;{$<span style="color: #f0c674;">hostname</span>}));
        }
        <span style="color: #b5bd68;">else</span>{
            @<span style="color: #f0c674; text-decoration: underline;">pipein</span>=;
            <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">h</span>=&amp;<span style="color: #81a2be;">who_will_change</span>(@<span style="color: #f0c674; text-decoration: underline;">pipein</span>);
            <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">pingable</span>=&amp;<span style="color: #81a2be;">who_are_pingable</span>($<span style="color: #f0c674;">h</span>);
            print <span style="color: #8abeb7;">"*********who are pingable**********beginn"</span>;
            <span style="color: #b5bd68;">for</span> <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">k</span> (keys %$<span style="color: #f0c674;">pingable</span>){
                print <span style="color: #8abeb7;">"key=$kn"</span>;
                print <span style="color: #8abeb7;">"val=$pingable-&gt;{$k}n"</span>;
            }
            print <span style="color: #8abeb7;">"*********who are pingable**********endn"</span>;
        }
    }

    <span style="color: #b5bd68;">if</span>(1){
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">id</span>=&amp;<span style="color: #81a2be;">unique_id</span>();
        print <span style="color: #8abeb7;">"id=$idn"</span>;
        assert( $<span style="color: #f0c674;">id</span> ne <span style="color: #8abeb7;">""</span>);
    }<span style="color: #969896; font-style: italic;">#if(0)</span>

    <span style="color: #b5bd68;">if</span>(1){
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">id</span>=<span style="color: #8abeb7;">"test_set_one_card"</span>;
        print <span style="color: #8abeb7;">"file written by set_onecard=$idn"</span>;
        <span style="color: #8abeb7;">`echo "IPADDR=192.168.30.100" &gt; $id`</span>;
        <span style="color: #8abeb7;">`echo "NETWORK=192.168.30.0" &gt;&gt; $id`</span>;
        <span style="color: #8abeb7;">`echo "BROADCAST=192.168.30.255" &gt;&gt; $id`</span>;
        <span style="color: #8abeb7;">`echo "GATEWAY=192.168.30.1" &gt;&gt; $id`</span>;
        &amp;<span style="color: #81a2be;">set_one_card</span>(<span style="color: #8abeb7;">"11.168.30.100"</span>,$<span style="color: #f0c674;">id</span>);
        open(F,$<span style="color: #f0c674;">id</span>);
        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">lines</span>=;
        close(F);
        chomp($<span style="color: #f0c674;">lines</span>[0]);assert($<span style="color: #f0c674;">lines</span>[0] eq <span style="color: #8abeb7;">"IPADDR=11.168.30.100"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[1]);assert($<span style="color: #f0c674;">lines</span>[1] eq <span style="color: #8abeb7;">"NETWORK=11.168.30.0"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[2]);assert($<span style="color: #f0c674;">lines</span>[2] eq <span style="color: #8abeb7;">"BROADCAST=11.168.30.255"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[3]);assert($<span style="color: #f0c674;">lines</span>[3] eq <span style="color: #8abeb7;">"GATEWAY=11.168.30.1"</span>);
        <span style="color: #8abeb7;">`rm $id`</span>;
    }
    <span style="color: #b5bd68;">if</span>(1){
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">hostname</span>=<span style="color: #8abeb7;">`hostname`</span>;chomp($<span style="color: #f0c674;">hostname</span>);
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">ip</span>=get_ip($<span style="color: #f0c674;">hostname</span>);
        print <span style="color: #8abeb7;">"ip=$ipn"</span>;
        assert(&amp;<span style="color: #81a2be;">is_valid_ip</span>($<span style="color: #f0c674;">ip</span>));
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">rubbish</span>=get_ip(<span style="color: #8abeb7;">"rubbish"</span>);
        assert( $<span style="color: #f0c674;">rubbish</span> eq <span style="color: #8abeb7;">"rubbish"</span>);
    }



    <span style="color: #b5bd68;">if</span>(1){
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">p</span>=<span style="color: #8abeb7;">"127.0.0.9 node1n0.0.0.0 node2"</span>;
        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">pipein</span>=split(<span style="color: #8abeb7;">/[rn]+/</span>,$<span style="color: #f0c674;">p</span>);
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">h</span>=&amp;<span style="color: #81a2be;">who_will_change</span>(@<span style="color: #f0c674; text-decoration: underline;">pipein</span>);
        assert($<span style="color: #f0c674;">h</span>-&gt;{<span style="color: #8abeb7;">'node1'</span>} eq <span style="color: #8abeb7;">'127.0.0.9'</span>);
        assert($<span style="color: #f0c674;">h</span>-&gt;{<span style="color: #8abeb7;">'node2'</span>} eq <span style="color: #8abeb7;">'0.0.0.0'</span>);
        <span style="color: #8abeb7;">`echo "1.1.1.1 node1" &gt; hosts`</span>;
        <span style="color: #8abeb7;">`echo "1.1.1.1 node2 node2.dcinema.com" &gt;&gt; hosts`</span>;
        <span style="color: #8abeb7;">`echo "1.1.1.1 node3" &gt;&gt; hosts`</span>;
        &amp;<span style="color: #81a2be;">change_etc_hosts</span>(<span style="color: #8abeb7;">"hosts"</span>,$<span style="color: #f0c674;">h</span>);
        open(F,<span style="color: #8abeb7;">"&lt;hosts"</span>);
        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">lines</span>=;
        close(F);
        chomp($<span style="color: #f0c674;">lines</span>[0]);assert($<span style="color: #f0c674;">lines</span>[0] eq <span style="color: #8abeb7;">"127.0.0.9 node1"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[1]);assert($<span style="color: #f0c674;">lines</span>[1] eq <span style="color: #8abeb7;">"0.0.0.0 node2 node2.dcinema.com"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[2]);assert($<span style="color: #f0c674;">lines</span>[2] eq <span style="color: #8abeb7;">"1.1.1.1 node3"</span>);
    }<span style="color: #969896; font-style: italic;">#if(0)</span>

    <span style="color: #b5bd68;">if</span>(1){
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">hostname</span>=<span style="color: #8abeb7;">`hostname`</span>;chomp($<span style="color: #f0c674;">hostname</span>);
        print(<span style="color: #8abeb7;">"hostname=$hostnamen"</span>);
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">p</span>=<span style="color: #8abeb7;">"11.168.30.10 $hostname"</span>;
        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">pipein</span>=split(<span style="color: #8abeb7;">/[rn]+/</span>,$<span style="color: #f0c674;">p</span>);
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">h</span>=&amp;<span style="color: #81a2be;">who_will_change</span>(@<span style="color: #f0c674; text-decoration: underline;">pipein</span>);
        assert($<span style="color: #f0c674;">h</span>-&gt;{$<span style="color: #f0c674;">hostname</span>} eq <span style="color: #8abeb7;">'11.168.30.10'</span>);
        <span style="color: #8abeb7;">`echo "DEVICE=eth0" &gt; ifcfg-eth0`</span>;
        <span style="color: #8abeb7;">`echo "IPADDR=192.168.30.10" &gt;&gt; ifcfg-eth0`</span>;
        <span style="color: #8abeb7;">`echo "NETWORK=192.168.30.0" &gt;&gt; ifcfg-eth0`</span>;
        <span style="color: #8abeb7;">`echo "NETMASK=255.255.255.0" &gt;&gt; ifcfg-eth0`</span>;
        <span style="color: #8abeb7;">`echo "ONBOOT=yes" &gt;&gt; ifcfg-eth0`</span>;
        <span style="color: #8abeb7;">`echo "TYPE=Ethernet" &gt;&gt; ifcfg-eth0`</span>;
        <span style="color: #8abeb7;">`echo "GATEWAY=192.168.30.1" &gt;&gt; ifcfg-eth0`</span>;
        <span style="color: #8abeb7;">`echo "BROADCAST=192.168.30.255" &gt;&gt; ifcfg-eth0`</span>;
        <span style="color: #b5bd68;">use</span> <span style="color: #de935f;">Cwd</span>;
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">d</span>=getcwd;
        print <span style="color: #8abeb7;">"cwd=$dn"</span>;
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">pingcmd</span>=&amp;<span style="color: #81a2be;">get_pingcmd</span>();
        <span style="color: #b5bd68;">for</span> <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">k</span> (keys %$<span style="color: #f0c674;">h</span>){
            <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">ret</span>=0;
            <span style="color: #b5bd68;">if</span>(system(<span style="color: #8abeb7;">"$pingcmd $k"</span>)!=0){
                <span style="color: #969896; font-style: italic;">#meanless to ping self</span>
                <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">s</span> ne $<span style="color: #f0c674;">a</span>[0]) { <span style="color: #b5bd68;">next</span>; }
            }

            <span style="color: #969896; font-style: italic;"># $k: node1</span>
            <span style="color: #969896; font-style: italic;">#     node1 eth1</span>
            <span style="color: #969896; font-style: italic;">#     eckp1 ech1 default</span>
            <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">netcard</span>=<span style="color: #8abeb7;">"eth0"</span>;
            <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">a</span>=split(<span style="color: #8abeb7;">/[st]+/</span>,$<span style="color: #f0c674;">k</span>);
            <span style="color: #b5bd68;">if</span>($#<span style="color: #f0c674; text-decoration: underline;">a</span>==2){
                $<span style="color: #f0c674;">netcard</span>=$<span style="color: #f0c674;">a</span>[1];
            }
            <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">try_telnet</span>;
            $<span style="color: #f0c674;">ret</span>=&amp;<span style="color: #81a2be;">change_ip</span>($<span style="color: #f0c674;">a</span>[0],$<span style="color: #f0c674;">h</span>-&gt;{$<span style="color: #f0c674;">k</span>},$<span style="color: #f0c674;">d</span>,$<span style="color: #f0c674;">netcard</span>,$<span style="color: #f0c674;">try_telnet</span>);
        }
        open(F,<span style="color: #8abeb7;">"&lt;ifcfg-eth0"</span>);
        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">lines</span>=;
        close(F);
        chomp($<span style="color: #f0c674;">lines</span>[0]);assert($<span style="color: #f0c674;">lines</span>[0] eq <span style="color: #8abeb7;">"DEVICE=eth0"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[1]);assert($<span style="color: #f0c674;">lines</span>[1] eq <span style="color: #8abeb7;">"IPADDR=11.168.30.10"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[2]);assert($<span style="color: #f0c674;">lines</span>[2] eq <span style="color: #8abeb7;">"NETWORK=11.168.30.0"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[3]);assert($<span style="color: #f0c674;">lines</span>[3] eq <span style="color: #8abeb7;">"NETMASK=255.255.255.0"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[4]);assert($<span style="color: #f0c674;">lines</span>[4] eq <span style="color: #8abeb7;">"ONBOOT=yes"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[5]);assert($<span style="color: #f0c674;">lines</span>[5] eq <span style="color: #8abeb7;">"TYPE=Ethernet"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[6]);assert($<span style="color: #f0c674;">lines</span>[6] eq <span style="color: #8abeb7;">"GATEWAY=11.168.30.1"</span>);
        chomp($<span style="color: #f0c674;">lines</span>[7]);assert($<span style="color: #f0c674;">lines</span>[7] eq <span style="color: #8abeb7;">"BROADCAST=11.168.30.255"</span>);
    }

    <span style="color: #b5bd68;">if</span>(0){
        <span style="color: #de935f;">my</span> ($<span style="color: #f0c674;">name</span>,$<span style="color: #f0c674;">dir</span>,$<span style="color: #f0c674;">suffix</span>)=fileparse($<span style="color: #f0c674;">0</span>);
        print <span style="color: #8abeb7;">"name=$name;dir=$dir;suffix=$suffix;n"</span>;
        assert(-e $<span style="color: #f0c674;">dir</span>.<span style="color: #8abeb7;">"chg_jnior_ip.exp"</span>);
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">pingcmd</span>=&amp;<span style="color: #81a2be;">get_pingcmd</span>();
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">e1ip</span>=&amp;<span style="color: #81a2be;">get_ip</span>(<span style="color: #8abeb7;">"node1-auto"</span>);
        <span style="color: #b5bd68;">if</span>(!system(<span style="color: #8abeb7;">"$pingcmd node1-auto"</span>)){
            print <span style="color: #8abeb7;">"ip of node1-auto=$e1ipn"</span>;
            assert($<span style="color: #f0c674;">e1ip</span> ne <span style="color: #8abeb7;">"192.168.30.52"</span>);
            assert(system(<span style="color: #8abeb7;">"$pingcmd 192.168.30.52"</span>));
            <span style="color: #b5bd68;">if</span>(system($<span style="color: #f0c674;">dir</span>.<span style="color: #8abeb7;">"chg_jnior_ip.exp node1-auto 192.168.30.52"</span>)){
                assert(0);
            }
            sleep(8); <span style="color: #969896; font-style: italic;">#wait jnior</span>
            assert(!system(<span style="color: #8abeb7;">"$pingcmd 192.168.30.52"</span>));
            assert(system(<span style="color: #8abeb7;">"$pingcmd node1-auto"</span>));
            <span style="color: #b5bd68;">if</span>(system($<span style="color: #f0c674;">dir</span>.<span style="color: #8abeb7;">"chg_jnior_ip.exp 192.168.30.52 $e1ip"</span>)){
                assert(0);
            }
            sleep(8); <span style="color: #969896; font-style: italic;">#wait jnior</span>
            assert(system(<span style="color: #8abeb7;">"$pingcmd 192.168.30.52"</span>));
            assert(!system(<span style="color: #8abeb7;">"$pingcmd node1-auto"</span>));
        }
        <span style="color: #b5bd68;">else</span>{
            print <span style="color: #8abeb7;">"cannnot connect to node1-auto!n"</span>;
        }
    }

    <span style="color: #b5bd68;">if</span>(1){
        <span style="color: #de935f;">my</span> ($<span style="color: #f0c674;">network</span>,$<span style="color: #f0c674;">broadcast</span>)=&amp;<span style="color: #81a2be;">get_netprop</span>(<span style="color: #8abeb7;">"192.168.1.1"</span>);
        assert($<span style="color: #f0c674;">network</span> eq <span style="color: #8abeb7;">"192.168.1.0"</span>);
        assert($<span style="color: #f0c674;">broadcast</span> eq <span style="color: #8abeb7;">"192.168.1.255"</span>);
    }



    <span style="color: #b5bd68;">if</span>(1){
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">h</span>=&amp;<span style="color: #81a2be;">get_hosts_from_arp</span>();
        <span style="color: #b5bd68;">foreach</span> <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">k</span> (keys %$<span style="color: #f0c674;">h</span>){
            print <span style="color: #8abeb7;">"key=$k;val=$h-&gt;{$k}n"</span>; <span style="color: #969896; font-style: italic;">#debug</span>
        }
    }


}



<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">a</span>()

{
    <span style="color: #b5bd68;">if</span>(!$<span style="color: #f0c674;">NDEBUG</span>){
        assert($<span style="color: #f0c674;">_</span>[$[]);
    }
}



<span style="color: #969896; font-style: italic;">############################</span>

<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">subroutines</span>

<span style="color: #969896; font-style: italic;">############################</span>

<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">get_ip</span>{
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">hostname</span>=shift;
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">pingcmd</span>=&amp;<span style="color: #81a2be;">get_pingcmd</span>();
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">ip</span>=<span style="color: #8abeb7;">`$pingcmd $hostname`</span>;
    <span style="color: #969896; font-style: italic;">#PING node1 (192.168.30.111) 56(84) bytes of data.</span>
    <span style="color: #969896; font-style: italic;">#64 bytes from node1 (192.168.30.111): icmp_seq=0 ttl=64 time=0.129 ms</span>
    <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">a</span>=split(<span style="color: #8abeb7;">/[rn]+/</span>,<span style="color: #8abeb7;">`$pingcmd $hostname`</span>);
    chomp($<span style="color: #f0c674;">a</span>[0]);
<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">on cygwin, the first line is empty</span>
    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">a</span>[0] eq <span style="color: #8abeb7;">""</span>){ $<span style="color: #f0c674;">a</span>[0]=$<span style="color: #f0c674;">a</span>[1]; }
    <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">v</span>=split(<span style="color: #8abeb7;">/[st]+/</span>,$<span style="color: #f0c674;">a</span>[0]);
    $<span style="color: #f0c674;">v</span>[2]=~s<span style="color: #8abeb7;">/[()[] ]*//</span>g;
    <span style="color: #b5bd68;">if</span>(!&amp;<span style="color: #81a2be;">is_valid_ip</span>($<span style="color: #f0c674;">v</span>[2])){
        <span style="color: #b5bd68;">return</span> $<span style="color: #f0c674;">hostname</span>;
    }
    <span style="color: #b5bd68;">return</span> $<span style="color: #f0c674;">v</span>[2];
}



<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">is_interactive</span> {
    <span style="color: #b5bd68;">return</span> -t STDIN &amp;&amp; -t STDOUT;
}





<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">who_will_change</span>

{
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">ls</span>=shift;
    <span style="color: #de935f;">my</span> %<span style="color: #f0c674; text-decoration: underline;">h</span>=();
    <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">rlt</span>=grep(<span style="color: #8abeb7;">/^[0-9.]+.*/</span>,@$<span style="color: #f0c674;">ls</span>);
    <span style="color: #969896; font-style: italic;"># change ip address to 127.0.0.1 is crazy idea!</span>
    <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">rlt</span>=grep(!<span style="color: #8abeb7;">/^127.0.0.1.*/</span>,@<span style="color: #f0c674; text-decoration: underline;">rlt</span>);
    <span style="color: #b5bd68;">foreach</span> (@<span style="color: #f0c674; text-decoration: underline;">rlt</span>){
        chomp($<span style="color: #f0c674;">_</span>);
        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">_</span> eq <span style="color: #8abeb7;">""</span>){<span style="color: #b5bd68;">next</span>;}
        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">a</span>=split(<span style="color: #8abeb7;">/[st]+/</span>);
        <span style="color: #b5bd68;">if</span>($#<span style="color: #f0c674; text-decoration: underline;">a</span> == 0){<span style="color: #b5bd68;">next</span>;}
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">k</span>=$<span style="color: #f0c674;">a</span>[1];
        <span style="color: #b5bd68;">for</span>(<span style="color: #de935f;">my</span> $<span style="color: #f0c674;">i</span>=2;$<span style="color: #f0c674;">i</span>&lt;=$#<span style="color: #f0c674; text-decoration: underline;">a</span>;$<span style="color: #f0c674;">i</span>++){
            $<span style="color: #f0c674;">k</span>.=<span style="color: #8abeb7;">" "</span>.$<span style="color: #f0c674;">a</span>[$<span style="color: #f0c674;">i</span>];
        }
        $<span style="color: #f0c674;">h</span>{$<span style="color: #f0c674;">k</span>}=$<span style="color: #f0c674;">a</span>[0];
    }
    <span style="color: #b5bd68;">return</span> %<span style="color: #f0c674; text-decoration: underline;">h</span>;
}





<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">change_etc_hosts</span>

{
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">f</span>=shift;
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">h</span>=shift;
    open(F,$<span style="color: #f0c674;">f</span>);
    @<span style="color: #f0c674; text-decoration: underline;">lines</span>=;
    close(F);
    <span style="color: #b5bd68;">for</span> <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">k</span> (keys %$<span style="color: #f0c674;">h</span>){
        <span style="color: #969896; font-style: italic;">#print "k=$kn"; #debug</span>
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">need_replace</span>=0;
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">replaced</span>=0;
        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">a</span>=();
        <span style="color: #b5bd68;">for</span>(<span style="color: #de935f;">my</span> $<span style="color: #f0c674;">i</span>=0;$<span style="color: #f0c674;">i</span>&lt;=$#<span style="color: #f0c674; text-decoration: underline;">lines</span>;$<span style="color: #f0c674;">i</span>++){
            @<span style="color: #f0c674; text-decoration: underline;">a</span>=split(<span style="color: #8abeb7;">/[st]+/</span>,$<span style="color: #f0c674;">k</span>);
            <span style="color: #b5bd68;">if</span>( $#<span style="color: #f0c674; text-decoration: underline;">a</span> == 2 &amp;&amp; ($<span style="color: #f0c674;">a</span>[2] eq <span style="color: #8abeb7;">"none"</span>) ){
                <span style="color: #b5bd68;">next</span>;
            }

            <span style="color: #b5bd68;">if</span>(&amp;<span style="color: #81a2be;">is_valid_ip</span>($<span style="color: #f0c674;">a</span>[0])){
                <span style="color: #b5bd68;">next</span>;
            }

            $<span style="color: #f0c674;">need_replace</span>=1;
            $<span style="color: #f0c674;">_</span>=$<span style="color: #f0c674;">a</span>[0];
            <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]!~<span style="color: #8abeb7;">/^[d.]+[st]+$_[strn]+/</span>){
                <span style="color: #b5bd68;">next</span>;
            }

            $<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]=~s<span style="color: #8abeb7;">/^[d.]+/$h-&gt;{$k}/</span>g;
            $<span style="color: #f0c674;">replaced</span>=1;

            <span style="color: #969896; font-style: italic;">#print "line=".$lines[$i]; #debug</span>
        }

        <span style="color: #b5bd68;">if</span>( $<span style="color: #f0c674;">need_replace</span> &amp;&amp; !$<span style="color: #f0c674;">replaced</span> ){
            push(@<span style="color: #f0c674; text-decoration: underline;">lines</span>,<span style="color: #8abeb7;">"$h-&gt;{$k} $a[0]n"</span>);
        }
    }
    <span style="color: #969896; font-style: italic;">#foreach (@lines){print "line=$_";}; #debug</span>
    open (F,<span style="color: #8abeb7;">"&gt;$f"</span>);
    print F (@<span style="color: #f0c674; text-decoration: underline;">lines</span>);
    close(F);
}



<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">get_pingcmd</span>

{
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">s</span>=<span style="color: #8abeb7;">`uname`</span>;chomp($<span style="color: #f0c674;">s</span>);
    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">s</span> eq <span style="color: #8abeb7;">"Linux"</span>){
        <span style="color: #b5bd68;">return</span> <span style="color: #8abeb7;">"ping -c3"</span>;
    }
    <span style="color: #b5bd68;">return</span> <span style="color: #8abeb7;">"ping"</span>;
}



<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">set_one_card</span>

{
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">addr</span>=shift;
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">ifcfg</span>=shift;
    <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">p</span>=split(<span style="color: #8abeb7;">/./</span>,$<span style="color: #f0c674;">addr</span>);
    open(F,<span style="color: #8abeb7;">"&lt;$ifcfg"</span>);
    <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">lines</span>=;
    <span style="color: #b5bd68;">for</span>(<span style="color: #de935f;">my</span> $<span style="color: #f0c674;">i</span>=0;$<span style="color: #f0c674;">i</span>&lt;=$#<span style="color: #f0c674; text-decoration: underline;">lines</span>;$<span style="color: #f0c674;">i</span>++){
        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]=~<span style="color: #8abeb7;">/IPADDR=.*$/</span>){
            $<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]=<span style="color: #8abeb7;">"IPADDR=$addrn"</span>;
        }
        <span style="color: #b5bd68;">elsif</span>($<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]=~<span style="color: #8abeb7;">/NETWORK=.*$/</span>){
            <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">orig</span>=split(<span style="color: #8abeb7;">/=/</span>,$<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]);
            chomp($<span style="color: #f0c674;">orig</span>[1]);
            <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">o</span>=split(<span style="color: #8abeb7;">/./</span>,$<span style="color: #f0c674;">orig</span>[1]);
            $<span style="color: #f0c674;">s</span>=<span style="color: #8abeb7;">"$p[0].$p[1].$p[2].$o[3]"</span>;
            $<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]=<span style="color: #8abeb7;">"NETWORK=$sn"</span>;

        }
        <span style="color: #b5bd68;">elsif</span>($<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]=~<span style="color: #8abeb7;">/BROADCAST=.*$/</span>){
            <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">orig</span>=split(<span style="color: #8abeb7;">/=/</span>,$<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]);
            chomp($<span style="color: #f0c674;">orig</span>[1]);
            <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">o</span>=split(<span style="color: #8abeb7;">/./</span>,$<span style="color: #f0c674;">orig</span>[1]);
            $<span style="color: #f0c674;">s</span>=<span style="color: #8abeb7;">"$p[0].$p[1].$p[2].$o[3]"</span>;
            $<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]=<span style="color: #8abeb7;">"BROADCAST=$sn"</span>;
        }
        <span style="color: #b5bd68;">elsif</span>($<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]=~<span style="color: #8abeb7;">/GATEWAY=.*$/</span>){
            <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">orig</span>=split(<span style="color: #8abeb7;">/=/</span>,$<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]);
            chomp($<span style="color: #f0c674;">orig</span>[1]);
            <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">o</span>=split(<span style="color: #8abeb7;">/./</span>,$<span style="color: #f0c674;">orig</span>[1]);
            $<span style="color: #f0c674;">s</span>=<span style="color: #8abeb7;">"$p[0].$p[1].$p[2].$o[3]"</span>;
            $<span style="color: #f0c674;">lines</span>[$<span style="color: #f0c674;">i</span>]=<span style="color: #8abeb7;">"GATEWAY=$sn"</span>;
        }
    }
    close(F);
    open (F,<span style="color: #8abeb7;">"&gt;$ifcfg"</span>);
    print F (@<span style="color: #f0c674; text-decoration: underline;">lines</span>);
    close(F);
    <span style="color: #b5bd68;">return</span> 0;
}



<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">get_netprop</span>

{
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">addr</span>=shift;
    <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">p</span>=split(<span style="color: #8abeb7;">/./</span>,$<span style="color: #f0c674;">addr</span>);
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">network</span>=<span style="color: #8abeb7;">"$p[0].$p[1].$p[2].0"</span>;
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">broadcast</span>=<span style="color: #8abeb7;">"$p[0].$p[1].$p[2].255"</span>;
    <span style="color: #b5bd68;">return</span> ($<span style="color: #f0c674;">network</span>,$<span style="color: #f0c674;">broadcast</span>,);
}



<span style="color: #969896; font-style: italic;"># </span><span style="color: #969896; font-style: italic;">Return: </span>

<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">change_ip</span>

{
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">k</span>=shift;
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">addr</span>=shift;
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">dir</span>=shift;
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">netcard</span>=shift;
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">tr</span>=shift;

    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">ret</span>=0;
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">s</span>=<span style="color: #8abeb7;">`hostname`</span>;chomp($<span style="color: #f0c674;">s</span>);
    <span style="color: #de935f;">my</span> ($<span style="color: #f0c674;">network</span>,$<span style="color: #f0c674;">broadcast</span>)=&amp;<span style="color: #81a2be;">get_netprop</span>($<span style="color: #f0c674;">addr</span>);
    <span style="color: #b5bd68;">if</span>( $<span style="color: #f0c674;">s</span> eq $<span style="color: #f0c674;">k</span>){ <span style="color: #969896; font-style: italic;">#local</span>
        <span style="color: #969896; font-style: italic;">#print "s=$s;k=$kn"; #debug</span>
        $<span style="color: #f0c674;">ret</span>=&amp;<span style="color: #81a2be;">set_one_card</span>($<span style="color: #f0c674;">addr</span>,<span style="color: #8abeb7;">"$dir/ifcfg-$netcard"</span>);
        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">ret</span>){ &amp;<span style="color: #81a2be;">a</span>(0); <span style="color: #b5bd68;">return</span> $<span style="color: #f0c674;">ret</span>;}
        <span style="color: #b5bd68;">return</span> $<span style="color: #f0c674;">ret</span>;
    }
    <span style="color: #969896; font-style: italic;">#remote</span>
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">u</span>=&amp;<span style="color: #81a2be;">unique_id</span>();
    <span style="color: #969896; font-style: italic;">#print "k=$kn"; #debug</span>
    $<span style="color: #f0c674;">ret</span>=system(<span style="color: #8abeb7;">"scp root@$k:$dir/ifcfg-$netcard /tmp/$u.ifcfg-$netcard </span>
<span style="color: #8abeb7;">              &gt;/dev/null 2&gt;&amp;1"</span>);
    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">ret</span>){ <span style="color: #969896; font-style: italic;"># maybe jnior</span>
        $$<span style="color: #f0c674;">tr</span>=1;
        <span style="color: #de935f;">my</span> ($<span style="color: #f0c674;">name</span>,$<span style="color: #f0c674;">dir</span>,$<span style="color: #f0c674;">suffix</span>)=fileparse($<span style="color: #f0c674;">0</span>);
        &amp;<span style="color: #81a2be;">a</span>(-e $<span style="color: #f0c674;">dir</span>.<span style="color: #8abeb7;">"chg_jnior_ip.exp"</span>);
        $<span style="color: #f0c674;">ret</span>=system($<span style="color: #f0c674;">dir</span>.<span style="color: #8abeb7;">"chg_jnior_ip.exp $k $addr &gt;/dev/null 2&gt;&amp;1"</span>);
        <span style="color: #b5bd68;">return</span> $<span style="color: #f0c674;">ret</span>;
    }
    <span style="color: #b5bd68;">else</span>{
        $$<span style="color: #f0c674;">tr</span>=0;
    }
    $<span style="color: #f0c674;">ret</span>=&amp;<span style="color: #81a2be;">set_one_card</span>($<span style="color: #f0c674;">addr</span>,<span style="color: #8abeb7;">"/tmp/$u.ifcfg-$netcard"</span>);

    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">ret</span>){ &amp;<span style="color: #81a2be;">a</span>(0); <span style="color: #b5bd68;">return</span> $<span style="color: #f0c674;">ret</span>;}
    $<span style="color: #f0c674;">ret</span>=system(<span style="color: #8abeb7;">"scp /tmp/$u.ifcfg-$netcard root@$k:$dir/ifcfg-$netcard </span>
<span style="color: #8abeb7;">              &gt;/dev/null 2&gt;&amp;1"</span>);
    system(<span style="color: #8abeb7;">"rm -f /tmp/$u.ifcfg-$netcard &gt;/dev/null 2&gt;&amp;1"</span>);
    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">ret</span>){ &amp;<span style="color: #81a2be;">a</span>(0); <span style="color: #b5bd68;">return</span> $<span style="color: #f0c674;">ret</span>;}
    <span style="color: #b5bd68;">return</span> $<span style="color: #f0c674;">ret</span>;
}



<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">unique_id</span>()

{
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">sessionId</span>  =<span style="color: #8abeb7;">""</span>;
    <span style="color: #b5bd68;">for</span>($<span style="color: #f0c674;">i</span>=0 ; $<span style="color: #f0c674;">i</span>&lt; 32 ;) 
    {
        $<span style="color: #f0c674;">j</span> = chr(int(rand(127)));
        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">j</span> =~ <span style="color: #8abeb7;">/[a-zA-Z0-9]/</span>)
        {
            $<span style="color: #f0c674;">sessionId</span> .=$<span style="color: #f0c674;">j</span>;
            $<span style="color: #f0c674;">i</span>++;
        }
    }
    <span style="color: #b5bd68;">return</span> $<span style="color: #f0c674;">sessionId</span>;
g}



<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">is_valid_ip</span>

{
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">ip</span>=shift;
    <span style="color: #b5bd68;">if</span>( $<span style="color: #f0c674;">ip</span> !~ <span style="color: #8abeb7;">/^d{1,3}.d{1,3}.d{1,3}.d{1,3}$/</span> ){
        <span style="color: #b5bd68;">return</span> 0;
    }
    <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">a</span>=split(<span style="color: #8abeb7;">'.'</span>,$<span style="color: #f0c674;">ip</span>);
    <span style="color: #969896; font-style: italic;">#print "$a[0] $a[1] $a[2] $a[3]n";#debug</span>
    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">a</span>[0]&gt;255){ <span style="color: #b5bd68;">return</span> 0;}
    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">a</span>[1]&gt;255){ <span style="color: #b5bd68;">return</span> 0;}
    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">a</span>[2]&gt;255){ <span style="color: #b5bd68;">return</span> 0;}
    <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">a</span>[3]&gt;255){ <span style="color: #b5bd68;">return</span> 0;}
    <span style="color: #b5bd68;">return</span> 1;
}



<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">who_are_pingable</span>

{
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">h</span>=shift;
    <span style="color: #de935f;">my</span> %<span style="color: #f0c674; text-decoration: underline;">p</span>=();
    <span style="color: #b5bd68;">for</span> <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">k</span> (sort keys %$<span style="color: #f0c674;">h</span>){
        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">a</span>=split(<span style="color: #8abeb7;">/[st]+/</span>,$<span style="color: #f0c674;">k</span>);
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">s</span>=<span style="color: #8abeb7;">`hostname`</span>;chomp($<span style="color: #f0c674;">s</span>);
        <span style="color: #b5bd68;">if</span>($<span style="color: #f0c674;">a</span>[0] eq $<span style="color: #f0c674;">s</span>){
            print <span style="color: #8abeb7;">"test $a[0] ... connectablen"</span>;
            $<span style="color: #f0c674;">p</span>{$<span style="color: #f0c674;">a</span>[0]}=$<span style="color: #f0c674;">USE_SSH</span>;
            <span style="color: #b5bd68;">next</span>;
        }
        <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">pingcmd</span>=&amp;<span style="color: #81a2be;">get_pingcmd</span>();
        print <span style="color: #8abeb7;">"test $a[0] ... "</span>;
        <span style="color: #b5bd68;">if</span>(system(<span style="color: #8abeb7;">"$pingcmd $a[0] &gt;/dev/null 2&gt;&amp;1"</span>)!=0){
            print <span style="color: #8abeb7;">"NOT connectablen"</span>;
            <span style="color: #b5bd68;">next</span>;
        }
        <span style="color: #b5bd68;">else</span>{
            print <span style="color: #8abeb7;">"connectablen"</span>;
        }

        $<span style="color: #f0c674;">p</span>{$<span style="color: #f0c674;">a</span>[0]}=1;
    }
    <span style="color: #b5bd68;">return</span> %<span style="color: #f0c674; text-decoration: underline;">p</span>;
}



<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">get_hosts_from_arp</span>

{
    <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">a</span>=grep(!<span style="color: #8abeb7;">/incomplete/</span>,split(<span style="color: #8abeb7;">/[rn]/</span>,<span style="color: #8abeb7;">`arp -a`</span>));
    <span style="color: #de935f;">my</span> %<span style="color: #f0c674; text-decoration: underline;">h</span>=();
    <span style="color: #b5bd68;">foreach</span> <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">l</span> (@<span style="color: #f0c674; text-decoration: underline;">a</span>){
        <span style="color: #de935f;">my</span> @<span style="color: #f0c674; text-decoration: underline;">s</span>=split(<span style="color: #8abeb7;">/[st()]+/</span>,$<span style="color: #f0c674;">l</span>);
        $<span style="color: #f0c674;">h</span>{$<span style="color: #f0c674;">s</span>[0]}=$<span style="color: #f0c674;">s</span>[1];
    }
    <span style="color: #b5bd68;">return</span> %<span style="color: #f0c674; text-decoration: underline;">h</span>;
}



<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">usage</span>

{
    <span style="color: #de935f;">my</span> ($<span style="color: #f0c674;">name</span>,$<span style="color: #f0c674;">dir</span>,$<span style="color: #f0c674;">suffix</span>)=fileparse($<span style="color: #f0c674;">0</span>);
    print STDERR &lt;&lt; <span style="color: #8abeb7;">"EOF"</span>;
    USAGE
        $<span style="color: #f0c674;">name</span> [OPTION] <span style="color: #8abeb7;">"ip hostname [netcard default/none]"</span>

        DESCRIPTION
        Change IP of remote hosts.
        -h    : this (help) message
        -d    : self test and print debugging messages to stderr
        -a    : <span style="color: #b5bd68;">use</span> <span style="color: #8abeb7;">`arp -a`</span> to verify remote hosts reachable
        <span style="color: #8abeb7;">`$name "ip host"`</span> (without either -a or -p)  
        equals <span style="color: #8abeb7;">`$name -a "ip host"`</span>
        -p    : <span style="color: #b5bd68;">use</span> <span style="color: #8abeb7;">`ping`</span> to verify remote hosts reachable

        <span style="color: #de935f;">netcard</span>      : the name of the netcard
        default/none : default - the changed ip will be recorded in /etc/hosts
        none    - contrary to <span style="color: #8abeb7;">"default"</span>

        EXAMPLE
        echo 192.168.30.151 manager|$<span style="color: #f0c674;">name</span>
        echo 192.168.30.151 manager eth1 none|$<span style="color: #f0c674;">name</span> 
        echo 192.168.30.151 manager eth1 none|$<span style="color: #f0c674;">name</span>  -p
        cat /etc/hosts|$<span style="color: #f0c674;">name</span> -a
        $<span style="color: #f0c674;">name</span> <span style="color: #8abeb7;">"192.168.30.151 manager"</span>
        $<span style="color: #f0c674;">name</span> <span style="color: #8abeb7;">"192.168.30.151 manager eth0 default"</span>

        AUTHOR
        Chen Bin 

        EOF
}

<span style="color: #b5bd68;">sub</span> <span style="color: #81a2be;">init</span>()

{
    <span style="color: #b5bd68;">use</span> <span style="color: #de935f;">Getopt</span>::Std;
    <span style="color: #de935f;">my</span> $<span style="color: #f0c674;">opt_string</span> = <span style="color: #8abeb7;">'hdap'</span>;
    getopts( <span style="color: #8abeb7;">"$opt_string"</span>, %<span style="color: #f0c674; text-decoration: underline;">opt</span> ) or usage();
}

</pre>

</body></html>