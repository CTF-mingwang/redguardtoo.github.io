<html><body><p>原文(英文版本)见<a href="http://www.slideshare.net/yukihiro_matz/how-emacs-changed-my-life">这里</a>. </p> <p> 以下是我的翻译兼一些技术方面的背景资料: </p> <div id="outline-container-1" class="outline-3"> <h3 id="sec-1">1980年,我开始编程.</h3> <div class="outline-text-3" id="text-1">  </div>  </div>  <div id="outline-container-2" class="outline-3"> <h3 id="sec-2">Basic,400 steps (此句不知如何翻译)</h3> <div class="outline-text-3" id="text-2">  </div>  </div>  <div id="outline-container-3" class="outline-3"> <h3 id="sec-3">1988年,我遇到了Emacs,在学校的Sun-3上,和200多个学生共用.</h3> <div class="outline-text-3" id="text-3">  </div>  </div>  <div id="outline-container-4" class="outline-3"> <h3 id="sec-4">Emacs实际上是被禁止使用的,因为消耗太多内存.所以我只是尝试了一下了.</h3> <div class="outline-text-3" id="text-4">  </div>  </div>  <div id="outline-container-5" class="outline-3"> <h3 id="sec-5">我可以自由下载Emacs并阅读其源代码.</h3> <div class="outline-text-3" id="text-5">  </div>  </div>  <div id="outline-container-6" class="outline-3"> <h3 id="sec-6">Emacs是我的第一个Lisp解释器.</h3> <div class="outline-text-3" id="text-6">  </div>  </div>  <div id="outline-container-7" class="outline-3"> <h3 id="sec-7">从Emacs我学到了很多关于语言实现的知识.</h3> <div class="outline-text-3" id="text-7">  </div>  </div>  <div id="outline-container-8" class="outline-3"> <h3 id="sec-8">例如,emacs的整数实现(Embedding integer in pointers)</h3> <div class="outline-text-3" id="text-8">  <p>参考Lisp<sub>Object定义</sub>,在Emacs源代码的lisp.h中,Lisp<sub>Object是一个既可以作为指针使用又可以作为整数使用的类型</sub> 具体代码见下,注意Lisp<sub>Int为0</sub>,使得非负整数可以直接转换为对应的List<sub>Object类型</sub>: </p>   <pre class="src src-c"><span style="color: #c397d8;">#define</span> <span style="color: #e7c547;">VALBITS</span> 29
<span style="color: #c397d8;">#define</span> <span style="color: #e7c547;">GCTYPEBITS</span> 3

<span style="color: #b9ca4a;">enum</span> <span style="color: #e78c45;">Lisp_Type</span>
  {
    <span style="color: #e7c547;">Lisp_Int</span> = 0,

    <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Symbol.  XSYMBOL (object) points to a struct Lisp_Symbol.  </span><span style="color: #969896; font-style: italic;">*/</span>
    <span style="color: #e7c547;">Lisp_Symbol</span> = 2,

    <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Miscellaneous.  XMISC (object) points to a union Lisp_Misc,</span>
<span style="color: #969896; font-style: italic;">       whose first member indicates the subtype.  </span><span style="color: #969896; font-style: italic;">*/</span>
    <span style="color: #e7c547;">Lisp_Misc</span> = 3,

    <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">String.  XSTRING (object) points to a struct Lisp_String.</span>
<span style="color: #969896; font-style: italic;">       The length of the string, and its contents, are stored therein.  </span><span style="color: #969896; font-style: italic;">*/</span>
    <span style="color: #e7c547;">Lisp_String</span> = LISP_STRING_TAG,

    <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Vector of Lisp objects, or something resembling it.</span>
<span style="color: #969896; font-style: italic;">       XVECTOR (object) points to a struct Lisp_Vector, which contains</span>

<span style="color: #969896; font-style: italic;">       the size and contents.  The size field also contains the type</span>

<span style="color: #969896; font-style: italic;">       information, if it's not a real vector object.  </span><span style="color: #969896; font-style: italic;">*/</span>
    <span style="color: #e7c547;">Lisp_Vectorlike</span> = 5,

    <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Cons.  XCONS (object) points to a struct Lisp_Cons.  </span><span style="color: #969896; font-style: italic;">*/</span>
    <span style="color: #e7c547;">Lisp_Cons</span> = 6,

    <span style="color: #e7c547;">Lisp_Float</span> = 7,
  };


<span style="color: #b9ca4a;">typedef</span> <span style="color: #b9ca4a;">union</span> <span style="color: #e78c45;">Lisp_Object</span>
  {
    <span style="color: #969896; font-style: italic;">/* </span><span style="color: #969896; font-style: italic;">Used for comparing two Lisp_Objects;</span>
<span style="color: #969896; font-style: italic;">       also, positive integers can be accessed fast this way.  </span><span style="color: #969896; font-style: italic;">*/</span>
    <span style="color: #e78c45;">EMACS_UINT</span> <span style="color: #e7c547;">i</span>;

    <span style="color: #b9ca4a;">struct</span>
      {
    <span style="color: #e78c45;">EMACS_INT</span> <span style="color: #e7c547;">val</span>  : VALBITS;
    <span style="color: #b9ca4a;">enum</span> <span style="color: #e78c45;">Lisp_Type</span> <span style="color: #e7c547;">type</span> : GCTYPEBITS;
      } <span style="color: #e7c547;">s</span>;
    <span style="color: #b9ca4a;">struct</span>
      {
    <span style="color: #e78c45;">EMACS_UINT</span> <span style="color: #e7c547;">val</span> : VALBITS;
    <span style="color: #b9ca4a;">enum</span> <span style="color: #e78c45;">Lisp_Type</span> <span style="color: #e7c547;">type</span> : GCTYPEBITS;
      } <span style="color: #e7c547;">u</span>;
  }
<span style="color: #e78c45;">Lisp_OLisp_Stringbject</span>;

</pre>  </div>  </div>  <div id="outline-container-9" class="outline-3"> <h3 id="sec-9">又例如Emacs的内存自动回收机制(Mark and sweep garbage collection)</h3> <div class="outline-text-3" id="text-9">  <p>具体细节参考<a href="http://lists.gnu.org/archive/html/emacs-devel/2011-10/msg01289.html">这里</a>的讨论. </p></div>  </div>  <div id="outline-container-10" class="outline-3"> <h3 id="sec-10">C和Lisp的Calling conventions(不好翻,基本上就是函数如何调用,函数参数的内存模型之类…)</h3> <div class="outline-text-3" id="text-10">  </div>  </div>  <div id="outline-container-11" class="outline-3"> <h3 id="sec-11">我完全理解Lisp怎么工作的</h3> <div class="outline-text-3" id="text-11">  </div>  </div>  <div id="outline-container-12" class="outline-3"> <h3 id="sec-12">我被Lisp Objects迷住了</h3> <div class="outline-text-3" id="text-12">  </div>  </div>  <div id="outline-container-13" class="outline-3"> <h3 id="sec-13">当我得到Sparc工作站时我开始使用Emacs</h3> <div class="outline-text-3" id="text-13">  </div>  </div>  <div id="outline-container-14" class="outline-3"> <h3 id="sec-14">我完全被迷住了,Emacs成为我的一部分</h3> <div class="outline-text-3" id="text-14">  </div>  </div>  <div id="outline-container-15" class="outline-3"> <h3 id="sec-15">而且Emacs任何我不喜欢的部分我都可以改,Emacs完全可配置.</h3> <div class="outline-text-3" id="text-15">  </div>  </div>  <div id="outline-container-16" class="outline-3"> <h3 id="sec-16">Emacs使我明白了任何东西都可以被程序员改变</h3> <div class="outline-text-3" id="text-16">  </div>  </div>  <div id="outline-container-17" class="outline-3"> <h3 id="sec-17">完全的自由</h3> <div class="outline-text-3" id="text-17">  </div>  </div>  <div id="outline-container-18" class="outline-3"> <h3 id="sec-18">编辑时可以无视键位设置</h3> <div class="outline-text-3" id="text-18">  </div>  </div>  <div id="outline-container-19" class="outline-3"> <h3 id="sec-19">我想用Emacs做所有的事,编程,文档,邮件…</h3> <div class="outline-text-3" id="text-19">  </div>  </div>  <div id="outline-container-20" class="outline-3"> <h3 id="sec-20">所以我写了"cmail",我的第一个严肃的Lisp程序,我每天用它</h3> <div class="outline-text-3" id="text-20">  </div>  </div>  <div id="outline-container-21" class="outline-3"> <h3 id="sec-21">1993年,我开始搞我的Ruby</h3> <div class="outline-text-3" id="text-21">  </div>  </div>  <div id="outline-container-22" class="outline-3"> <h3 id="sec-22">Ruby的设计受到Emacs实现的影响,例如整数和tagged pointer合用,相似的GC,和Lisp类似的Object Model</h3> <div class="outline-text-3" id="text-22">  <p>tagged pointer的细节请参考上文的C代码,高地址的3bit用作判别数据类型,低地址的29bit用作指针或者整数(取决于数据类型) </p></div>  </div>  <div id="outline-container-23" class="outline-3"> <h3 id="sec-23">接下来我把Smalltalk的OO系统加上去</h3> <div class="outline-text-3" id="text-23">  </div>  </div>  <div id="outline-container-24" class="outline-3"> <h3 id="sec-24">语法我用Algol/Ada/Eiffel</h3> <div class="outline-text-3" id="text-24">  </div>  </div>  <div id="outline-container-25" class="outline-3"> <h3 id="sec-25">但是我是Emacs狂,所以在Emacs中支持auto-indent是必须的</h3> <div class="outline-text-3" id="text-25">  </div>  </div>  <div id="outline-container-26" class="outline-3"> <h3 id="sec-26">在1993年,类似的语法要支持auto-indent很难</h3> <div class="outline-text-3" id="text-26">  </div>  </div>  <div id="outline-container-27" class="outline-3"> <h3 id="sec-27">所以我就写了自己的ruby-mode.el,试图用elisp和正则表达式(regex)解决这个问题.</h3> <div class="outline-text-3" id="text-27">  </div>  </div>  <div id="outline-container-28" class="outline-3"> <h3 id="sec-28">一个礼拜后,我在给Ruby加上end关键字后终于成功了</h3> <div class="outline-text-3" id="text-28">  </div>  </div>  <div id="outline-container-29" class="outline-3"> <h3 id="sec-29">如果我不能让我的emacs下的ruby-mode成功,那么Ruby的语法会更像C</h3> <div class="outline-text-3" id="text-29">  </div>  </div>  <div id="outline-container-30" class="outline-3"> <h3 id="sec-30">这样就和其他脚本语言差不多,Ruby也不会那么受欢迎</h3> <div class="outline-text-3" id="text-30">  </div>  </div>  <div id="outline-container-31" class="outline-3"> <h3 id="sec-31">小结</h3> <div class="outline-text-3" id="text-31">  <ul> <li>Emacs教我什么是软件自由(freedom for software) </li> <li>Emacs教我如何读代码 </li> <li>Emacs让我认识到Lisp的威力 </li> <li>Emacs教我如何实现语言核心 </li> <li>Emacs教我如何进行内存自动回收(Garbage Collector) </li> <li>Emacs有助于我写代码和调试 </li> <li>我用Emacs写j文档邮件 </li> <li>Emacs让我成为高效程序员 </li> <li>Emacs让我成为黑客 </li> <li>Emacs永远改变了我的人生 </li> </ul>  </div> </div> </body></html>